{
  
    
        "post0": {
            "title": "SASS",
            "content": "Why SASS? . SASS is an improvement on CSS in that there are methods of abstraction. It is a stylesheet language that is compiled into CSS, which means that Sass will translate the Sass code you wrote into CSS, which is what your web browser can read. . SASS vs SCSS . As you learn about Sass, you might notice something called Scss. They are basically the same thing except that Scss uses curly braces and semicolons to distinguish between lines. Sass uses indentation and newlines instead. We will be teaching the Scss syntax because it is more commonly used. . Getting started . A easy way to write SASS and have it preprocessed into CSS is by using a Jekyll powered website, such as GitHub pages or Fastpages. . The first step is to clone a GitHub pages repo, such as this one. . Within the repository, head over to assets/css/, and open style.scss. . This is where you can create your SASS code. . To see your CSS-translated SASS code, head over to _site/assets/css/style.css . Note: You will need to run bundle exec jekyll serve before the _site directory appears. . The first few hundred lines are used to style Github&#39;s theme. Make sure to scroll to the very bottom to see the SASS code that you wrote, which is in the form of CSS. . Nesting . While writing CSS, you may notice that many selectors share the same element. . For example, let&#39;s say you have a div element that controls the font. Inside the div element, you have two other divs that control the font size. . SASS provides a feature called nesting in which you can write styling code in a way that looks like an HTML hierarchy. . Mini-hack . Write out the SASS equivalent for the following CSS code: . .a .b { color: green; } .a .c { color: blue; } . .a { . .b { . color: green; . } . .c { . color: blue; . } . } . Extend/Inheritance . What are some similarities that the buttons share? What are the differences? . The buttons have the same width and height, font color, and spacing between each button. They have a different background color. If we were to write it out in CSS, we would need to specify these properties for each button selector. . With SASS, we can create a placeholder class that stores the code we want to reuse. A placeholder class looks like this: . Mixin . To give the buttons a background, we used background: radial-gradient(); . Another way to code for the background is through the use of a mixin. . A mixin is similar to extend in that it creates a code template that can be reused. It can also take in parameters so that you can create dynamic styling. . In the example of the buttons, all three buttons have a gradient background. However, the background colors are different. . With SASS, we can create a @mixin at rule that takes in two colors as the parameter: . In addition, you can also place styling rules that do not take in variables within mixin. . The code below shows how to style the rest of the button within a mixin: . Mini-hack . Write out a mixin in SASS that takes in a color and a font size as the parameter. Within the mixin, set the background color and font color to the color parameter, and set the font size to the font size parameter. Then create a selector that calls the mixin, and pass in a color and font size of your choice as the arguments. . @mixin style($color, $font-size) { . background-color: $color; . color: $color; . font-size: $font-size; . } . / Call the mixin and pass in specific color and font size values / . .my-selector { . @include style(#ff0000, 16px); . } . Function . To change between light and dark mode, we can create an invert function in SASS. . Functions in SASS look like this: . @function name(parameters) { . //code @return value; . } . A function can be created that takes in an rgb value and returns the inverted rgb color. . To invert colors, subtract each rgb value from 255. . The function looks something like this: . @function sassInvert($r, $g, $b) { . $newColor: rgb(255 - $r, 255 - $g, 255 - $b); @return $newColor; . } . Functions are called by specifying the function name with parenthesis. Inside the parenthesis, you can specify the arguments. . For instance, the invert selector looks like this: . .invert { . background-color: sassInvert(0, 0, 0); color: sassInvert(211,202,202); . } . Import . There is a way to split your code into multiple files and import them into one file. . For instance, to put the styling for function.html in another SASS file, first create a directory called _sass. . Within the directory, create another SASS file. In this case, the file is called functionStyle.scss . Write your SASS code in that file. Once you are finished, switch back to style.scss and import the file with @import &quot;file-name&quot; . For instance, to import the functionStyle.scss file into style.scss , the import statement would be @import &quot;functionStyle&quot;. . SASS Hacks . Take notes and complete the mini-hacks. (0.9) . | Complete the quiz questions and provide your answers in this notebook. (0.9) . | Use SASS to create something that uses either extend or mixin. (0.9) . | Extra credit: Research other SASS features and blog about what you learned or add to your SASS project with any extra features not covered in this lesson. More points will be given if both are done. . | b. A scripting language that has many styling operations | a. They are very similar in their function, but their syntax is slightly different | a. SASS has more functions than CSS | b. Syntactically Awesome Style Sheets | d. Compute | b. Extend | I&#39;m not sure because the question doesn&#39;t make much sense. I&#39;m guessing d. Token | // Define a mixin to create a gradient background . @mixin gradient-background($start-color, $end-color) { . background: $start-color; . background: linear-gradient(to bottom, $start-color 0%, $end-color 100%); . } . // Use the mixin to create a class with a blue-to-purple gradient background . .gradient-box { . @include gradient-background(#4a89dc, #8e44ad); . padding: 20px; . border-radius: 5px; . color: #fff; . } .",
            "url": "https://qaisj1.github.io/quissite/2023/06/06/sass-lesson.html",
            "relUrl": "/2023/06/06/sass-lesson.html",
            "date": " • Jun 6, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Api",
            "content": "&lt;!DOCTYPE html&gt; . Physics Concepts Table . Physics Concepts Table . Concept Description Symbol Unit . .",
            "url": "https://qaisj1.github.io/quissite/2023/06/06/api.html",
            "relUrl": "/2023/06/06/api.html",
            "date": " • Jun 6, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Basic JavaScript Knowledge",
            "content": "Variables . - declare JavaScript variables with var, let or const. - If the value of the variable can change, like a total, use let. If the value is set, like prices, use const. Variables can hold any data type. . var x = 5; var y = 6; var z = x + y; z . 11 . Data types- there are 8 JS data types. . List a few data types that you already knowStrings Integers Floats . | . 1. String: a series of characters, written with single or double quotes . let text = &quot;Mort&quot;; text . &#39;Mort&#39; . let text2 = &#39;Yeung&#39;; text2 . &#39;Yeung&#39; . 2. Number: can be integers or decimals. . - You can also have exponential notation for large/small numbers . 3. Bigint: used to store integer values that are too big to be represented by a normal JS number . - JavaScript integers are only accurate up to 15 digits . var number = 1234567890123456789012345; var LargeNum = (1234567890123456789012345); var typeLargeNum = typeof LargeNum; //typeLargeNum . 4. Boolean: true or false, used in conditional testing . Boolean(10 &gt; 9) . true . Write a boolean statement that outputs true . 5. Undefined: a variable without a value, has the value undefined/empty values . let name; name . grade = undefined; . 6. Null: represents the intentional absence of any object value . - variable is empty at the moment and may have a value later . let result; result = Boolean(undefined); console.log(result); // false result = Boolean(null); console.log(result); // false . false false . 7. Symbol: used to represent unique values that can be used as identifiers/keys in objects. . - They are also used to create private properties and methods in classes. - unique and immutable, so they can be used as unique identifiers in objects and classes. - useful for creating constants that can be shared across different parts of your code. . // Create a Symbol const mySymbol = Symbol(); console.log(mySymbol); // expected output: Symbol() . Symbol() . const myObject3 = { [mySymbol]: &#39;Hello World&#39; }; console.log(myObject3[mySymbol]); . Hello World . Edit/add to the code above so that it outputs &quot;Hello World&quot; . 8. Object: an unordered collection of key-value pairs. Each key-value pair is called a property. . - object: written with curly braces {}, name:value pairs - array: written with square brackets, separated by commas . Object . Identify the name/keys in the object below: name, breed, age, color | Identify the values in the object below: Elly, Rottweiler, 4, Black | . const dogs = {name: &quot;Elly&quot;, breed:&quot;Rottweiler&quot;, age:4, color:&quot;black&quot;} dogs . { name: &#39;Elly&#39;, breed: &#39;Rottweiler&#39;, age: 4, color: &#39;black&#39; } . Array . const songs = [&quot;Love Story&quot;, &quot;Blank Space&quot;, &quot;I Knew You Were Trouble&quot;]; songs . [ &#39;Love Story&#39;, &#39;Blank Space&#39;, &#39;I Knew You Were Trouble&#39; ] . Const . - We use const to declare variables whose value can be initialized only at the time of declaration. - Const means that the identifier cannot be reassigned. . const cost1 = 2; const cost2 = 11; let totalCost = cost1 + cost2; totalCost . 13 . Conditionals: control behavior, decides whether or not pieces of code can run. . - If: if a condition is true it is used to specify execution for a block of code. - Else: if the same condition is false it specifies the execution for a block of code. - Else If: new test if the first condition is false. . if (10 &gt; 5) { var outcome = &quot;True&quot;; } outcome; . &#39;True&#39; . if (&quot;red&quot; === &quot;blue&quot;) { var outcome = &quot;if block&quot;; } else { var outcome = &quot;else block&quot;; } outcome; . &#39;else block&#39; . let temperature = 54 if (temperature &lt; 70) { cast = &quot;Chilly&quot;; } else if (temperature &lt; 60) { cast = &quot;Cold&quot;; } else { cast = &quot;Warm&quot;; } cast . &#39;Chilly&#39; . Create a conditional statement about how you would greet someone based on the time of day. . let currentTime = new Date(); let currentHour = currentTime.getHours(); if (currentHour &lt; 12) { console.log(&quot;Good morning!&quot;); } else if (currentHour &lt; 18) { console.log(&quot;Good afternoon!&quot;); } else { console.log(&quot;Good evening!&quot;); } . Good afternoon! . Functions: . - defining: define with function + functionName(parameter) { function code }. It can be unnamed/anonymous can be defined based on a condition. - calling: simply put the function name with a parameter and semicolon, or a function can call itself (recursive) . Iteration: . - for loop: repeats until a specified condition evaluates to false - do...while: repeats until a specified condition evaluates to false - while statement: executes its statements as long as a specified condition evaluates to true - label: provides a statement with an identifier that lets you refer to it later in the code. ex. you can use a label to identify a loop, and then use the break or continue statements to indicate whether a program should interrupt the loop or continue its execution - break: used to terminate a loop, switch, or in conjunction with a labeled statement - continue: can be used to restart a while, do-while, for, or label statement - for...in: iterates a specified variable over all the enumerable properties of an object - for...of statement creates a loop Iterating over iterable objects, invoking a custom iteration hook with statements to be executed for the value of each distinct property . JavaScript in HTML- Questions . Where do you store the JavaScript Code? In the memory of the browser proccess. | How do you import a JS file into HTML? Use the &lt; script &gt; tag and include the src attribute with the path to your JS file. | What is onClick? onClick is an event handler attribute used in HTML to execute JavaScript code when an element is clicked | What tag do you use to write JavaScript code? To write JavaScript code in HTML, you can use the &lt; script &gt; tag. You can include the code directly inside the &lt; script &gt; tag or reference an external file using the src attribute | Hacks . Add notes in this notebook | Complete the code portions, questions, and prompts throughout the notebook | Extra Credit: code a small JavaScript game |",
            "url": "https://qaisj1.github.io/quissite/2023/06/06/JSlesson.html",
            "relUrl": "/2023/06/06/JSlesson.html",
            "date": " • Jun 6, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "JavaScript Memory Game",
            "content": "/* Add your CSS styles here */ .game-board { display: flex; flex-wrap: wrap; width: 300px; margin: 0 auto; } .card { width: 100px; height: 100px; background-color: gray; margin: 10px; cursor: pointer; } . var cards = [ { color: &#39;blue&#39;, flipped: false }, { color: &#39;red&#39;, flipped: false }, { color: &#39;green&#39;, flipped: false } // Add more cards here as needed ]; var flippedCards = []; var patterns = [ [0, 1, 2], // First pattern [1, 0, 2], // Second pattern [2, 0, 1, 1, 0, 2] // Third pattern ]; var currentPatternIndex = 0; var patternIndex = 0; function flipCard(index) { var card = cards[index]; if (!card.flipped &amp;&amp; flippedCards.length &lt; 2) { card.flipped = true; flippedCards.push(card); updateCardStyles(); if (flippedCards.length === 2) { setTimeout(checkMatch, 1000); } else { setTimeout(resetFlippedCards, 1000); } } } function updateCardStyles() { var cardElements = document.getElementsByClassName(&#39;card&#39;); for (var i = 0; i &lt; cards.length; i++) { var card = cards[i]; var cardElement = cardElements[i]; if (card.flipped) { cardElement.style.backgroundColor = card.color; } else { cardElement.style.backgroundColor = &#39;gray&#39;; } } } function checkMatch() { if (flippedCards[0].color === flippedCards[1].color) { alert(&#39;Match!&#39;); resetFlippedCards(); patternIndex++; if (patternIndex === patterns[currentPatternIndex].length) { patternIndex = 0; currentPatternIndex++; if (currentPatternIndex === patterns.length) { alert(&#39;You Win!&#39;); resetGame(); } else { setTimeout(showPattern, 1000); } } } else { alert(&#39;You Lose&#39;); resetGame(); } } function resetFlippedCards() { flippedCards.forEach(function (card) { card.flipped = false; }); flippedCards = []; updateCardStyles(); } function showPattern() { var delay = 1000; patterns[currentPatternIndex].forEach(function (index, i) { setTimeout(function () { flipCard(index); }, delay * (i + 1)); }); setTimeout(resetFlippedCards, delay * patterns[currentPatternIndex].length + 500); } function resetGame() { flippedCards = []; currentPatternIndex = 0; patternIndex = 0; clearPattern(); } function clearPattern() { patternIndex = 0; } // Call the initial functions to start the game showPattern(); . ReferenceError: document is not defined at updateCardStyles (evalmachine.&lt;anonymous&gt;:34:33) at flipCard (evalmachine.&lt;anonymous&gt;:23:7) at Timeout._onTimeout (evalmachine.&lt;anonymous&gt;:84:9) at ontimeout (timers.js:386:14) at tryOnTimeout (timers.js:250:5) at Timer.listOnTimeout (timers.js:214:5)ReferenceError: document is not defined at updateCardStyles (evalmachine.&lt;anonymous&gt;:34:33) at flipCard (evalmachine.&lt;anonymous&gt;:23:7) at Timeout._onTimeout (evalmachine.&lt;anonymous&gt;:84:9) at ontimeout (timers.js:386:14) at tryOnTimeout (timers.js:250:5) at Timer.listOnTimeout (timers.js:214:5) at listOnTimeoutNT (timers.js:276:26) at _combinedTickCallback (internal/process/next_tick.js:77:11) at process._tickCallback (internal/process/next_tick.js:104:9)ReferenceError: document is not defined at updateCardStyles (evalmachine.&lt;anonymous&gt;:34:33) at Timeout.resetFlippedCards [as _onTimeout] (evalmachine.&lt;anonymous&gt;:76:5) at ontimeout (timers.js:386:14) at tryOnTimeout (timers.js:250:5) at Timer.listOnTimeout (timers.js:214:5) at listOnTimeoutNT (timers.js:276:26) at _combinedTickCallback (internal/process/next_tick.js:77:11) at process._tickCallback (internal/process/next_tick.js:104:9) .",
            "url": "https://qaisj1.github.io/quissite/MemoryGame/",
            "relUrl": "/MemoryGame/",
            "date": " • Jun 5, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "JavaScript Tutorial",
            "content": ". JavaScript and Jupyter references . JavaScript is the most important language you need to learn as a frontend developer. Jupyter Notebooks is a convenient way to learn the language without the overhead of creating a full Website. Jupyter Notebooks had ChatGPT plugins to assist with design and troubleshooting problems. This Notebook has colors on HTML pages that were designed with a dark mode background. . JavaScript / Jupyter General References . W3Schools JS Reference - ChatGPT AI assistant for Chrome/Jupyter | Theme setup for Jupyter Article. Or do these commands from shell... Install pip: pip install jupyterthemes | Revert to original theme: jt -r | List themes: jt -l | Install with Theme, Name, Logo: jt -t onedork -T -N -kl | . | Chrome Dev Tools | . | Coding with jQuery . Jupyter Notebook GitHub, wget: https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2022-09-19-PBL-javascript_tutorial.ipynb | Markdown Fetch example in GitHub project for APCSP | HTML Static example in GitHub project for flask_portfolio | . | . output using HTML and CSS . Multiple cells are used to setup HTML in this lesson. Many of the JavaScript cells will use the output tag(s) to write into the HTML that has been setup. . %%html is used to setup HTML code block | &quot;style&quot; tag enables visuals customization | &quot;div&quot; tag is setup to receive data | . %%html &lt;html&gt; &lt;head&gt; &lt;style&gt; #output { background-color: #353b45; padding: 10px; border: 3px solid #ccc; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;output&quot;&gt; Hello! &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; . . Hello! . output explored . There are several ways to ouput the classic introduction message: &quot;Hello, World!&quot; . Before you go further, open Console on your Browser. JavaScript developer leaves Console open all the time!!! | The function console.log() outputs to Console, this is often used for inspection or debugging. | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. Developer call this a hard coded string. | &quot;Hello, World&quot; literal is a parameter to console.log(), element.txt() and alert(). | The element.txt function is part of Jupyter Notebook %%js magic. This is convenient for Notebook and testing. | The alert command outputs the parameter to a dialog box, so you can see it in this Jupyter notebook. The alert commands are shown, but are commented out as the stop run all execution of the notebook. | Note, in a Web Application Debugging: An alert is often used for less savy Developers. Console is used by more savy developers; console often requires setting up a lot of outputs. Source level debugging is the most powerful solution for debugging and does not require alert or console commands. | . %%js // required to allow cell to be JavaScript enabled console.log(&quot;JavaScript/Jupyter Output Intro&quot;); // Browser Console output; debugging or tracing console.log(&quot;Hello, World!&quot;); console.log(&quot;Hello, World Again!&quot;); // Document Object Model (DOM) output; output to HTML, CSS which is standard for a Web Page // &lt;mark&gt;select element method&lt;/mark&gt;: DOM native JavaScript get, document.getElementByID document.getElementById(&quot;output&quot;).textContent = &quot;Hello, World!&quot;; // &lt;mark&gt;jQuery CSS-style method&lt;/mark&gt;: Tag for DOM selector, $(&#39;#output&#39;) $(&#39;#output&#39;).append(&#39;&lt;br&gt;&lt;b&gt;Hello World Again!&#39;); // br is break or new line, b is bold // Jupyter built in magic element for testing and convenience of development element.text(&quot;Hello, World!&quot;); // element is output option as part of %%js magic element.append(&#39;&lt;br&gt;&lt;b&gt;Hello World Again!&#39;); //alert(&quot;Hello, World!&quot;); . multiple outputs using one variable . This second example is a new sequence of code, two or more lines of code forms a sequence. This example defines a variable, thank goodness!!! In the previous example we were typing the string &quot;Hello, World&quot; over and over. Observe with the variable msg=&quot;Hello, World!&quot;; we type the string once and now use msg over and over. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console, be sure to Inspect it! | The element.text() is part of Jupyter Notebooks and displays as output blow the code on this page. Until we build up some more interesting data for Web Site, we will not use be using the Python HTML, CSS technique. | The alert(msg) works the same as previous, but as the other commands uses msg as parameter. | . %%js console.log(&quot;Variable Definition&quot;); var msg = &quot;Hello, World!&quot;; // Use msg to output code to Console and Jupyter Notebook console.log(msg); //right click browser select Inspect, then select Console to view element.text(msg); //alert(msg); . output showing use of a function . This example passes the defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are multiple steps in this code.. The &quot;definition of the function&quot;: &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. Passing a parameter is required when you call this function. | The &quot;call to the function:&quot;logIt(msg)&quot; is the call to the function, this actually runs the function. The variable &quot;msg&quot; is used a parameter when calling the logIt function. | . | Showing reuse of function... There are two calls to the logIt function | This is called Prodedural Abstraction, a term that means reusing the same code | . | . %%js console.log(&quot;Function Definition&quot;); /* Function: logIt * Parameter: output * Description: The parameter is &quot;output&quot; to console and jupyter page */ function logIt(output) { console.log(output); element.append(output + &quot;&lt;br&gt;&quot;); //alert(output); } // First sequence calling logIt function var msg = &quot;Hello, World!&quot;; logIt(msg); // Second sequence calling logIt function var msg = &quot;Hello, &lt;b&gt;Students&lt;/b&gt;!&quot; // replaces content of variable var classOf = &quot;Welcome CS class of 2023-2024.&quot; logIt(msg + &quot; &quot; + classOf); // concatenation of strings . output showing Loosely typed data . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. . To define a variable you prefix the name with var or const. The variable type is determined by JavaScript at runtime. | Python and many interpretive languages are loosely typed like JavaScript. This is considered programmer friendly. | Java which is a compiled language is strongly typed, thus you will see terms like String, Integer, Double, and Object in the source code. | In JavaScript, the typeof keyword returns the type of the variable. Become familiar with type as it is valuable in conversation and knowing type help you understand how to modify data. Each variable type will have built in methods to manage content within the data type. | . %%js console.log(&quot;Examine Data Types&quot;); // Function to add typeof to output function getType(output) { return typeof output + &quot;: &quot; + output; } // Function defintion function logIt(output) { console.log(getType(output)); // logs string console.info(output); // logs object element.append(getType(output) + &quot;&lt;br&gt;&quot;); // adds to Jupyter output //alert(getType(output)); } // Common Types element.append(&quot;Common Types &lt;br&gt;&quot;); logIt(&quot;Mr M&quot;); // String logIt(1997); // Number logIt(true); // Boolean element.append(&quot;&lt;br&gt;&quot;); // Object Type, this definition is often called a array or list element.append(&quot;Object Type, array &lt;br&gt;&quot;); var scores = [ 90, 80, 100 ]; logIt(scores); element.append(&quot;&lt;br&gt;&quot;); // Complex Object, this definition is often called hash, map, hashmap, or dictionary element.append(&quot;Object Type, hash or dictionary &lt;br&gt;&quot;); var person = { // key:value pairs seperated by comma &quot;name&quot;: &quot;Mr M&quot;, &quot;role&quot;: &quot;Teacher&quot; }; logIt(person); logIt(JSON.stringify(person)); //method used to convert this object into readable format . Build a Person object and JSON . JavaScript and other languages have special properties and syntax to store and represent data. In fact, a class in JavaScript is a special function. . Definition of class allows for a collection of data, the &quot;class Person&quot; allows programmer to retain name, github id, and class of a Person. | Instance of a class, the &quot;const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; makes an object &quot;teacher&quot; which is an object representation of &quot;class Person&quot;. | Setting and Getting properties After creating teacher and student objects, observe that properties can be changed/muted or extracted/accessed. | . %%html &lt;!-- load jQuery and tablesorter scripts --&gt; &lt;html&gt; &lt;head&gt; &lt;!-- load jQuery and tablesorter scripts --&gt; &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery.tablesorter/2.31.3/js/jquery.tablesorter.min.js&quot;&gt;&lt;/script&gt; &lt;style&gt; /* CSS-style selector maps to table id or other id&#39;s in HTML */ #jsonTable, #flaskTable { background-color: #353b45; padding: 10px; border: 3px solid #ccc; box-shadow: 0.8em 0.4em 0.4em grey; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- Table for writing and extracting jsonText --&gt; &lt;table id=&quot;jsonTable&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Classroom JSON Data&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td id=&quot;jsonText&quot;&gt;{&quot;classroom&quot;:[{&quot;type&quot;:&quot;object&quot;,&quot;name&quot;:&quot;sample&quot;,&quot;ghID&quot;:&quot;sample&quot;,&quot;classOf&quot;:2000,&quot;role&quot;:&quot;sample&quot;}]}&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; . . Classroom JSON Data . {&quot;classroom&quot;:[{&quot;type&quot;:&quot;object&quot;,&quot;name&quot;:&quot;sample&quot;,&quot;ghID&quot;:&quot;sample&quot;,&quot;classOf&quot;:2000,&quot;role&quot;:&quot;sample&quot;}]} | . . %%js console.log(&quot;Person objects&quot;); /* class: Person * Description: A collection of Person data */ class Person { /* method: constructor * parameters: name, ghID - GitHub ID, classOf - Graduation Class * description: returns object when &quot;new Person()&quot; is called with matching parameters * assignment: this.name, this.ghID, ... are properties retained in the returned object * default: role uses a default property, it is set to &quot;Student&quot; */ constructor(name, ghID, classOf, role=&quot;Student&quot;) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = role; } /* method: setter * parameters: role - role in classroom * description: this.role is updated from default value to value contained in role parameter */ setRole(role) { this.role = role; } /* method: getter * description: turns properties of object into JSON object * return value: JSON object */ getJSON() { const obj = {type: typeof this, name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } /* method: logIT * description: &quot;this&quot; Person object is logged to console */ logIt() { //Person Object console.info(this); //Log to Jupter element.append(&quot;Person object in JSON &lt;br&gt;&quot;); element.append(this.getJSON() + &quot;&lt;br&gt;&quot;); //alert(this.getJSON()); } } // make a new Person Object const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript // update role to Teacher teacher.setRole(&quot;Teacher&quot;); // set the role teacher.logIt(); // log to console // make a new Person Object const student = new Person(&quot;Jane Doe&quot;, &quot;jane&quot;, 2007); // object type is easy to work with in JavaScript student.logIt(); // log to console . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . %%js console.log(&quot;Classroom object&quot;); /* class: Person * Description: A collection of Person data */ class Person { /* method: constructor * parameters: name, ghID - GitHub ID, classOf - Graduation Class * description: returns object when &quot;new Person()&quot; is called with matching parameters * assignment: this.name, this.ghID, ... are properties retained in the returned object * default: this.role is a default property retained in object, it is set to &quot;Student&quot; */ constructor(name, ghID, classOf, role=&quot;Student&quot;) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = role; } /* method: setter * parameters: role - role in classroom * description: this.role is updated from default value to value contained in role parameter */ setRole(role) { this.role = role; } /* method: getter * description: turns properties of object into JSON object * return value: JSON object */ getJSON() { const obj = {type: typeof this, name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } /* method: logIT * description: &quot;this&quot; Person object is logged to console */ logIt() { //Person Object console.info(this); //Log to Jupter element.append(&quot;Person json &lt;br&gt;&quot;); element.append(this.getJSON() + &quot;&lt;br&gt;&quot;); //alert(this.getJSON()); } } /* class: Classroom * Description: A collection of Person objects */ class Classroom { /* method: constructor * parameters: teacher - a Person object, students - an array of Person objects * description: returns object when &quot;new Classroom()&quot; is called containing properties and methods of a Classroom * assignment: this.classroom, this.teacher, ... are properties retained in the returned object */ constructor(teacher, students) { /* spread: this.classroom contains Teacher object and all Student objects * map: this.json contains of map of all persons to JSON */ this.teacher = teacher; this.students = students; this.classroom = [teacher, ...students]; // ... spread option this.json = &#39;{&quot;classroom&quot;:[&#39; + this.classroom.map(person =&gt; person.getJSON()) + &#39;]}&#39;; } /* method: logIT * description: &quot;this&quot; Classroom object is logged to console */ logIt() { //Classroom object console.log(this); //Classroom json element.append(&quot;Classroom object in JSON&lt;br&gt;&quot;); element.append(this.json + &quot;&lt;br&gt;&quot;); //alert(this.json); } } /* function: constructCompSciClassroom * Description: Create data for Classroom and Person objects * Returns: A Classroom Object */ function constructCompSciClassroom() { // define a Teacher object const teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977, &quot;Teacher&quot;); // optional 4th parameter // define a student Array of Person objects const students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;VidhiKulkarni&quot;, 2024) ]; // make a CompSci classroom from formerly defined teacher and student objects return new Classroom(teacher, students); // returns object } // assigns &quot;compsci&quot; to the object returned by &quot;constructCompSciClassroom()&quot; function const compsci = constructCompSciClassroom(); // output of Objects and JSON in CompSci classroom compsci.logIt(); // enable sharing of data across jupyter cells $(&#39;#jsonText&#39;).text(compsci.json); // posts/embeds/writes compsci.json to HTML DOM element called jsonText . for loop to generate Table Rows in HTML output . This code extracts JSON text from HTML, that was placed in DOM in an earlier JavaScript cell, then it parses text into a JavaScript object. In addition, there is a for loop that iterates over the extracted object generating formated rows and columns in an HTML table. . Table generation is broken into parts... table data is obtained from a classroom array inside of the extracted object. | the JavaScript for loop allows the construction of a new row of data for each Person hash object inside of the the Array. | in the loop a table row &lt;tr&gt; ... &lt;/tr&gt; is created for each Hash object in the Array. | in the loop table data, a table column, &lt;td&gt; ... &lt;/td&gt; is created for name, ghID, classOf, and role within the Hash object. | . | . %%js console.log(&quot;Classroom Web Page&quot;); // extract JSON text from HTML page const jsonText = document.getElementById(&quot;jsonText&quot;).innerHTML; console.log(jsonText); element.append(&quot;Raw jsonText element embedded in HTML&lt;br&gt;&quot;); element.append( jsonText + &quot;&lt;br&gt;&quot;); // convert JSON text to Object const classroom = JSON.parse(jsonText).classroom; console.log(classroom); // from classroom object creates rows and columns in HTML table element.append(&quot;&lt;br&gt;Formatted data sample from jsonText &lt;br&gt;&quot;); for (var row of classroom) { element.append(row.ghID + &quot; &quot; + row.name + &#39;&lt;br&gt;&#39;); // tr for each row, a new line $(&#39;#classroom&#39;).append(&#39;&lt;tr&gt;&#39;) // td for each column of data $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.name + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.ghID + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.classOf + &#39;&lt;/td&gt;&#39;) $(&#39;#classroom&#39;).append(&#39;&lt;td&gt;&#39; + row.role + &#39;&lt;/td&gt;&#39;) // tr to end row $(&#39;#classroom&#39;).append(&#39;&lt;/tr&gt;&#39;); } . %%html &lt;head&gt; &lt;!-- load jQuery and DataTables syle and scripts --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css&quot;&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt;var define = null;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;table id=&quot;flaskTable&quot; class=&quot;table&quot; style=&quot;width:100%&quot;&gt; &lt;thead id=&quot;flaskHead&quot;&gt; &lt;tr&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;DOB&lt;/th&gt; &lt;th&gt;Age&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;flaskBody&quot;&gt;&lt;/tbody&gt; &lt;/table&gt; &lt;script&gt; $(document).ready(function() { fetch(&#39;https://flask.nighthawkcodingsociety.com/api/users/&#39;, { mode: &#39;cors&#39; }) .then(response =&gt; { if (!response.ok) { throw new Error(&#39;API response failed&#39;); } return response.json(); }) .then(data =&gt; { for (const row of data) { // BUG warning/resolution - DataTable requires row to be single append $(&#39;#flaskBody&#39;).append(&#39;&lt;tr&gt;&lt;td&gt;&#39; + row.id + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.name + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.dob + &#39;&lt;/td&gt;&lt;td&gt;&#39; + row.age + &#39;&lt;/td&gt;&lt;/tr&gt;&#39;); } // BUG warning - Jupyter does not show Datatable controls, works on deployed GitHub pages $(&quot;#flaskTable&quot;).DataTable(); }) .catch(error =&gt; { console.error(&#39;Error:&#39;, error); }); }); &lt;/script&gt; . . ID Name DOB Age . Hacks . One key to these hacks is to build confidence with me going into final grade, I would like to see each student adapt this frontend work in their final project. Second key is the finished work can serve as review for the course, notes for the future in relationship to frontend. . Adapt this tutorial to your own work | Consider what you need to work on to be stronger developer | Show something creative or unique, no cloning | Be ready to talk to Teacher for 5 to 10 minutes. Individually!!! | Show in Jupyter Notebook during discussion, show Theme and ChatGPT | Have a runtime final in GithHub Pages (or Fastpage) | .",
            "url": "https://qaisj1.github.io/quissite/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • May 23, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Python 2D Iteration and Animation",
            "content": "2D Programming and Resources . There are lots of applications for 2D data. Common terms in 2D are tabular data, row/columns, matrix, etc. Nested iterative loops are often used to find or discover each cell in a 2D array. . 2D samples and challenges in Jupyter. wget link:https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-05-16-DS-arrays_lab.ipynb- Mario animations in JS, these are markdown code examples. Assets metadata yml, wget and place in _data directory; sprite, download and place in images directory | Code to interact with Sprite Animations runtime, wget code | Game starters runtime, wget imperative code, wget oop code | . | . Python 2D array . Example of pre-populating 2D array and printing using 3 different styles . Candy Challenge:print a christmas tree and trunk | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society 2D arrays &quot;&quot;&quot; # Classic nested loops using ij indexes, this shows 2 dimensions def print_matrix1(matrix): print(&quot;Classic nested loops using ij indexes&quot;) for i in range(len(matrix)): # outer loop (i), built on length of matrix (rows) for j in range(len(matrix[i])): # inner loop (j), built on length of items (columns) print(matrix[i][j], end=&quot; &quot;) # [i][j] is 2D representation, end changes newline to space print() # Enhanced nested for loops, row and col variables def print_matrix2(matrix): print(&quot;Enhanced nested for loops&quot;) for row in matrix: # short hand row iterator, index is not required for col in row: # short hand column iterator print(col, end=&quot; &quot;) print() # For loop with shortcut (*) row expansion def print_matrix3(matrix): print(&quot;For loop with shortcut (*) row expansion&quot;) for row in matrix: print(*row) # pythons has (*) that is one line expansion of row into columns def test_matrices(): # setup some text matrices keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] keyboard = [[&quot;`&quot;, 1, &quot; &quot;, 2, &quot; &quot;,3, &quot; &quot;, 4, &quot; &quot;, 5, &quot; &quot;, 6, &quot; &quot;, 7, &quot; &quot;, 8, &quot; &quot;, 9, &quot; &quot;, 0, &quot; &quot;, &quot;-&quot;,&quot; &quot;, &quot;=&quot;], [&quot; &quot;, &quot; &quot;, &quot;Q&quot;, &quot; &quot;, &quot;W&quot;, &quot; &quot;, &quot;E&quot;, &quot; &quot;, &quot;R&quot;, &quot; &quot;, &quot;T&quot;, &quot; &quot;, &quot;Y&quot;, &quot; &quot;, &quot;U&quot;, &quot; &quot;, &quot;I&quot;, &quot; &quot;, &quot; &quot;, &quot;O&quot;, &quot; &quot;, &quot;P&quot;, &quot; &quot;, &quot;[&quot;, &quot; &quot;, &quot;]&quot;, &quot; &quot;, &quot; &quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;A&quot;, &quot; &quot;, &quot;S&quot;, &quot; &quot;, &quot;D&quot;, &quot; &quot;, &quot;F&quot;, &quot; &quot;, &quot;G&quot;, &quot; &quot;, &quot;H&quot;, &quot; &quot;, &quot;J&quot;, &quot; &quot;, &quot;K&quot;, &quot; &quot;, &quot;L&quot;, &quot; &quot;, &quot;;&quot;, &quot; &quot;, &quot;&#39;&quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;Z&quot;, &quot; &quot;, &quot;X&quot;, &quot; &quot;, &quot;C&quot;, &quot; &quot;, &quot;V&quot;, &quot; &quot;, &quot;B&quot;, &quot; &quot;, &quot;N&quot;, &quot; &quot;, &quot;M&quot;, &quot; &quot;, &quot;,&quot;, &quot; &quot;, &quot;.&quot;, &quot; &quot;, &quot;/&quot;]] numbers = [ [0, 1], # binary [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], # decimal [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;] # hexadecimal ] # pack into a list of matrices with titles matrices = [ [&quot;Keypad&quot;, keypad], [&quot;Keyboard&quot;, keyboard], [&quot;Number Systems&quot;, numbers] ] # loop 2D matrix with returning list in [key, value] arrangement for title, matrix in matrices: # unpack title and matrix as variables # formatted message with concatenation print(title, len(matrix), &quot;x&quot;, &quot;~&quot; + str(len(matrix[0]))) # use three different methods print_matrix1(matrix) print_matrix2(matrix) print_matrix3(matrix) # blank link in between print() # tester section if __name__ == &quot;__main__&quot;: test_matrices() . Keypad 4 x ~3 Classic nested loops using ij indexes 1 2 3 4 5 6 7 8 9 0 Enhanced nested for loops 1 2 3 4 5 6 7 8 9 0 For loop with shortcut (*) row expansion 1 2 3 4 5 6 7 8 9 0 Keyboard 4 x ~24 Classic nested loops using ij indexes ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Enhanced nested for loops ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / For loop with shortcut (*) row expansion ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Number Systems 3 x ~2 Classic nested loops using ij indexes 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F Enhanced nested for loops 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F For loop with shortcut (*) row expansion 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F . JavaScript 2D array . Example below populate a 2D array. Key concepts are ij loop and assignments. Observe the object that is created in console. Learn the basics of iteration through 2D array in JavaScript. . Candy challenge:Work of pairs. Create one of the Python examples (christmas tree, keyboard, ...). Use the element.append to output within the notebook. As you work on JavaScript make sure your development enviornment is setup like JavaScript programmer. | . %%js /* * Creator: Nighthawk Coding Society Construct a two-dimensional array in JS */ var arr2D = []; var rows = 3; var cols = 4; // Loop to initialize 2D array elements for (var i = 0; i &lt; rows; i++) { arr2D[i]=[]; for (var j = 0; j &lt; cols; j++) { arr2D[i][j] = &quot;r:&quot; + i + &quot;c:&quot; + j; } } console.log(arr2D); element.append(arr2D); . Monkey Jumpers Poem . Here are some of the key parts of these arrays . Build ASCII monkeys, 5 different monkeys using ASCII Art for the &quot;Monkey Jumpers&quot; countdown poem | ANSII Color codes are added to each Monkey | Candy Challenge:Print monkeys horizontally versus vertically. | . import time from IPython.display import clear_output def main(): monkeys = [ [&quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, &quot; _⏄_/ &quot;, &quot; --0-- &quot;, &quot; ⎛ ⎞ &quot;], [&quot; ʕ༼ ◕_◕ ༽ʔ &quot;, &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot;], [&quot; ʕ(▀ ⍡ ▀)ʔ&quot;, &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot;], [&quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot;], [&quot; (◕‿◕✿) &quot;, &quot; _⍾_/ &quot;, &quot; ==4== &quot;, &quot; _/ _ &quot;] ] for i in range(len(monkeys), -1, -1): clear_output(wait=True) print(&quot;Nursery Rhyme&quot;) print(str(i) + &quot; little monkeys jumping on the bed...&quot;) for row in range(i - 1, -1, -1): monkey_line = &quot;&quot; for col in range(len(monkeys[row])): monkey_line += monkeys[row][col] print(monkey_line) print(&quot; u001b[0m&quot;) time.sleep(5) clear_output(wait=True) print(&quot;No more monkeys jumping on the bed&quot;) print(&quot;-&quot;) print(&quot; THE END &quot;) if __name__ == &quot;__main__&quot;: main() . No more monkeys jumping on the bed - THE END . Animation, the Energetic versus Lazy Programmer methods . Animation is done like the old Disney films, lots of little images put togehter. In these examples we eliminate using a 2D array, but simulate int with a sequence of print statements. . This 1st sequence is a lot of lines of code. | The 2nd takes the lazy programmer method to do the same. | Candy challenge:Make you own ASCII art animation. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (long method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes Color34 = &quot; u001b[34m&quot; Color37 = &quot; u001b[37m&quot; # As you can see, its not very optimal def ship1(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship2(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship3(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship4(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship5(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship6(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship7(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship8(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship9(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship10(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship11(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship12(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship13(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship14(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship15(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship16(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship17(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship18(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship19(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship20(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) clear_output(wait=True) time.sleep(.1) ship1() time.sleep(.5) clear_output(wait=True) ship2() time.sleep(.5) clear_output(wait=True) ship3() time.sleep(.5) clear_output(wait=True) ship4() time.sleep(.5) clear_output(wait=True) ship5() time.sleep(.5) clear_output(wait=True) ship6() time.sleep(.5) clear_output(wait=True) ship7() time.sleep(.5) clear_output(wait=True) ship8() time.sleep(.5) clear_output(wait=True) ship9() time.sleep(.5) clear_output(wait=True) ship10() time.sleep(.5) clear_output(wait=True) ship11() time.sleep(.5) clear_output(wait=True) ship12() time.sleep(.5) clear_output(wait=True) ship13() time.sleep(.5) clear_output(wait=True) ship14() time.sleep(.5) clear_output(wait=True) ship15() time.sleep(.5) clear_output(wait=True) ship16() time.sleep(.5) clear_output(wait=True) ship17() time.sleep(.5) clear_output(wait=True) ship18() time.sleep(.5) clear_output(wait=True) ship19() time.sleep(.5) clear_output(wait=True) ship20() time.sleep(.5) . | |/ __ |__/ ____/ -- . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (programatic method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes OCEAN_COLOR = u&quot; u001B[34m u001B[2D&quot; SHIP_COLOR = u&quot; u001B[35m u001B[2D&quot; RESET_COLOR = u&quot; u001B[0m u001B[2D&quot; def ship_print(position): # print ship with colors and leading spaces according to position clear_output(wait=True) print(RESET_COLOR) sp = &quot; &quot; * position print(sp + &quot; ʕง ͠° ͟ل͜ ͡°)ʔ &quot;) print(sp + &quot; _⏄_/ &quot;) print(sp + &quot; --0-- &quot;) print(sp + &quot; ⎛ ⎞ &quot;) print(OCEAN_COLOR + &quot;--&quot;*32 + RESET_COLOR) def ship(): # ship function, loop/controller for animation speed and times # loop control variables start = 0 # start at zero distance = 60 # how many times to repeat step = 2 # count by 2 # loop purpose is to animate ship sailing for position in range(start, distance, step): ship_print(position) # call to function with parameter time.sleep(.1) ship() # activate/call ship function . ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ - .",
            "url": "https://qaisj1.github.io/quissite/1.d/2.b/3.b/c3.1/2023/05/16/DS-arrays_lab.html",
            "relUrl": "/1.d/2.b/3.b/c3.1/2023/05/16/DS-arrays_lab.html",
            "date": " • May 16, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "MCQ 2020 Again",
            "content": "Reflection | . I got a 59/67. I am pretty surprised that I got this score. Originally, I was very unconfident with many of the questions and I ended up doing poorly. This time however, I only got a few of them incorrect, meaning that my performance definitely increased. Here is a review of all the questions that I got incorrect and how I can avoid making them during the AP Test. . QUESTION 64 . The following procedure is intended to return the value of x times y, where x and y are integers. Multiplication is implemented using repeated additions. . The figure presents a block of code that consists of 7 lines. Throughout the block of code there are nested blocks of code. [Begin Block] Line 1: PROCEDURE Multiply [begin block] x, y [end block] [Begin Block] Line 2: [begin block] count ← 0 [end block] Line 3: [begin block] result ← 0 [end block] [Begin Block] Line 4: REPEAT UNTIL [begin block] count ≥ y [end block] [Begin Block] Line 5: [begin block] result ← result + x [end block] Line 6: [begin block] count ← count + 1 [end block] [End Block] [End Block] Line 7: [begin block] RETURN [begin block] result [end block] [end block] [End Block] [End Block] For which of the following procedure calls does the procedure NOT return the intended value? . Select two answers. . A The figure presents a line of code. The line of code contains a nested block of code. Line 1: [begin block] Multiply [begin block] 2, 5 [end block] [end block] . B The figure presents a line of code. The line of code contains a nested block of code. Line 1: [begin block] Multiply [begin block] 2, −5 [end block] [end block] . C The figure presents a line of code. The line of code contains a nested block of code. Line 1: [begin block] Multiply [begin block] −2, 5 [end block] [end block] . D The figure presents a line of code. The line of code contains a nested block of code. Line 1: [begin block] Multiply [begin block] −2, −5 [end block] [end block] . Answer B Correct. Since y is initially negative, the loop condition count ≥ y is initially true, so the body of the loop is never executed and 0 is returned. . QUESTION 62 . Assume that the Boolean variable x is assigned the value true and the Boolean variable y is assigned the value false. Which of the following will display the value true ? . Select two answers. . A The figure presents a block of code that consists of 2 lines. Throughout the code are nested blocks of code. [Begin block] Line 1: IF [begin block] x [end block] [Begin Block] Line 2: [begin block] DISPLAY [begin block] x OR y [end block] [End Block] [End Block] [End Block] . B The figure presents a block of code that consists of 2 lines. Throughout the code are nested blocks of code. [Begin block] Line 1: IF [begin block] x OR y [end block] [Begin Block] Line 2: [begin block] DISPLAY [begin block] x [end block] [End Block] [End Block] [End block] . C The figure presents a block of code that consists of 2 lines. Throughout the code are nested blocks of code. [Begin block] Line 1: IF [begin block] x OR y [end block] [Begin Block] Line 2: [begin block] DISPLAY [begin block] x AND y [end block] [End Block] [End Block] [End Block] . D The figure presents a block of code that consists of 2 lines. Throughout the code are nested blocks of code. [Begin block] Line 1: IF [begin block] x AND y [end block] [Begin Block] Line 2: [begin block] DISPLAY [begin block] x OR y [end block] [End Block] [End Block] [End block] . Answer A Correct. Since x is true, the body of the IF statement is executed. Since x OR y evaluates to true, true is displayed. . QUESTION 60 . Consider two lists of numbers called list1 and list2. A programmer wants to determine how many different values appear in both lists. For example, if list1 contains [10, 10, 20, 30, 40, 50, 60] and list2 contains [20, 20, 40, 60, 80], then there are three different values that appear in both lists (20, 40, and 60). . The programmer has the following procedures available. . Procedure Call Explanation Combine (myList1, myList2) This procedure creates a new list containing the elements from ﻿myList1 ​followed by the entries from myList2. The resulting list is returned. For example, if myList1 contains [2, 4, 6] and myList2 contains [1, 5], the procedure will return the list [2, 4, 6, 1, 5]. RemoveAllDups (myList) This procedure creates a new list containing the elements of myList with any duplicate values removed. The resulting list is returned. For example, if myList contains [3, 2, 4, 2, 2, 5, 6, 4], the procedure will return the list [3, 2, 4, 5, 6]. Which of the following can be used to assign the intended value to count ? . A bothList ← Combine (list1, list2) . uniqueList ← RemoveAllDups (bothList) . count ← LENGTH (bothList) - LENGTH (uniqueList) . B newList1 ← RemoveAllDups (list1) . newList2 ← RemoveAllDups (list2) . bothList ← Combine (newList1, newList2) . count ← LENGTH (list1) + LENGTH (list2) - LENGTH (bothList) . C newList1 ← RemoveAllDups (list1) . newList2 ← RemoveAllDups (list2) . bothList ← Combine (newList1, newList2) . count ← LENGTH (newList1) + LENGTH (newList2) - LENGTH (bothList) . D newList1 ← RemoveAllDups (list1) . newList2 ← RemoveAllDups (list2) . bothList ← Combine (newList1, newList2) . uniqueList ← RemoveAllDups (bothList) . count ← LENGTH (bothList) - LENGTH (uniqueList) . Answer C Incorrect. For example, assume that list1 contains [10, 10, 20, 30, 40, 50, 60] and list2 contains [20, 20, 40, 60, 80]. The first line of code creates newList1, which contains [10, 20, 30, 40, 50, 60]. The second line of code creates newList2, which contains [20, 40, 60, 80]. The third line of code creates bothList, which contains [10, 20, 30, 40, 50, 60, 20, 40, 60, 80]. The fourth line of code assigns to count the length of newList1 (6) plus the length of newList2 (4) minus the length of bothList (10), producing the incorrect result 0. . QUESTION 45 . Consider a game in which a player flips a fair coin three times. If all three coin flips have the same result (either all heads or all tails) the player wins. Otherwise, the player loses. . Which of the following code segments best simulates the behavior of the game? . A The figure presents two blocks of code that consist of 5 lines. Throughout the code are nested blocks of code. Line 1: [begin block] flip ← RANDOM [begin block] 0, 3 [end block] [end block] [Begin Block] Line 2: IF [begin block] flip = 3 [end block] [Begin Block] Line 3: [begin block] DISPLAY [begin block] “You lose.” [end block] [end block] [End Block] Line 4: ELSE [Begin Block] Line 5: [begin block] DISPLAY [begin block] “You win!” [end block] [end block] [End Block] [End Block] . B The figure presents two blocks of code that consist of 5 lines. Throughout the code are nested blocks of code. Line 1: [begin block] flip ← RANDOM [begin block] 0, 3 [end block] [end block] [Begin Block] Line 2: IF [Begin Block] [begin block] flip = 3 [end block] OR [begin block] flip = 0 [end block] [End Block] [Begin Block] Line 3: [begin block] DISPLAY [begin block] “You win!” [end block] [end block] [End Block] Line 3: ELSE [Begin Block] Line 4: [begin block] DISPLAY [begin block] “You lose.” [end block] [end block] [End Block] [End Block] . C The figure presents three blocks of code that consist of 7 lines. Throughout the second and third blocks of code are nested blocks of code. Line 1: [begin block] sum ← 0 [end block] [Begin Block] Line 2: REPEAT 3 TIMES [Begin Block] Line 3: [begin block] sum ← sum + RANDOM [begin block] 0, 1 [end block] [End Block] [End Block] [End block] [Begin Block] Line 4: IF [begin block] sum = 3 [end block] [Begin Block] Line 5: [begin block] DISPLAY [begin block] “You win!” [end block] [end block] [End Block] Line 6: ELSE [Begin Block] Line 7: [begin block] DISPLAY [begin block] “You lose.” [end block] [end block] [End Block] [End Block] . D The figure presents three blocks of code that consist of 7 lines. Throughout the second and third blocks of code are nested blocks of code. Line 1: [begin block] sum ← 0 [end block] [Begin Block] Line 2: REPEAT 3 TIMES [Begin Block] Line 3: [begin block] sum ← sum + RANDOM [begin block] 0, 1 [end block] [End Block] [End Block] [End block] [Begin Block] Line 4: IF [begin block] [begin block] sum = 3 [end block] OR [begin block] sum = 0 [end block] [End Block] [Begin Block] Line 5: [begin block] DISPLAY [begin block] “You win!” [end block] [end block] [End Block] Line 6: ELSE [Begin Block] Line 7: [begin block] DISPLAY [begin block] “You lose” [end block] [end block] [End Block] [End Block] . Answer C Incorrect. In this code segment, three coin flips are simulated, where one result is represented by 1 and the other result is represented by 0. The player only wins when the sum of these is 3. However, the player should also win when the sum is 0. . QUESTION 34 . The following question uses a robot in a grid of squares. The robot is represented by a triangle, which is initially facing toward the top of the grid. . The figure presents a robot in a grid of squares with 5 rows and 7 columns. The robot is represented by a triangle, which is initially in the bottom row of the grid in the third square from the left, facing upwards, and ends in the top row of the grid, fifth square from the left, facing upwards. The fifth square from the left in the top row of the grid is shaded gray. A path of arrows shows the robot’s movement from its initial location to the gray square. The robot moves 1 square up, turns rightward, moves 2 squares to the right, turns upwards, and moves 3 squares upwards where it ends. Consider the procedure below. . The figure presents a block of code that consists of 5 lines. Throughout the code there are nested blocks of code. [begin block] Line 1: PROCEDURE BotMover [begin block] x [end block] [Begin Block] Line 2: [begin block] MOVE_FORWARD [end block] Line 3: [begin block] REPEAT x Times [Begin Block] Line 4: [begin block] ROTATE_RIGHT [end block] [End Block] [end block] Line 5: [begin block] MOVE_FORWARD [end block] [End Block] [end block] Which of the following code segments will move the robot to the gray square along the path indicated by the arrows? . A The figure presents three blocks of code. Throughout the code there are nested blocks of code. Line 1: [begin block] BotMover [begin block] 1 [end block] [end block] Line 2: [begin block] BotMover [begin block] 1 [end block] [end block] Line 3: [begin block] BotMover [begin block] 0 [end block] [end block] . B The figure presents three blocks of code. Throughout the code there are nested blocks of code. Line 1: [begin block] BotMover [begin block] 1 [end block] [end block] Line 2: [begin block] BotMover [begin block] 2 [end block] [end block] Line 3: [begin block] BotMover [begin block] 3 [end block] [end block] . C The figure presents three blocks of code. Throughout the code there are nested blocks of code. Line 1: [begin block] BotMover [begin block] 1 [end block] [end block] Line 2: [begin block] BotMover [begin block] 3 [end block] [end block] Line 3: [begin block] BotMover [begin block] 0 [end block] [end block] . D The figure presents three blocks of code. Throughout the code there are nested blocks of code. Line 1: [begin block] BotMover [begin block] 3 [end block] [end block] Line 2: [begin block] BotMover [begin block] 1 [end block] [end block] Line 3: [begin block] BotMover [begin block] 0 [end block] [end block] . Answer D Incorrect. In this code segment, the first call to BotMover moves the robot forward one square, rotates it right three times so that it faces left, and moves it forward one square. The second call to BotMover moves the robot forward one square, rotates it right 1 times so that it faces toward the top of the grid, then moves it forward one square. The third call to BotMover moves the robot forward one square, does not rotate it, then moves it forward one square to the upper left corner of the grid. . QUESTION 20 . A file storage application allows users to save their files on cloud servers. A group of researchers gathered user data for the first eight years of the application’s existence. Some of the data are summarized in the following graphs. The line graph on the left shows the number of registered users each year. The line graph on the right shows the total amount of data stored by all users each year. The circle graph shows the distribution of file sizes currently stored by all users. . The figure presents two line graphs and a circle graph titled Registered Users By Year, Total Amount of Data Stored, and File Size Distribution, respectively. The graph titled Registered Users By Year contains 8 data points. The horizontal axis is labeled Year, and the numbers 0 through 8, in increments of 1, are indicated. The vertical axis is labeled Number of Registered Users, in millions, and the numbers 0 through 800, in increments of 100, are indicated. The line begins at the point Year 1 comma 26 million users and trends upwards and to the right, passing through the following data points. Year 2 comma 53 million users; Year 3 comma 105 million users; Year 4 comma 202 million users; Year 5 comma 403 million users; Year 6 comma 504 million users; Year 7 comma 601 million users; and Year 8 comma 701 million users. The graph titled Total Amount of Data Stored contains 8 data points. The horizontal axis is labeled Year, and the numbers 0 through 8, in increments of 1, are indicated. The vertical axis is labeled Total Amount of Data Stored, in millions of gigabytes, and the numbers 0 through 8,000, in increments of 1,000, are indicated. The line begins at the point Year 1 comma 262 million gigabytes and trends upwards and to the right, passing through the following data points. Year 2 comma 505 million gigabytes; Year 3 comma 1,014 million gigabytes; Year 4 comma 2,208 million gigabytes; Year 5 comma 3,885 million gigabytes; Year 6 comma 5,110 million gigabytes; Year 7 comma 5,890 million gigabytes; and Year 8 comma 6,986 million gigabytes. The circle graph contains 6 wedges of data, as follows. Less than 10 kilobytes, 17%; 10 kilobytes to 100 kilobytes, 24%; 100 kilobytes to 1 megabyte, 25%; 1 megabyte to 10 megabytes, 10%; 10 megabytes to 100 megabytes, 22%, more than 100 megabytes, 2%. (note: 1 MB = 1,000 KB) . Which of the following best describes the average amount of data stored per user for the first eight years of the application’s existence? . A Across all eight years, the average amount of data stored per user was about 10 GB. . B Across all eight years, the average amount of data stored per user was about 100 GB. . C The average amount of data stored per user appears to increase by about 10 GB each year. . D The average amount of data stored per user appears to increase by about 100 GB each year. . Answer C Incorrect. The two line graphs are roughly the same shape, indicating that the average amount of data stored per user remained about the same across all eight years. . QUESTION 12 . A color in a computing application is represented by an RGB triplet that describes the amount of red, green, and blue, respectively, used to create the desired color. A selection of colors and their corresponding RGB triplets are shown in the following table. Each value is represented in decimal (base 10). . Color Name RGB Triplet indigo (75, 0, 130) ivory (255, 255, 240) light pink (255, 182, 193)​ light yellow (255, 255, 224) magenta (255, 0, 255) neutral gray (127, 127, 112) pale yellow (255, 255, 160) vivid yellow (255, 255, 14) What is the binary RGB triplet for the color indigo? . A (00100101, 00000000, 10000010) . B (00100101, 00000000, 01000001) . C (01001011, 00000000, 10000010) . D (01001011, 00000000, 01000001) . Answer B Incorrect. The decimal equivalent of this triplet is (37, 0, 65). . In a certain computer program, two positive integers are added together, resulting in an overflow error. Which of the following best explains why the error occurs? . A The program attempted to perform an operation that is considered an undecidable problem. . B The precision of the result is limited due to the constraints of using a floating-point representation. . C The program can only use a fixed number of bits to represent integers; the computed sum is greater than the maximum representable value. . D The program cannot represent integers; the integers are converted into decimal approximations, leading to rounding errors. . Answer D Incorrect. While fractions are sometimes represented by decimal approximations that are subject to rounding errors, integers are not. .",
            "url": "https://qaisj1.github.io/quissite/2023/05/02/MCQ2020again.html",
            "relUrl": "/2023/05/02/MCQ2020again.html",
            "date": " • May 2, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Basic JavaScript Knowledge",
            "content": "Variables . - declare JavaScript variables with var, let or const. - If the value of the variable can change, like a total, use let. If the value is set, like prices, use const. Variables can hold any data type. . var x = 5; var y = 6; var z = x + y; z . 11 . Data types- there are 8 JS data types. . List a few data types that you already knowStrings Integers Floats . | . 1. String: a series of characters, written with single or double quotes . let text = &quot;Mort&quot;; text . &#39;Mort&#39; . let text2 = &#39;Yeung&#39;; text2 . &#39;Yeung&#39; . 2. Number: can be integers or decimals. . - You can also have exponential notation for large/small numbers . 3. Bigint: used to store integer values that are too big to be represented by a normal JS number . - JavaScript integers are only accurate up to 15 digits . var number = 1234567890123456789012345; var LargeNum = (1234567890123456789012345); var typeLargeNum = typeof LargeNum; //typeLargeNum . 4. Boolean: true or false, used in conditional testing . Boolean(10 &gt; 9) . true . Write a boolean statement that outputs true . 5. Undefined: a variable without a value, has the value undefined/empty values . let name; name . grade = undefined; . 6. Null: represents the intentional absence of any object value . - variable is empty at the moment and may have a value later . let result; result = Boolean(undefined); console.log(result); // false result = Boolean(null); console.log(result); // false . false false . 7. Symbol: used to represent unique values that can be used as identifiers/keys in objects. . - They are also used to create private properties and methods in classes. - unique and immutable, so they can be used as unique identifiers in objects and classes. - useful for creating constants that can be shared across different parts of your code. . // Create a Symbol const mySymbol = Symbol(); console.log(mySymbol); // expected output: Symbol() . Symbol() . const myObject3 = { [mySymbol]: &#39;Hello World&#39; }; console.log(myObject3[mySymbol]); . Hello World . Edit/add to the code above so that it outputs &quot;Hello World&quot; . 8. Object: an unordered collection of key-value pairs. Each key-value pair is called a property. . - object: written with curly braces {}, name:value pairs - array: written with square brackets, separated by commas . Object . Identify the name/keys in the object below: name, breed, age, color | Identify the values in the object below: Elly, Rottweiler, 4, Black | . const dogs = {name: &quot;Elly&quot;, breed:&quot;Rottweiler&quot;, age:4, color:&quot;black&quot;} dogs . { name: &#39;Elly&#39;, breed: &#39;Rottweiler&#39;, age: 4, color: &#39;black&#39; } . Array . const songs = [&quot;Love Story&quot;, &quot;Blank Space&quot;, &quot;I Knew You Were Trouble&quot;]; songs . [ &#39;Love Story&#39;, &#39;Blank Space&#39;, &#39;I Knew You Were Trouble&#39; ] . Const . - We use const to declare variables whose value can be initialized only at the time of declaration. - Const means that the identifier cannot be reassigned. . const cost1 = 2; const cost2 = 11; let totalCost = cost1 + cost2; totalCost . 13 . Conditionals: control behavior, decides whether or not pieces of code can run. . - If: if a condition is true it is used to specify execution for a block of code. - Else: if the same condition is false it specifies the execution for a block of code. - Else If: new test if the first condition is false. . if (10 &gt; 5) { var outcome = &quot;True&quot;; } outcome; . &#39;True&#39; . if (&quot;red&quot; === &quot;blue&quot;) { var outcome = &quot;if block&quot;; } else { var outcome = &quot;else block&quot;; } outcome; . &#39;else block&#39; . let temperature = 54 if (temperature &lt; 70) { cast = &quot;Chilly&quot;; } else if (temperature &lt; 60) { cast = &quot;Cold&quot;; } else { cast = &quot;Warm&quot;; } cast . &#39;Chilly&#39; . Create a conditional statement about how you would greet someone based on the time of day. . let currentTime = new Date(); let currentHour = currentTime.getHours(); if (currentHour &lt; 12) { console.log(&quot;Good morning!&quot;); } else if (currentHour &lt; 18) { console.log(&quot;Good afternoon!&quot;); } else { console.log(&quot;Good evening!&quot;); } . Good afternoon! . Functions: . - defining: define with function + functionName(parameter) { function code }. It can be unnamed/anonymous can be defined based on a condition. - calling: simply put the function name with a parameter and semicolon, or a function can call itself (recursive) . Iteration: . - for loop: repeats until a specified condition evaluates to false - do...while: repeats until a specified condition evaluates to false - while statement: executes its statements as long as a specified condition evaluates to true - label: provides a statement with an identifier that lets you refer to it later in the code. ex. you can use a label to identify a loop, and then use the break or continue statements to indicate whether a program should interrupt the loop or continue its execution - break: used to terminate a loop, switch, or in conjunction with a labeled statement - continue: can be used to restart a while, do-while, for, or label statement - for...in: iterates a specified variable over all the enumerable properties of an object - for...of statement creates a loop Iterating over iterable objects, invoking a custom iteration hook with statements to be executed for the value of each distinct property . JavaScript in HTML- Questions . Where do you store the JavaScript Code? In the memory of the browser proccess. | How do you import a JS file into HTML? Use the &lt; script &gt; tag and include the src attribute with the path to your JS file. | What is onClick? onClick is an event handler attribute used in HTML to execute JavaScript code when an element is clicked | What tag do you use to write JavaScript code? To write JavaScript code in HTML, you can use the &lt; script &gt; tag. You can include the code directly inside the &lt; script &gt; tag or reference an external file using the src attribute | Hacks . Add notes in this notebook | Complete the code portions, questions, and prompts throughout the notebook | Extra Credit: code a small JavaScript game |",
            "url": "https://qaisj1.github.io/quissite/2023/05/01/JSlesson.html",
            "relUrl": "/2023/05/01/JSlesson.html",
            "date": " • May 1, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "SASS",
            "content": "Why SASS? . SASS is an improvement on CSS in that there are methods of abstraction. It is a stylesheet language that is compiled into CSS, which means that Sass will translate the Sass code you wrote into CSS, which is what your web browser can read. . SASS vs SCSS . As you learn about Sass, you might notice something called Scss. They are basically the same thing except that Scss uses curly braces and semicolons to distinguish between lines. Sass uses indentation and newlines instead. We will be teaching the Scss syntax because it is more commonly used. . Getting started . A easy way to write SASS and have it preprocessed into CSS is by using a Jekyll powered website, such as GitHub pages or Fastpages. . The first step is to clone a GitHub pages repo, such as this one. . Within the repository, head over to assets/css/, and open style.scss. . This is where you can create your SASS code. . To see your CSS-translated SASS code, head over to _site/assets/css/style.css . Note: You will need to run bundle exec jekyll serve before the _site directory appears. . The first few hundred lines are used to style Github&#39;s theme. Make sure to scroll to the very bottom to see the SASS code that you wrote, which is in the form of CSS. . Nesting . While writing CSS, you may notice that many selectors share the same element. . For example, let&#39;s say you have a div element that controls the font. Inside the div element, you have two other divs that control the font size. . SASS provides a feature called nesting in which you can write styling code in a way that looks like an HTML hierarchy. . Mini-hack . Write out the SASS equivalent for the following CSS code: . .a .b { color: green; } .a .c { color: blue; } . .a { . .b { . color: green; . } . .c { . color: blue; . } . } . Extend/Inheritance . What are some similarities that the buttons share? What are the differences? . The buttons have the same width and height, font color, and spacing between each button. They have a different background color. If we were to write it out in CSS, we would need to specify these properties for each button selector. . With SASS, we can create a placeholder class that stores the code we want to reuse. A placeholder class looks like this: . Mixin . To give the buttons a background, we used background: radial-gradient(); . Another way to code for the background is through the use of a mixin. . A mixin is similar to extend in that it creates a code template that can be reused. It can also take in parameters so that you can create dynamic styling. . In the example of the buttons, all three buttons have a gradient background. However, the background colors are different. . With SASS, we can create a @mixin at rule that takes in two colors as the parameter: . In addition, you can also place styling rules that do not take in variables within mixin. . The code below shows how to style the rest of the button within a mixin: . Mini-hack . Write out a mixin in SASS that takes in a color and a font size as the parameter. Within the mixin, set the background color and font color to the color parameter, and set the font size to the font size parameter. Then create a selector that calls the mixin, and pass in a color and font size of your choice as the arguments. . @mixin style($color, $font-size) { . background-color: $color; . color: $color; . font-size: $font-size; . } . / Call the mixin and pass in specific color and font size values / . .my-selector { . @include style(#ff0000, 16px); . } . Function . To change between light and dark mode, we can create an invert function in SASS. . Functions in SASS look like this: . @function name(parameters) { . //code @return value; . } . A function can be created that takes in an rgb value and returns the inverted rgb color. . To invert colors, subtract each rgb value from 255. . The function looks something like this: . @function sassInvert($r, $g, $b) { . $newColor: rgb(255 - $r, 255 - $g, 255 - $b); @return $newColor; . } . Functions are called by specifying the function name with parenthesis. Inside the parenthesis, you can specify the arguments. . For instance, the invert selector looks like this: . .invert { . background-color: sassInvert(0, 0, 0); color: sassInvert(211,202,202); . } . Import . There is a way to split your code into multiple files and import them into one file. . For instance, to put the styling for function.html in another SASS file, first create a directory called _sass. . Within the directory, create another SASS file. In this case, the file is called functionStyle.scss . Write your SASS code in that file. Once you are finished, switch back to style.scss and import the file with @import &quot;file-name&quot; . For instance, to import the functionStyle.scss file into style.scss , the import statement would be @import &quot;functionStyle&quot;. . SASS Hacks . Take notes and complete the mini-hacks. (0.9) . | Complete the quiz questions and provide your answers in this notebook. (0.9) . | Use SASS to create something that uses either extend or mixin. (0.9) . | Extra credit: Research other SASS features and blog about what you learned or add to your SASS project with any extra features not covered in this lesson. More points will be given if both are done. . | b. A scripting language that has many styling operations | a. They are very similar in their function, but their syntax is slightly different | a. SASS has more functions than CSS | b. Syntactically Awesome Style Sheets | d. Compute | b. Extend | I&#39;m not sure because the question doesn&#39;t make much sense. I&#39;m guessing d. Token | // Define a mixin to create a gradient background . @mixin gradient-background($start-color, $end-color) { . background: $start-color; . background: linear-gradient(to bottom, $start-color 0%, $end-color 100%); . } . // Use the mixin to create a class with a blue-to-purple gradient background . .gradient-box { . @include gradient-background(#4a89dc, #8e44ad); . padding: 20px; . border-radius: 5px; . color: #fff; . } .",
            "url": "https://qaisj1.github.io/quissite/2023/04/28/sass-lesson.html",
            "relUrl": "/2023/04/28/sass-lesson.html",
            "date": " • Apr 28, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Notebook - Data Related to User Guide",
            "content": "NOTE . As you follow along, make sure to fill in the blanks and complete the coding exercises! . Introduction . When building an application that requires users to create accounts or sign in, handling data related to users is crucial. This data can include things like user profiles, preferences, and activity logs, which can be used to personalize the user experience and improve the application&#39;s performance. . For example, by storing a user&#39;s name and profile picture, the application can address the user by name and display their picture, creating a more personal experience. Activity logs can also be used to track user behavior and help the application recommend new features or improvements. . By learning how to handle data related to users effectively and responsibly, you&#39;ll be equipped with the skills and knowledge needed to build robust and user-friendly applications that meet the needs of your users. . For simplicity purposes, we will be lecturing on how one can store and manipulate user data for future utilization. . Here we go! . Establishing Class/User Data and making a new user . In Python, classes are templates used to create objects, which are instances of those classes. Classes define the data elements (attributes) and methods that describe the behavior of the objects. Let&#39;s explore how to define a class and create objects in Python. . Example: Defining a User class . class User: def __init__(self, username, email): self.username = username self.email = email def display_info(self): print(f&quot;Username: {self.username}, Email: {self.email}&quot;) . In this example, we define a User class with a constructor method init that takes username and email as arguments. The display_info method is used to print the user information. . In the context of backend functionality, this class can be used to create, manipulate, and manage user data. For example, when a new user signs up for an account, you could create a new User object with their username and email. This object can then be used to perform various operations, such as validating the user&#39;s input, storing the user&#39;s data in a database, or processing user-related requests. . Creating a new user: . new_user = User(&quot;john_doe&quot;, &quot;john@example.com&quot;) new_user.display_info() . Username: john_doe, Email: john@example.com . Lecture Topics: . Establishing Class/User Data and making a new user . In Python, classes are templates used to create objects, which are instances of those classes. Classes define the data elements (attributes) and methods that describe the behavior of the objects. Let&#39;s explore how to define a class and create objects in Python. . Example: Defining a User class . class User: def init(self, username, email): self.username = username self.email = email . def display_info(self): print(f&quot;Username: {self.username}, Email: {self.email}&quot;) . In this example, we define a User class with a constructor method init that takes username and email as arguments. The display_info method is used to print the user information. . Creating a new user: . python . new_user = User(&quot;john_doe&quot;, &quot;john@example.com&quot;) new_user.display_info() . Here, we create a new User object, new_user, with a specified username and email. We then call the display_info method to display the user&#39;s information. . Using property decorators (getter and setter) . Property decorators allow developers to access and modify instance data more concisely. The @property decorator creates a getter method, while the @attribute.setter decorator creates a setter method. . Example: . class Employee: def __init__(self, employee_id, name): self._employee_id = employee_id self._name = name @property def name(self): return self._name @name.setter def name(self, new_name): self._name = new_name . In this example, the Employee class has a name attribute, which is accessed and modified through the name property getter and setter methods. The _name attribute uses an underscore prefix, which is a convention to indicate it should not be accessed directly. . In the context of backend functionality, this Employee class can be used to model employees within an application. You can create instances of this class to store and manage employee data, and the getter and setter methods can be used to access and modify employee information in a controlled way. . Usage: . employee = Employee(1001, &quot;John Doe&quot;) print(employee.name) # Get the name using the getter method employee.name = &quot;Jane Doe&quot; # Set the name using the setter method print(employee.name) . John Doe Jane Doe . employee = Employee(1001, &quot;John Doe&quot;) print(employee.name) # Get the name using the getter method . employee.name = &quot;Jane Doe&quot; # Set the name using the setter method print(employee.name) . In the context of backend functionality, the getter and setter methods provide a clean and controlled way to access and modify the attributes of an object. This can be particularly useful when interacting with databases, APIs, or other parts of a web application that require the management and manipulation of object attributes. . CHECK: Explain the function of getters and setters in your own words. . Attributes are accessible with getters, we can modify the attributes with setters. . class Car: def __init__(self, make, model, year): self._make = make self._model = model self._year = year @property def make(self): return self._make @make.setter def make(self, new_make): self._make = new_make @property def model(self): return self._model @model.setter def model(self, new_model): self._model = new_model @property def year(self): return self._year @year.setter def year(self, new_year): self._year = new_year . Take notes here on property decorators and the purpose they serve: Thanks to property decorators, coders can define properties easily and quickly. By using the @property decorator, a method can be defined as a getter, while the @name.setter method can include a setter. Property decorators generally simplify the syntax for accessing and modifying object properties, resulting in shorter and more readable code. . Students can then practice creating instances of their Car class and using the getter and setter methods to access and modify the car attributes. . In the context of backend functionality, this Car class can be used to model cars within an application. You can create instances of this class to store and manage car data, and the getter and setter methods can be used to access and modify car information in a controlled way. . Overview . WE COVERED: In conclusion, we have covered essential concepts in object-oriented programming using Python, including: . Defining classes and creating objects Property decorators (getter and setter) Class methods and static methods Inheritance and method overriding Working with multiple objects and class attributes . These concepts provide a solid foundation for understanding how to model real-world entities using classes and objects in Python. By learning to work with classes, objects, and their methods, students can develop more efficient and modular code. . As students become more comfortable with these concepts, they can explore more advanced topics, such as multiple inheritance, abstract classes, encapsulation, and polymorphism. Additionally, they can apply these principles to practical projects like web development with Flask and SQLite, as discussed earlier. . Overall, mastering object-oriented programming will greatly enhance students&#39; ability to develop complex and maintainable software systems. . Databases and SQlite . SQLite is a software library that provides a relational database management system. Unlike other databases, such as MySQL or PostgreSQL, SQLite is embedded within an application, which means it does not require a separate server process to operate. This makes SQLite a great choice for small-scale applications or for use in situations where you don&#39;t want to set up a full database server. . In this lesson, we will be demonstrating how to set up a SQLite database in Flask, which provides an easy-to-use interface for interacting with SQLite databases, and we&#39;ll walk through the process of setting up a new database, creating tables, and adding data. We&#39;ll also cover some basic SQL commands that you can use to interact with your database, including CREATE TABLE, INSERT, SELECT, UPDATE, and DELETE. By the end of this lesson, you&#39;ll have a good understanding of how to work with SQLite databases in Flask and be ready to start building your own applications. . Setting up a SQLite database in Flask . One of the key features of a programming language or framework (the specific one is not mentioned in the statement) is its ability to work seamlessly with databases, including SQLite. A database is an organized collection of data that can be easily accessed, managed, and updated. . SQlite databse in Flask . from flask import Flask import sqlite3 # Create a Flask application app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;example.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database using SQL commands cursor.execute(&#39;&#39;&#39;CREATE TABLE example_table (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)&#39;&#39;&#39;) # Commit the changes to the database conn.commit() # Close the connection conn.close() . OperationalError Traceback (most recent call last) /home/qaisjamili/vscode/quissite/_notebooks/2023-04-27-P5Y-Team-SAME-Now.ipynb Cell 18 in &lt;cell line: 14&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-27-P5Y-Team-SAME-Now.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; cursor = conn.cursor() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-27-P5Y-Team-SAME-Now.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; # Create a table in the database using SQL commands &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-27-P5Y-Team-SAME-Now.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; cursor.execute(&#39;&#39;&#39;CREATE TABLE example_table &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-27-P5Y-Team-SAME-Now.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)&#39;&#39;&#39;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-27-P5Y-Team-SAME-Now.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; # Commit the changes to the database &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-27-P5Y-Team-SAME-Now.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; conn.commit() OperationalError: table example_table already exists . Basic SQL commands (create, read, update, delete) . SQL is really useful because it helps people do a bunch of things with the data stored in databases. For example, they can use it to create new tables to organize data, add new data to a table, update data that&#39;s already there, or delete data that&#39;s no longer needed. . CRUD is an acronym that stands for the fundamental operations that can be performed on a database, which are Create, Read, Update, and Delete. A widely-used lightweight database management system is SQLite, which can be easily integrated with different programming languages. . C: To create a new record in a database, you must first define the table structure that will store the data. This can be accomplished using SQL commands such as CREATE. Once the table is created, data can be added to it using the INSERT INTO command. . | R: To retrieve data from the database, you can use the READ command. You can specify which fields you want to retrieve and the conditions you want to apply using the WHERE clause. There are also several functions available to aggregate and manipulate data. . | U: To modify existing data in the database, you can use the UPDATE command. You will need to specify which table and fields you want to update, and the conditions you want to apply using the WHERE clause. . | D: To remove data from the database, you can use the DELETE command . | . Take notes here on the basic components of SQL: . Commands: SQL has various commands used to manipulate data, such as SELECT, INSERT, UPDATE, and DELETE. . Tables: SQL works with tables, which are like spreadsheets that contain data organized in rows and columns. Tables are created using the CREATE TABLE command. . Fields/Columns: Fields or columns are individual pieces of information within a table, such as a person&#39;s name, age, or address. . Records/Rows: Records or rows are collections of related fields or columns, representing a single instance of information within a table. . Relationships: SQL allows for the creation of relationships between tables, which can be used to join data from multiple tables. . Conditions: Conditions are used to specify the criteria for retrieving or modifying data using commands like SELECT and UPDATE. Examples of conditions include WHERE clauses and comparison operators like &quot;=&quot; and &quot;&lt;&gt;&quot;. . import sqlite3 def menu(): operation = input(&quot;Enter A Greeting&quot;) if operation.lower() == &#39;hi&#39;: create() elif operation.lower() == &#39;Hi&#39;: read() elif operation.lower() == &#39;hello&#39;: update() elif operation.lower() == &#39;Hello&#39;: delete() elif len(operation)==0: # Escape Key return else: print(&quot;Hi&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;How are you&quot;) . How are you . This block of code is a menu function that helps with Create, Read, Update, and Delete (CRUD) tasks and displays the schema. The menu function acts as a control point that directs the program to call different functions based on what the user wants to do. When users enter their preferred action, the input is checked to see which function to use. The menu function is created with no arguments and is called repeatedly, displaying the menu options until the user decides to leave. . Creating a Database . import sqlite3 def create_database(): # Connect to the database (will create it if it doesn&#39;t exist) connection = sqlite3.connect(&#39;instance/professors.db&#39;) cursor = connection.cursor() # Create the professors table if it doesn&#39;t already exist cursor.execute(&#39;&#39;&#39;CREATE TABLE IF NOT EXISTS professors ( name TEXT, field TEXT, rating REAL, reviews TEXT )&#39;&#39;&#39;) # Commit changes and close the connection connection.commit() connection.close() # Call the function to create the database create_database() . Create Function: . import sqlite3 def create(): database = &#39;instance/professors.db&#39; name = input(&quot;Enter the professor&#39;s name: &quot;) field = input(&quot;Enter the professor&#39;s field of expertise: &quot;) rating = input(&quot;Enter the professor&#39;s rating (out of 10): &quot;) reviews = input(&quot;Enter any reviews or comments about the professor: &quot;) # Connect to the database and create a cursor to execute SQL commands connection = sqlite3.connect(database) cursor = connection.cursor() try: # Execute SQL to insert record into db cursor.execute(&quot;INSERT INTO professors (name, field, rating, reviews) VALUES (?, ?, ?, ?)&quot;, (name, field, rating, reviews)) # Commit the changes connection.commit() print(f&quot;{name} has been added to the list of coding professors.&quot;) except sqlite3.Error as error: print(&quot;Error while inserting record&quot;, error) # Close cursor and connection cursor.close() connection.close() create() . Doctor Jamili has been added to the list of coding professors. . The create() function allows users to input information about a coding professor and store it in a SQLite database named &#39;professors.db&#39;. This script prompts the user for the professor&#39;s name, field of expertise, rating out of 10, and any reviews or comments about the professor. It then establishes a connection to the SQLite database and creates a cursor object for executing SQL commands. . Read Function . import sqlite3 def read(): try: # Open a connection to the database and create a cursor connection = sqlite3.connect(&#39;instance/professors.db&#39;) cursor = connection.cursor() # Fetch all records from the professors table cursor.execute(&quot;SELECT * FROM professors&quot;) rows = cursor.fetchall() # If there are any records, print them if len(rows) &gt; 0: print(&quot;List of coding professors:&quot;) for row in rows: print(f&quot;Name: {row[0]} nField of expertise: {row[1]} nRating: {row[2]} nReviews: {row[3]} n&quot;) else: print(&quot;There are no coding professors in the list.&quot;) except sqlite3.Error as error: print(&quot;Error while connecting to the database:&quot;, error) finally: # Close the cursor and the connection to the database cursor.close() connection.close() read() . List of coding professors: Name: Doctor Jamili Field of expertise: Rating: 1.0 Reviews: Weird man Name: Doctor Jamili Field of expertise: Urology Rating: Great Ball Handling Reviews: Awesome 10/10 . This code demonstrates how to read data from a SQLite database using Python and the sqlite3 library. The first step is to establish a connection to the database and create a cursor object to execute SQL commands. Then, a SELECT query is executed to fetch all records from the &quot;professors&quot; table. If there are any records, the code iterates through each record and prints out the name, field of expertise, rating, and reviews for each coding professor. If there are no records in the table, a message indicating so is printed. . Update Function . import sqlite3 def update(): database = &#39;instance/professors.db&#39; connection = sqlite3.connect(database) cursor = connection.cursor() try: # Get the professor&#39;s name to update name = input(&quot;Enter the name of the professor to update: &quot;) # Retrieve the current record from the database cursor.execute(&quot;SELECT * FROM professors WHERE name=?&quot;, (name,)) record = cursor.fetchone() # If the professor is found, update the record if record: print(&quot;Enter the new information for the professor:&quot;) field = input(f&quot;Current field: {record[1]} nNew field: &quot;) rating = input(f&quot;Current rating: {record[2]} nNew rating: &quot;) reviews = input(f&quot;Current reviews: {record[3]} nNew reviews: &quot;) # Execute SQL to update the record cursor.execute(&quot;UPDATE professors SET field=?, rating=?, reviews=? WHERE name=?&quot;, (field, rating, reviews, name)) connection.commit() print(f&quot;{name}&#39;s record has been updated.&quot;) # If the professor is not found, notify the user else: print(f&quot;No record found for {name}.&quot;) except sqlite3.Error as error: print(&quot;Error while updating record&quot;, error) # Close cursor and connection cursor.close() connection.close() update () . Enter the new information for the professor: Doctor Jamili&#39;s record has been updated. . This is an implementation of an update function for the professors database using the sqlite3 module in Python. The function first establishes a connection to the database file &#39;instance/professors.db&#39; and creates a cursor object to execute SQL commands. It prompts the user to enter the name of the professor to update and retrieves the corresponding record from the database using a SELECT statement with a WHERE clause to match the professor&#39;s name. If the professor is found in the database, the user is prompted to enter new information for the professor&#39;s field of expertise, rating, and reviews. The function then executes an update statement with the new information to update the record in the database. . Delete Function . import sqlite3 def delete(): # Connect to the database and create a cursor connection = sqlite3.connect(&#39;instance/professors.db&#39;) cursor = connection.cursor() # Prompt the user for the name of the professor to delete name = input(&quot;Enter the name of the professor you want to delete: &quot;) # Use a SQL query to find the professor with the given name cursor.execute(&quot;SELECT * FROM professors WHERE name=?&quot;, (name,)) row = cursor.fetchone() # If the professor exists, confirm deletion and delete the record if row: confirm = input(f&quot;Are you sure you want to delete {name}? (y/n): &quot;) if confirm.lower() == &#39;y&#39;: cursor.execute(&quot;DELETE FROM professors WHERE name=?&quot;, (name,)) connection.commit() print(f&quot;{name} has been deleted from the list of coding professors.&quot;) else: print(f&quot;{name} not found in the list of coding professors.&quot;) # Close the cursor and the connection to the database cursor.close() connection.close() delete() . This code is a Python function for deleting a record from a SQLite database. The function prompts the user to input the name of the professor they want to delete. It then uses a SQL query to search for the professor in the database. If the professor is found, the user is prompted to confirm the deletion. If the user confirms, the function executes a SQL command to delete the record from the database. The function also prints a message confirming that the professor has been deleted from the list of coding professors. If the professor is not found in the database, the function prints a message indicating that the professor is not in the list. . Our Project ... in the works . SAM Messaging System . Get started with your own! . import sqlite3 # specify the name of the database file db_file = &quot;&lt;fill in the name of the database file here&gt;.db&quot; # create a connection to the database conn = sqlite3.connect(db_file) # create a cursor object cursor = conn.cursor() # add code here to create tables and insert data into the database # commit the changes and close the connection conn.commit() conn.close() . HACKS . Make sure to fill in all blanks, take notes when prompted, and at least attempt each of the interactive coding exercises. (0.45) . | Create your own database and create an algorithm that can insert, update, and delete data ralted to user. Points will be awarded based on effort and success. (0.45) . Extra Credit: Connect your backend to a visible frontend! | . | . import sqlite3 class CarDatabase: def __init__(self, db_name): self.conn = sqlite3.connect(db_name) self.c = self.conn.cursor() self.c.execute(&#39;&#39;&#39;CREATE TABLE IF NOT EXISTS cars (brand TEXT, quantity INTEGER)&#39;&#39;&#39;) self.conn.commit() def add_car(self, brand, quantity): with self.conn: self.c.execute(&quot;INSERT INTO cars VALUES (?, ?)&quot;, (brand, quantity)) def get_quantity(self, brand): self.c.execute(&quot;SELECT quantity FROM cars WHERE brand=?&quot;, (brand,)) result = self.c.fetchone() if result: return result[0] else: return None def update_quantity(self, brand, new_quantity): with self.conn: self.c.execute(&quot;UPDATE cars SET quantity = ? WHERE brand = ?&quot;, (new_quantity, brand)) def delete_car(self, brand): with self.conn: self.c.execute(&quot;DELETE from cars WHERE brand = ?&quot;, (brand,)) def print_database(self): self.c.execute(&quot;SELECT * FROM cars&quot;) rows = self.c.fetchall() for row in rows: print(row[0] + &quot;: &quot; + str(row[1])) db = CarDatabase(&quot;car_inventory.db&quot;) db.add_car(&quot;Mercedes&quot;, 1000000) db.add_car(&quot;BMW&quot;, 900000) db.add_car(&quot;Mercedes&quot;, 500000) db.update_quantity(&quot;BMW&quot;, 1000000) db.print_database() . Mercedes: 1000000 BMW: 1000000 Mercedes: 500000 .",
            "url": "https://qaisj1.github.io/quissite/2023/04/27/P5Y-Team-SAME-Now.html",
            "relUrl": "/2023/04/27/P5Y-Team-SAME-Now.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Big Idea 3, Simulations and SQLite Lesson Notes",
            "content": "Review Topics . All of the topics below are things that have been heavily covered and used throughout the class. We will mostly be focusing on more complicated uses and mechanics of these topics. . Lists . What are Lists? Lists are an ordered sequence of elements, where each element is a variable | Unlike dictionaries, lists&#39; keys are all integers that describe the order of the list | . | . Some examples of lists: . Playlist of songs | names of students in a class | contacts on your phone . | Each element of a string is referenced by an index (which is a number) and they generally start 0 but for the AP Exam it starts at 1. . AP Exam: 1,2,3,4 etc. | Python: 0,1,2,3 etc. | . | . How do lists Manage Complexity of a program? . We may not need as many variables. For example: One Variable that holds all students would be better than having a variable for EACH student | There can also be a list of test scores so if they need to be curved then the same calculation can be applied to the list (that has all the students) instead of doing the calculations one at a time | . | . Answer the following questions about the code block below: . Why do you think lists are helpful? What word does College Board like to use to describe the function of lists? | . When you have a list instead of multiple variables, you can just have a list which within has variables. . # variable of type string name = &quot;Sri Kotturi&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 16 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;, &quot;html&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[2]&quot;, langs[2], type(langs[2])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Sri Kotturi &lt;class &#39;str&#39;&gt; age 16 &lt;class &#39;int&#39;&gt; score 90.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;html&#39;] &lt;class &#39;list&#39;&gt; - langs[2] Java &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Sri Kotturi&#39;, &#39;age&#39;: 16, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;, &#39;html&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Sri Kotturi &lt;class &#39;str&#39;&gt; . Mathematical Expressions . What is the output of the cell below? What Mathematical Expressions do you see being used? (List them below.) . 10 | Adding and dividing to find the average | . grade1 = 10 grade2 = grade1 average_grade = (grade1 + grade2) // 2 #what are these two slashes? print(average_grade) . 10 . What is the value of num1, num2, and num3? Explain how each number ended up what it was. . 4096 | 455 | 1 | . num1 = 2 num2 = 4 num3 = 6 num1 = num2 ** num3 num3 = num1 % 5 num2 = (num1 + num3) // 9 print(num1) print(num2) print(num3) . 4096 455 1 . Selection . Selection refers to the process of making decisions in a program based on certain conditions. It is normally done with conditional statements. . Conditionals . What is a conditional?: . Statement that allows code to execute different instructions if a certain condition is true or false | Allows program to make decisions based on data and input | . What are the main types of conditional statements?: . if | elif | else | . If statements . The if statement is used to check if a certain condition is true. The condition can be any expression that evaulates to a boolean value, True or False. If the condition is True, then it executes a code block. | If (condition) then (consequence) | Example: | . x = int(input(&quot;Enter a number&quot;)) if x &gt; 0: # if condition, check if this is true of false print(&quot;x is positive&quot;) # code that will execute if condition is met . x is positive . Else . The else statemnt executes a code block when the if condition is False. | If (condition) then (consequence A), else (consequence B) | . Elif . The elif statement can check multiple conditions in a sequence, and execute a certain block of code if any of the conditions are true. | If (condition) then (consequence A), elif (condition) then (consequence B), else (consequence C) . | Example adding onto the code from before to take negative numbers and 0 into account . | . x = int(input(&quot;Enter a number, x:&quot;)) if x &gt; 0: # if condition, check if this is true of false print(&quot;x is positive&quot;) # code that will execute if condition is met elif x &lt; 0: # if previous condition not true... elif condition, check if this is true of false print(&quot;x is negative&quot;)# code that will execute if condition is met else: # everything else, in this case it is if x == 0 print(&quot;x is zero&quot;) # only executes if all previous conditions are not met . x is positive . Nested Conditionals . What is a nested conditional?: . Conditional statement inside another conditional statement | Allows to check for more complex condition where one condition depends on another | . Nested Conditional Statements . Example | . x = int(input(&quot;Enter a number, x:&quot;)) if x % 2 == 0: print(&quot;x is even divisible by 2&quot;) # only ever checks is x is divisble by 3 if x is even. nested conditional if x % 3 == 0: print(&quot;x is divisible by 3&quot;) else: print(&quot;x is not divisible by 3&quot;) else: print(&quot;x is odd&quot;) . x is odd . Indentation . When using conditionals and nested conditionals in Python, it is important to pay attention to the level of indentation in the code. The code inside the if, elif, and else blocks must be indented so they are nested wihtin the outer statements. This way, Python knows which code belongs to which block. . Binary Search . What is binary search and what is it used for?: . Searching algorithm | Find and select a specific element in a sorted list of elements | . How does binary search work?: . Repeatedly divides the search interval in half to find the middle element and compares the middle value to the target value, if not the same then it continues on to either the lower or upper half | Eliminate half of the remaining search interval elements each time | Efficient way to search for element in large dataset | . What is the time complexity and why?: . O(log(N)) | The maximum number of iterations is the amount of times the list can be divided in half until it reaches 1 number | Dividing by 2, so it is log2(N), logarigthm of n base 2 . | You may recognize the example below from the binary lesson last Friday . | . import random def binary_search_game(): low = 1 high = 100 target = random.randint(low, high) while True: guess = (low + high) // 2 print(f&quot;Is your number {guess}?&quot;) response = input(&quot;Enter &#39;higher&#39;, &#39;lower&#39;, or &#39;yes&#39;: &quot;) # conditional statements to check target number and guess if response == &#39;yes&#39;: print(f&quot;I guessed your number {guess}!&quot;) break elif response == &#39;higher&#39;: low = guess + 1 elif response == &#39;lower&#39;: high = guess - 1 else: print(&quot;Invalid input, please enter &#39;higher&#39;, &#39;lower&#39;, or &#39;yes&#39;.&quot;) binary_search_game() . Is your number 50? Invalid input, please enter &#39;higher&#39;, &#39;lower&#39;, or &#39;yes&#39;. Is your number 50? Is your number 25? Is your number 12? Is your number 6? Is your number 9? Is your number 7? I guessed your number 7! . Quick Hack . Write a program using conditionals and nested conditionals . Ideas: Quiz, game (rock paper scissors, guess number), etc | . import random def rock_paper_scissors(): choices = [&#39;rock&#39;, &#39;paper&#39;, &#39;scissors&#39;] computer_choice = random.choice(choices) player_choice = input(&quot;Choose rock, paper, or scissors: &quot;) print(f&quot;Player chooses {player_choice}, computer chooses {computer_choice}&quot;) if player_choice not in choices: print(&quot;Invalid choice. Please choose rock, paper, or scissors.&quot;) elif player_choice == computer_choice: print(&quot;Tie!&quot;) elif (player_choice == &#39;rock&#39; and computer_choice == &#39;scissors&#39;) or (player_choice == &#39;paper&#39; and computer_choice == &#39;rock&#39;) or (player_choice == &#39;scissors&#39; and computer_choice == &#39;paper&#39;): print(&quot;You win!&quot;) else: print(&quot;I win!&quot;) rock_paper_scissors() . Player chooses scissors, computer chooses paper You win! . Introduction to Algorithms . an algorithm is a set of instructions that describes how to solve a problem or perform a specific task using a computer program. | It is a precise sequence of computational steps that take an input and produce an output | . How do Algorithms relate to data structures? . Algorithms often rely on specific data structures to solve problems efficiently. | Sorting algorithms require a data structure such as an array or a linked list to store and manipulate data. | Searching algorithms such as binary search require data structures like arrays or trees to organize and search through data. | . Important Terms . What is an algorithm? . it is a finite set of instructions that accomplishes a specific task | . Sequencing . means that there is an order in which to do things | . Selection . Helps to choose two different outcomes based off of a decision that the programmer wants to make | . Iteration . Repeat something until the condition is met. (also referred to as repetition) | . Calling and Developing Procedures . A procedure is a sequence of instructions that performs a specific task. | To call a procedure, you need to know its name and any arguments it requires. | When a procedure is called, the program jumps to its instruction and starts executing it. | The arguments passed to a procedure can be used within the procedure to perform tasks or calculations. | After the procedure has completed its task, it returns control back to the calling program. | . def add_numbers(a, b): sum = a + b print(&quot;The sum of&quot;, a, &quot;and&quot;, b, &quot;is&quot;, sum) # Call the procedure with arguments 5 and 7 add_numbers(5, 7) . The sum of 5 and 7 is 12 . The result of the procedure can be stored in a variable, printed to the screen, or used in any other way that is required by the program. | Procedures can be defined within the same program or in external files, and can be reused across multiple parts of the program. | To avoid errors and improve code readability, it&#39;s important to define and call procedures with proper syntax and conventions that are appropriate for the programming language you&#39;re using. | . def calculate_average(numbers): total = sum(numbers) count = len(numbers) average = total / count return average # Call the procedure with a list of numbers numbers_list = [10, 20, 30, 40, 50] result = calculate_average(numbers_list) # Display the result print(&quot;The average of&quot;, numbers_list, &quot;is&quot;, result) . The average of [10, 20, 30, 40, 50] is 30.0 . Algorithmic Efficiency . Algorithmic efficiency refers to the amount of time and resources needed to execute an algorithm. | Thhe efficiency of an algorithm can be measured in terms of its time complexity and space complexity. Time complexity refers to the amount of time required by an algorithm to complete its task as a function of its input size. | Space complexity refers to the amount of memory required by an algorithm to complete its task as a function of its input size. | can be analyzed using Big O notation, which provides an upper bound on the worst-case time and space complexity of the algorithm. | . | . What is the time complexity of the following code: . - O(N) - O(N*log(N)) - O(N * Sqrt(N)) - O(N*N) . a = 0 for i in range(N): # this is N for j in reversed(range(i, N)): a = a + i + j . NameError Traceback (most recent call last) /home/qaisjamili/vscode/quissite/_notebooks/2023-04-25-studenttemplate.ipynb Cell 25 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-25-studenttemplate.ipynb#X33sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; a = 0 -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-25-studenttemplate.ipynb#X33sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; for i in range(N): # this is N &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-25-studenttemplate.ipynb#X33sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; for j in reversed(range(i, N)): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-25-studenttemplate.ipynb#X33sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; a = a + i + j NameError: name &#39;N&#39; is not defined . What will be the time complexity of the following code? . n O(1) | (n+1) O(1) | n(n-1) O(n^2) | n(n+1) O(n) | . value = 0 for i in range(n): #iterates &quot;n&quot; times, with &quot;i&quot; taking on values from 0 to n-1. for j in range(i): # iterates &quot;i&quot; times, with &quot;j&quot; taking on values from 0 to i-1. value=value+1 . NameError Traceback (most recent call last) /home/qaisjamili/vscode/quissite/_notebooks/2023-04-25-studenttemplate.ipynb Cell 27 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-25-studenttemplate.ipynb#X35sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; value = 0 -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-25-studenttemplate.ipynb#X35sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; for i in range(n): #iterates &#34;n&#34; times, with &#34;i&#34; taking on values from 0 to n-1. &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-25-studenttemplate.ipynb#X35sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; for j in range(i): # iterates &#34;i&#34; times, with &#34;j&#34; taking on values from 0 to i-1. &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-25-studenttemplate.ipynb#X35sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; value=value+1 NameError: name &#39;n&#39; is not defined . Efficiency can be improved by optimizing algorithms or by using more efficient data structures and algorithms. Some common techniques for improving efficiency include reducing the size of input data, caching results, and parallelizing tasks. | Understanding algorithmic efficiency is important in software development, as it can impact the performance of applications and their ability to scale with larger data sets. | . | . Iteration and Simulations . Simulations are models of real-world phenomena or systems that use mathematical algorithms and computer programs simulate the real behavior and aspects of the subject being modeled. . Simulations are most often used to model complex or time-consuming things that would be difficult to test in real life, such as modeling the spread of diseases in certain ecosystems or testing the functionality of a potential product before it is made. . In this lesson, we will be looking at lists, iteration, and random values through the lens of simulations. . PLEASE RUN THE CODE BELOW BEFORE INTERACTING WITH THE CODE SEGMENTS IN THIS SECTION! . class Card: def __init__(self, suit, val): self.suit = suit self.val = val if val == 11: self.kind = &quot;Ace&quot; elif val == 12: self.kind = &quot;Jack&quot; elif val == 13: self.kind = &quot;Queen&quot; elif val == 14: self.kind = &quot;King&quot; else: self.kind = str(self.val) #return a formatted string version of a card def show(self): return f&quot;{self.kind} of {self.suit}&quot; #adjust aces to prevent breaking def ace_adj(self): if self.kind == &quot;Ace&quot;: self.val = 1 . Review: Lists and Iteration . Lists and iteration work hand-in-hand to efficiently process and/or modify multiple values at once. In a card game, for example, lists and iteration are used together frequently to make the game work correctly. . For Loops . For loops are probably the most well-known type of iterative loop used in code. Most of us know about the for variable in list format. . One helpful tool not a lot of people konw about is the enumerate() function. When used in conjunction with a for loop, you can always have access to the index and value of each selected list entry. . numlist = [3, 5, 68, 203] for key, num in enumerate(numlist): print(f&quot;This entry&#39;s index is {str(key)}, but its value is {str(num)}.&quot;) print(f&quot;The difference between the value and the index is {num - key}.&quot;) . This entry&#39;s index is 0, but its value is 3. The difference between the value and the index is 3. This entry&#39;s index is 1, but its value is 5. The difference between the value and the index is 4. This entry&#39;s index is 2, but its value is 68. The difference between the value and the index is 66. This entry&#39;s index is 3, but its value is 203. The difference between the value and the index is 200. . QUESTION: How is the key, num in enumerate(list) format similar to the format used when applying a for loop to a dictionary? . Answer: Utilizes key:value to separate keys and values. Allows you to iterate over a collection of items and access both the keys and values of each item . List Comprehension . You may also see for loops used within a list like below. We went over this in class fairly recently. In this case, it is used to show the cards in the hand of a player. . player_hand = [] # the player&#39;s hand is represented as a list # because lists are mutable (can change), they can be added to, like drawing a card # assume the deck below is a a deck of shuffled cards deck = [Card(&quot;Hearts&quot;, 3), Card(&quot;Spades&quot;, 12), Card(&quot;Diamonds&quot;, 11)] def draw_card(hand, deck): hand.append(deck.pop()) #try it out draw_card(player_hand, deck) print([card.show() for card in player_hand]) . [&#39;Ace of Diamonds&#39;] . Recursive Loops . Recursive loops have you calling one function inside of another. If a function must make some change to a certain value multiple times, it is oftem most efficient to have a function call itself with slightly different arguments like the fibonacci sequence below. . def fibonacci(terms): if terms &lt;= 1: return terms return fibonacci(terms-1) + fibonacci(terms-2) fibonacci(5) . 5 . Nesting Loops . Nesting loops increases the time complexity of the program, but it can be used to do things like make a card deck (see below). . def build(deck): for suit in [&quot;Spades&quot;, &quot;Clubs&quot;, &quot;Diamonds&quot;, &quot;Hearts&quot;]: for val in range(2, 15): #HINT: try replacing this function deck.append(Card(suit, val)) . While Loops . While loops aren&#39;t used in the program, but they offer a different way to repeat a set of instructions in a program. The procedure below the while [condition] line will occur until the condition is made not true. . Student Interaction: How could this build function be altered to function with a while loop within it? . def build(deck): for suit in [&quot;Spades&quot;, &quot;Clubs&quot;, &quot;Diamonds&quot;, &quot;Hearts&quot;]: for val in range(2, 15): deck.append(Card(suit, val)) #HINT: you may want to make an incrementing i variable . While loops also alter an alternative way to loop a set of instructions forever, until a precise thing occurs to break the loop. See the code below. . import random i = 0 while True: i += 1 ch = random.randint(1, 11) if ch == 10: print(f&quot;It took {str(i)} random generations to get 10.&quot;) break . It took 19 random generations to get 10. . 49 random generations is a lot more than it would normally take, but it&#39;s important for code to be able to model unlikely, yet possible scenarios. Speaking of random values... . Random Values . Because unpredictable randomness occurs in the real world, it&#39;s important to have a way to represent it. Simulations are able to use randomization, which could be in the form of random number generation or other methods like shuffle. . Card decks are a great example of how random values can be used to represent real-world scenarios. In the card simulation, the random module&#39;s shuffle function is used to quite literally shuffle the deck, seen below. . def shuffle(deck): random.shuffle(deck) . Often, random selection methods use functions like randint or randrange as ways to select certain indexes in lists, or might use the random numbers in some other way. . QUESTION: Without shuffling the card order of the deck, can you think of a way that the aforementioned random module functions could be used to get a random card from the deck? Do so in the code cell below. . Random Index | . import random class Card: def __init__(self, suit, value): self.suit = suit self.value = value deck = [Card(suit, value) for suit in [&quot;Spades&quot;, &quot;Clubs&quot;, &quot;Diamonds&quot;, &quot;Hearts&quot;] for value in range(2, 15)] random_card = random.choice(deck) print(f&quot;Random card: {random_card.value} of {random_card.suit}&quot;) . Random card: 14 of Clubs . Simulation Homework . Now that you&#39;ve learned about simulations and how they&#39;re used, it&#39;s time to apply that knowledge by creating a (basic) simulation of a real-world scenario. It can be something in nature, like the changes in the wildlife population of a certain area; it can be a game, like Uno (no blackjack though, that&#39;s taken); or it can be something completely random and unique. . The simulation must include... . Use of at least one random value | At least one list or similar data type (dictionary, set, etc.) | Efficient use of iteration (must support the purpose of the simualtion) | Selection (use of conditionals) | . Do this in your student copy in the cell provided. This is worth 0.9 (or more with extra credit) out of the 3 possible points. . import random # Set initial values mercedes = 1000000 bmw = 800000 # Number of years to simulate num_years = 10 # Growth rate for each brand mercedes_growth_rate = 0.05 bmw_growth_rate = 0.05 # Probability that someone will buy a Mercedes mercedes_chance = 0.6 # Simulate sales for each year for year in range(num_years): # Calculate new values for each brand mercedes_growth = int(mercedes * mercedes_growth_rate) bmw_growth = int(bmw * bmw_growth_rate) mercedes_loss = 0 bmw_loss = 0 # Simulate sales for each brand for i in range(mercedes_growth): if random.random() &lt; mercedes_chance: mercedes += 1 else: bmw_loss += 1 for i in range(bmw_growth): if random.random() &lt; (1 - mercedes_chance): bmw += 1 else: mercedes_loss += 1 # Adjust number of cars based on sales mercedes -= mercedes_loss bmw -= bmw_loss # Print results for the year print(&quot;Year &quot; + str(year+1) + &quot;:&quot;) print(&quot;Mercedes - &quot; + str(mercedes)) print(&quot;BMW - &quot; + str(bmw)) . Year 1: Mercedes - 1005969 BMW - 795969 Year 2: Mercedes - 1012533 BMW - 792033 Year 3: Mercedes - 1019189 BMW - 787664 Year 4: Mercedes - 1026308 BMW - 783207 Year 5: Mercedes - 1033426 BMW - 778170 Year 6: Mercedes - 1040870 BMW - 772851 Year 7: Mercedes - 1048785 BMW - 767365 Year 8: Mercedes - 1057035 BMW - 761544 Year 9: Mercedes - 1065898 BMW - 755633 Year 10: Mercedes - 1075126 BMW - 749348 . Databases . We have already gone over databases in this class, but here is a refresher. A databse contains data that&#39;s stored in columns and rows. The information in this database can then be pulled from the database and can be used in a program. . Setting Up the Database . Run the code cell below to prepare SQLite to create the database. If your system is struggling with the flask functions, verify that you&#39;re in the correct Python environment. REMEMBER: You should only db.init_app(app) ONCE during the process! . from flask import Flask from flask_sqlalchemy import SQLAlchemy # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . The Model File . The model file plays a crucial role in the formation of the database. . The model helps to create new databases | It provides a standardized method for formating the database entries across different systems | Objects used within the database are created | . import os, base64 import json from sqlalchemy.exc import IntegrityError # Define the User class to manage actions in the &#39;users&#39; table class User(db.Model): __tablename__ = &#39;players&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _username = db.Column(db.String(255), unique=False, nullable=False) _streak = db.Column(db.Integer, unique=True, nullable=False) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, username, streak): self._username = username self._streak = streak # a username getter method, extracts username from object @property def username(self): return self._username # a setter function, allows username to be updated after initial object creation @username.setter def username(self, username): self._username = username # a getter method, extracts streak from object @property def streak(self): return self._streak # a setter function, allows streak to be updated after initial object creation @streak.setter def streak(self, streak): self._streak = streak # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;username&quot;: self.username, &quot;streak&quot;: self.streak } # CRUD update: updates user name, password, phone # returns self def update(self, username, streak): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(username) &gt; 0: self.username = username if streak &gt; 0: self.streak = streak db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(username=&quot;Mr. Cards&quot;, streak=5) u2 = User(username=&quot;Kard Kowntre&quot;, streak=10) u3 = User(username=&quot;Un Bea Table&quot;, streak=15) users = [u1, u2, u3] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: user.create() print(f&#39;Created user with username &quot;{user.username}&quot;.&#39;) except IntegrityError: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; db.session.remove() print(f&quot;Records exist, duplicate email, or error: {user.username}&quot;) . The init Fuction . The init method has one purpose which is to initialize the object&#39;s attributes. This is what is known as the constructor. In our project, the init method initalizes the username and streak as variables. . def __init__(self, username, streak): self._username = username self._score = streak . Setters and Getters . Setters and Getters are important methods used when writing code for databases. . Setter: a method that allows us to set or change the value of an attribute in a class. | Getter: a method that allows us to access an attribute in a given class. | . Setter Example . @streak.setter def streak(self, streak): self._streak = streak . NameError Traceback (most recent call last) /home/qaisjamili/vscode/quissite/_notebooks/2023-04-25-studenttemplate.ipynb Cell 57 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-25-studenttemplate.ipynb#Y110sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; # a setter function, allows streak to be updated after initial object creation -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-25-studenttemplate.ipynb#Y110sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; @streak.setter &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-25-studenttemplate.ipynb#Y110sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; def streak(self, streak): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-25-studenttemplate.ipynb#Y110sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; self._streak = streak NameError: name &#39;streak&#39; is not defined . Getter Example . @property def streak(self): return self._streak . The Api File . An API is an important part of having a functional database. . it acts as a messenger that allows programs to access data from the others | it connects all information | for a database, an api retrives the data requested in code for the user | . import json from flask import Blueprint, request, jsonify from flask_restful import Api, Resource # used for REST API building user_api = Blueprint(&#39;user_api&#39;, __name__, url_prefix=&#39;/api/users&#39;) api = Api(user_api) class UserAPI: class _CRUD(Resource): # User API operation for Create, Read. THe Update, Delete methods need to be implemeented def post(self): # Create method &#39;&#39;&#39; Read data for json body &#39;&#39;&#39; body = request.get_json() &#39;&#39;&#39; Avoid garbage in, error checking &#39;&#39;&#39; # validate name username = body.get(&#39;username&#39;) if username is None or len(username) &lt; 1: return {&#39;message&#39;: f&#39;Username is missing, or is less than a character&#39;}, 400 # validate uid streak = body.get(&#39;streak&#39;) if streak is None or streak &lt; 1: return {&#39;message&#39;: f&#39;Streak is missing, or is less than 1&#39;}, 400 &#39;&#39;&#39; #1: Key code block, setup USER OBJECT &#39;&#39;&#39; uo = User(username=username, streak=streak) &#39;&#39;&#39; #2: Key Code block to add user to database &#39;&#39;&#39; # create user in database user = uo.create() # success returns json of user if user: return jsonify(user.read()) # failure returns error return {&#39;message&#39;: f&#39;Processed {username}, either a format error or a duplicate&#39;}, 400 def get(self): # Read Method users = User.query.all() # read/extract all users from database json_ready = [user.read() for user in users] # prepare output in json return jsonify(json_ready) # jsonify creates Flask response object, more specific to APIs than json.dumps def put(self): body = request.get_json() # get the body of the request id = body.get(&#39;id&#39;) username = body.get(&#39;username&#39;) streak = body.get(&#39;streak&#39;) # get the UID (Know what to reference) user = User.query.get(id) # get the player (using the uid in this case) user.update(username=username, streak=streak) return f&quot;{user.read()} Updated&quot; def delete(self): body = request.get_json() id = body.get(&#39;id&#39;) player = User.query.get(id) player.delete() return f&quot;{player.read()} Has been deleted&quot; # building RESTapi endpoint api.add_resource(_CRUD, &#39;/&#39;) . This is important particularly in a full flask respository context, but in this case, you&#39;ll just need to run the initUsers() function. . initUsers() . Created user with username &#34;Mr. Cards&#34;. Created user with username &#34;Kard Kowntre&#34;. Created user with username &#34;Un Bea Table&#34;. . An Alternative Method of Making SQLite Databases . In a previous lesson, we went over using the cursor object in SQLite3. Rather than go over all of that here, this lesson goes over it thoroughly. (You may use this method for the homework below.) . Database Homework . For this assignment, we&#39;d like you to make your own database file as instructed above. Remember, the API file isn&#39;t necessary in this case; you&#39;ll be focusing on making the model and the init function. . Your database must include these things: . A class with at least four attributes (if not the cursor method) | Setters and getters for this class (if not the cursor method) | Each of the CRUD functions | An init function with at least four entries | A screenshot showing proof that your SQLite file has been created correctly | . Feel free to base your database on the model provided above! Ask our group if you have any questions or concerns. . import sqlite3 class CarDatabase: def __init__(self, db_name): self.conn = sqlite3.connect(db_name) self.c = self.conn.cursor() self.c.execute(&#39;&#39;&#39;CREATE TABLE IF NOT EXISTS cars (brand TEXT, quantity INTEGER)&#39;&#39;&#39;) self.conn.commit() def add_car(self, brand, quantity): with self.conn: self.c.execute(&quot;INSERT INTO cars VALUES (?, ?)&quot;, (brand, quantity)) def get_quantity(self, brand): self.c.execute(&quot;SELECT quantity FROM cars WHERE brand=?&quot;, (brand,)) result = self.c.fetchone() if result: return result[0] else: return None def update_quantity(self, brand, new_quantity): with self.conn: self.c.execute(&quot;UPDATE cars SET quantity = ? WHERE brand = ?&quot;, (new_quantity, brand)) def delete_car(self, brand): with self.conn: self.c.execute(&quot;DELETE from cars WHERE brand = ?&quot;, (brand,)) def print_database(self): self.c.execute(&quot;SELECT * FROM cars&quot;) rows = self.c.fetchall() for row in rows: print(row) db = CarDatabase(&quot;car_inventory.db&quot;) db.add_car(&quot;Mercedes&quot;, 1000000) db.add_car(&quot;BMW&quot;, 900000) db.add_car(&quot;Mercedes&quot;, 500000) db.update_quantity(&quot;BMW&quot;, 1000000) db.delete_car(&quot;Mercedes&quot;) db.print_database() . (&#39;BMW&#39;, 1000000) (&#39;BMW&#39;, 1000000) (&#39;BMW&#39;, 1000000) (&#39;BMW&#39;, 1000000) . import sqlite3 # Establish a connection to the database (create the file if it doesn&#39;t exist) conn = sqlite3.connect(&#39;mydatabase.db&#39;) # Create a cursor object to execute SQL commands c = conn.cursor() # Create a table called &quot;cars&quot; with columns for &quot;brand&quot; and &quot;quantity&quot; c.execute(&#39;&#39;&#39;CREATE TABLE cars (brand text, quantity integer)&#39;&#39;&#39;) # Save (commit) the changes to the database conn.commit() # Close the connection to the database conn.close() . Grading . Your submission will be graded based on the following criteria: . Filling in the blank throughout the lesson and providing code in the given cells when applicable (0.9) | Simulation homework (0.9) | Database homework (0.9) | . Here are some ideas for ways to increase your score above a 2.7: . Make a frontend version of your simulation that can be interacted with on your blog | Connect your simulation to the database you create | Create a menu that allows a user to make an entry in your database (CRUD functions within it) | You can establish a relationship between two classes/tables in your database (see the relationship between the User and Note classes in the Nighthawk Coders flask repository) | .",
            "url": "https://qaisj1.github.io/quissite/bigidea3simsqlite/",
            "relUrl": "/bigidea3simsqlite/",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Petite Pandas Data Analysis using Pandas and NumPy",
            "content": "Predictive Analysis . Predictive analysis is the use of statistical, data mining, and machine learning techniques to analyze current and historical data in order to make predictions about future events or behaviors. It involves identifying patterns and trends in data, and then using that information to forecast what is likely to happen in the future. . Predictive analysis is used in a wide range of applications, from forecasting sales and demand, to predicting customer behavior, to detecting fraudulent transactions. It involves collecting and analyzing data from a variety of sources, including historical data, customer data, financial data, and social media data, among others. . The process of predictive analysis typically involves the following steps: . Defining the problem and identifying the relevant data sources | Collecting and cleaning the data | Exploring and analyzing the data to identify patterns and trends | Selecting an appropriate model or algorithm to use for predictions | Training and validating the model using historical data | Using the model to make predictions on new data | Monitoring and evaluating the performance of the model over time | Predictive analysis can help organizations make more informed decisions, improve efficiency, and gain a competitive advantage by leveraging insights from data. . It is most commonly used in Retail, where workers try to predict which products would be most popular and try to advertise those products as much as possible, and also Healthcare, where algorithms analyze patterns and reveal prerequisites for diseases and suggest preventive treatment, predict the results of various treatments and choose the best option for each patient individually, and predict disease outbreaks and epidemics. . 1. Intro to NumPy and the features it consists . Numpy, by definition, is the fundamental package for scientific computing in Python which can be used to perform mathematical operations, providing multidimensional array objects, and makes data analysis much easier. Numpy is very important and useful when it comes to data analysis, as it can easily use its features to complete and perform any mathematical operation, as well as analyze data files. . If you don&#39;t already have numpy installed, you can do so using conda install numpy or pip install numpy . Once that is complete, to import numpy in your code, all you must do is: . import numpy as np . 2. Using NumPy to create arrays . An array is the central data structure of the NumPy library. They are used as containers which are able to store more than one item at the same time. Using the function np.array is used to create an array, in which you can create multidimensional arrays. . Shown below is how to create a 1D array: . a = np.array([1, 2, 3]) print(a) # this creates a 1D array . [1 2 3] . How could you create a 3D array based on knowing how to make a 1D array? . my_array = [[[0 for k in range(4)] for j in range(3)] for i in range(2)] # Fill the array with some values for i in range(2): for j in range(3): for k in range(4): my_array[i][j][k] = i + j + k # Print the array for i in range(2): for j in range(3): for k in range(4): print(my_array[i][j][k], end=&quot; &quot;) print() print() . 0 1 2 3 1 2 3 4 2 3 4 5 1 2 3 4 2 3 4 5 3 4 5 6 . Arrays can be printed in different ways, especially a more readable format. As we have seen, arrays are printed in rows and columns, but we can change that by using the reshape function . c = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) print(c.reshape(1, 9)) # organizes it all in a single line of output . [[1 2 3 4 5 6 7 8 9]] . In the code segment below, we can also specially select certain rows and columns from the array to further analyze selective data. . print(c[1:, :2]) # the 1: means &quot;start at row 1 and select all the remaining rows&quot; # the :2 means &quot;select the first two columns&quot; . [[4 5] [7 8]] . 3. Basic array operations . One of the most basic operations that can be performed on arrays is arithmetic operations. With numpy, it is very easy to perform arithmetic operations on arrays. You can add, subtract, multiply and divide arrays, just like you would with regular numbers. When performing these operations, numpy applies the operation element-wise, meaning that it performs the operation on each element in the array separately. This makes it easy to perform operations on large amounts of data quickly and efficiently. . a = np.array([1, 2, 3]) b = np.array([4, 5, 6]) print(a + b) # adds each value based on the column the integer is in print(a - b) # subtracts each value based on the column the integer is in print(a * b) # multiplies each value based on the column the integer is in print(a / b) # divides each value based on the column the integer is in . [5 7 9] [-3 -3 -3] [ 4 10 18] [0.25 0.4 0.5 ] . d = np.exp(b) e = np.sqrt(b) print(d) print(e) . [ 54.59815003 148.4131591 403.42879349] [2. 2.23606798 2.44948974] . From the knowledge of how to use more advanced mathematical expressions than the basic 4 mathematical operations such as exponent and square root, now can you code how to calculate the 3 main trig expressions (sin, cos, tan), natural log, and log10 of a 1D array. . # calculate cos # calculate tan # calculate natural log # calculate log10 . 4. Data analysis using numpy . Numpy provides a convenient and powerful way to perform data analysis tasks on large datasets. One of the most common tasks in data analysis is finding the mean, median, and standard deviation of a dataset. Numpy provides functions to perform these operations quickly and easily. The mean function calculates the average value of the data, while the median function calculates the middle value in the data. The standard deviation function calculates how spread out the data is from the mean. Additionally, numpy provides functions to find the minimum and maximum values in the data. These functions are very useful for gaining insight into the properties of large datasets and can be used for a wide range of data analysis tasks. . data = np.array([2, 5, 12, 13, 19]) print(np.mean(data)) # finds the mean of the dataset print(np.median(data)) # finds the median of the dataset print(np.std(data)) # finds the standard deviation of the dataset print(np.min(data)) # finds the min of the dataset print(np.max(data)) # finds the max of the dataset . 10.2 12.0 6.04648658313239 2 19 . Now from learning this, can you find a different way from how we can solve the sum or products of a dataset other than how we learned before? . import numpy as np data = np.array([2, 5, 12, 13, 19]) # Calculate the sum of the dataset sum_data = np.sum(data) # Print the result print(&quot;Sum of the dataset:&quot;, sum_data) . Sum of the dataset: 51 . Numpy also has the ability to handle CSV files, which are commonly used to store and exchange large datasets. By importing CSV files into numpy arrays, we can easily perform complex operations and analysis on the data, making numpy an essential tool for data scientists and researchers. . genfromtxt and loadtxt are two functions in the numpy library that can be used to read data from text files, including CSV files. . genfromtxt is a more advanced function that can be used to read text files that have more complex structures, including CSV files. genfromtxt can handle files that have missing or invalid data, or files that have columns of different data types. It can also be used to skip header lines or to read only specific columns from the file. . import numpy as np padres = np.genfromtxt(&#39;files/padres.csv&#39;, delimiter=&#39;,&#39;, dtype=str, encoding=&#39;utf-8&#39;) # delimiter indicates that the data is separated into columns which is distinguished by commas # genfromtxt is used to read the csv file itself # dtype is used to have numpy automatically detect the data type in the csv file print(padres) . [[&#39;Name&#39; &#39; Position&#39; &#39; Average&#39; &#39; HR&#39; &#39; RBI&#39; &#39; OPS&#39; &#39; JerseyNumber&#39;] [&#39;Manny Machado&#39; &#39; 3B&#39; &#39; .298&#39; &#39; 32&#39; &#39; 102&#39; &#39; .897&#39; &#39; 13&#39;] [&#39;Fernando Tatis Jr&#39; &#39; RF&#39; &#39; .281&#39; &#39; 42&#39; &#39; 97&#39; &#39; .975&#39; &#39; 23&#39;] [&#39;Juan Soto&#39; &#39; LF&#39; &#39; .242&#39; &#39; 27&#39; &#39; 62&#39; &#39; .853&#39; &#39; 22&#39;] [&#39;Xander Bogaerts&#39; &#39; SS&#39; &#39; .307&#39; &#39; 15&#39; &#39; 73&#39; &#39; .833&#39; &#39; 2&#39;] [&#39;Nelson Cruz&#39; &#39; DH&#39; &#39; .234&#39; &#39; 10&#39; &#39; 64&#39; &#39; .651&#39; &#39; 32&#39;] [&#39;Matt Carpenter&#39; &#39; DH&#39; &#39; .305&#39; &#39; 15&#39; &#39; 37&#39; &#39; 1.138&#39; &#39; 14&#39;] [&#39;Jake Cronenworth&#39; &#39; 1B&#39; &#39; .239&#39; &#39; 17&#39; &#39; 88&#39; &#39; .722&#39; &#39; 9&#39;] [&#39;Ha-Seong Kim&#39; &#39; 2B&#39; &#39; .251&#39; &#39; 11&#39; &#39; 59&#39; &#39; .708&#39; &#39; 7&#39;] [&#39;Trent Grisham&#39; &#39; CF&#39; &#39; .184&#39; &#39; 17&#39; &#39; 53&#39; &#39; .626&#39; &#39; 1&#39;] [&#39;Luis Campusano&#39; &#39; C&#39; &#39; .250&#39; &#39; 1&#39; &#39; 5&#39; &#39; .593&#39; &#39; 12&#39;] [&#39;Austin Nola&#39; &#39; C&#39; &#39; .251&#39; &#39; 4&#39; &#39; 40&#39; &#39; .649&#39; &#39; 26&#39;] [&#39;Jose Azocar&#39; &#39; OF&#39; &#39; .257&#39; &#39; 0&#39; &#39; 10&#39; &#39; .630&#39; &#39; 28&#39;]] . loadtxt is a simpler function that can be used to read simple text files that have a regular structure, such as files that have only one type of data (such as all integers or all floats). loadtxt can be faster than genfromtxt because it assumes that the data in the file is well-structured and can be easily parsed. . import numpy as np padres = np.loadtxt(&#39;files/padres.csv&#39;, delimiter=&#39;,&#39;, dtype=str, encoding=&#39;utf-8&#39;) print(padres) . [[&#39;Name&#39; &#39; Position&#39; &#39; Average&#39; &#39; HR&#39; &#39; RBI&#39; &#39; OPS&#39; &#39; JerseyNumber&#39;] [&#39;Manny Machado&#39; &#39; 3B&#39; &#39; .298&#39; &#39; 32&#39; &#39; 102&#39; &#39; .897&#39; &#39; 13&#39;] [&#39;Fernando Tatis Jr&#39; &#39; RF&#39; &#39; .281&#39; &#39; 42&#39; &#39; 97&#39; &#39; .975&#39; &#39; 23&#39;] [&#39;Juan Soto&#39; &#39; LF&#39; &#39; .242&#39; &#39; 27&#39; &#39; 62&#39; &#39; .853&#39; &#39; 22&#39;] [&#39;Xander Bogaerts&#39; &#39; SS&#39; &#39; .307&#39; &#39; 15&#39; &#39; 73&#39; &#39; .833&#39; &#39; 2&#39;] [&#39;Nelson Cruz&#39; &#39; DH&#39; &#39; .234&#39; &#39; 10&#39; &#39; 64&#39; &#39; .651&#39; &#39; 32&#39;] [&#39;Matt Carpenter&#39; &#39; DH&#39; &#39; .305&#39; &#39; 15&#39; &#39; 37&#39; &#39; 1.138&#39; &#39; 14&#39;] [&#39;Jake Cronenworth&#39; &#39; 1B&#39; &#39; .239&#39; &#39; 17&#39; &#39; 88&#39; &#39; .722&#39; &#39; 9&#39;] [&#39;Ha-Seong Kim&#39; &#39; 2B&#39; &#39; .251&#39; &#39; 11&#39; &#39; 59&#39; &#39; .708&#39; &#39; 7&#39;] [&#39;Trent Grisham&#39; &#39; CF&#39; &#39; .184&#39; &#39; 17&#39; &#39; 53&#39; &#39; .626&#39; &#39; 1&#39;] [&#39;Luis Campusano&#39; &#39; C&#39; &#39; .250&#39; &#39; 1&#39; &#39; 5&#39; &#39; .593&#39; &#39; 12&#39;] [&#39;Austin Nola&#39; &#39; C&#39; &#39; .251&#39; &#39; 4&#39; &#39; 40&#39; &#39; .649&#39; &#39; 26&#39;] [&#39;Jose Azocar&#39; &#39; OF&#39; &#39; .257&#39; &#39; 0&#39; &#39; 10&#39; &#39; .630&#39; &#39; 28&#39;]] . for i in padres: print(&quot;,&quot;.join(i)) . Name, Position, Average, HR, RBI, OPS, JerseyNumber Manny Machado, 3B, .298, 32, 102, .897, 13 Fernando Tatis Jr, RF, .281, 42, 97, .975, 23 Juan Soto, LF, .242, 27, 62, .853, 22 Xander Bogaerts, SS, .307, 15, 73, .833, 2 Nelson Cruz, DH, .234, 10, 64, .651, 32 Matt Carpenter, DH, .305, 15, 37, 1.138, 14 Jake Cronenworth, 1B, .239, 17, 88, .722, 9 Ha-Seong Kim, 2B, .251, 11, 59, .708, 7 Trent Grisham, CF, .184, 17, 53, .626, 1 Luis Campusano, C, .250, 1, 5, .593, 12 Austin Nola, C, .251, 4, 40, .649, 26 Jose Azocar, OF, .257, 0, 10, .630, 28 . Pandas . What is Pandas . Pandas is a Python library used for working with data sets. A python library is something It has functions for analyzing, cleaning, exploring, and manipulating data. . Why Use Pandas? . Pandas allows us to analyze big data and make conclusions based on statistical theories. Pandas can clean messy data sets, and make them readable and relevant. Also it is a part of data analysis, and data manipulation. . What Can Pandas Do? . Pandas gives you answers about the data. Like: . Is there a correlation between two or more columns? | What is average value | Max value | Min value | How to load data | Delete data | Sort Data. | . Pandas are also able to delete rows that are not relevant, or contains wrong values, like empty or NULL values. This is called cleaning the data. . Basics of Pandas. . import pandas as pd # What this does is it calls the python pandas library and this code segment is needed whenever incorporating pandas. . DICTIONARIES AND DATASETS . One way you are able to manipulate a pandas data set is by creating a dictionary and calling it as seen with the dict data 1 and pd.dataframe which is a way to print the set. | . import pandas as pd data1 = { &#39;teams&#39;: [&quot;BARCA&quot;, &quot;REAL&quot;, &quot;ATLETICO&quot;], &#39;standings&#39;: [1, 2, 3] } myvar = pd.DataFrame(data1) print(myvar) . teams standings 0 BARCA 1 1 REAL 2 2 ATLETICO 3 . Indexing and manipulaton of data through lists. . With pandas you can also organize the data which is one of its biggest perks, we call this indexing, this is when we define the first column in a data frame. | . import pandas as pd score = [5/5, 5/5, 1/5] myvar = pd.Series(score, index = [&quot;math&quot;, &quot;science&quot;, &quot;pe&quot;]) print(myvar) . math 1.0 science 1.0 pe 0.2 dtype: float64 . Pandas Classes . Within pandas the library consits of a lot of functions which allow you to manipulate datasets in lists dictionsaries and csv files here are some of the ones we are going to cover (hint: take notes on these) . Series | Index | PeriodIndex | DataframeGroupedBy | Categorical | Time Stamp | . PeriodIndex . This allows for a way to repeat data over time that it occurs as seen from january 2022 to december 2023. You can use Y for years, M for months, and D for days. | . import pandas as pd time = pd.period_range(&#39;2022-01&#39;, &#39;2022-12&#39;, freq=&#39;M&#39;) print(time) . PeriodIndex([&#39;2022-01&#39;, &#39;2022-02&#39;, &#39;2022-03&#39;, &#39;2022-04&#39;, &#39;2022-05&#39;, &#39;2022-06&#39;, &#39;2022-07&#39;, &#39;2022-08&#39;, &#39;2022-09&#39;, &#39;2022-10&#39;, &#39;2022-11&#39;, &#39;2022-12&#39;], dtype=&#39;period[M]&#39;) . Now implement a way to show a period index from June 2022 to July 2023 in days. . import pandas as pd # Create a period index from January 2022 to December 2022 with a monthly frequency time = pd.period_range(&#39;2022-01&#39;, &#39;2022-12&#39;, freq=&#39;M&#39;) # Select the range of dates from June 2022 to December 2023 and convert it to days days = (time[(time &gt;= pd.Period(&#39;2022-06&#39;)) &amp; (time &lt;= pd.Period(&#39;2023-12&#39;))].to_timestamp() - pd.Timestamp(&#39;2022-06-01&#39;)).days # Print the result print(days) . Int64Index([0, 30, 61, 92, 122, 153, 183], dtype=&#39;int64&#39;) . Dataframe Grouped By . This allows for you to organize your data and calculate the different functions such as | count(): returns the number of non-null values in each group. | sum(): returns the sum of values in each group. | mean(): returns the mean of values in each group. | min(): returns the minimum value in each group. | max(): returns the maximum value in each group. | median(): returns the median of values in each group. | var(): returns the variance of values in each group. | agg(): applies one or more functions to each group and returns a new DataFrame with the results. | . import pandas as pd data = { &#39;Category&#39;: [&#39;E&#39;, &#39;F&#39;, &#39;E&#39;, &#39;F&#39;, &#39;E&#39;, &#39;F&#39;, &#39;E&#39;, &#39;F&#39;], &#39;Value&#39;: [100, 250, 156, 255, 240, 303, 253, 3014] } df = pd.DataFrame(data) grouped = df.groupby(&#39;Category&#39;) #GUESS WHAT THIS WOULD BE IF WE WERE LOOKING FOR COMBINED TOTALS!() print(grouped) . &lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x7ff7cd90a400&gt; . Categorical . This sets up a category for something and puts it within the categories and allows for better orginzation | . import pandas as pd colors = pd.Categorical([&#39;yellow&#39;, &#39;orange&#39;, &#39;blue&#39;, &#39;yellow&#39;, &#39;orange&#39;], categories=[&#39;yellow&#39;, &#39;orange&#39;, &#39;blue&#39;]) print(colors) . [&#39;yellow&#39;, &#39;orange&#39;, &#39;blue&#39;, &#39;yellow&#39;, &#39;orange&#39;] Categories (3, object): [&#39;yellow&#39;, &#39;orange&#39;, &#39;blue&#39;] . Timestamp Class . This allows to display a single time which can be useful when working with datasets that deal with time allowing you to manipulate the time you do something and how you do it. | . import pandas as pd timing = pd.Timestamp(&#39;2023-02-05 02:00:00&#39;) print #WHAT WOULD THIS BE . &lt;function print&gt; . CSV FILES! . A csv file contains data and within pandas you are able to call the function and you are able to manipulate the data with the certain data classes talked about above. | . Name, Position, Average, HR, RBI, OPS, JerseyNumber | Manny Machado, 3B, .298, 32, 102, .897, 13 | Tatis Jr, RF, .281, 42, 97, .975, 23 | Juan Soto, LF, .242, 27, 62, .853, 22 | Xanger Bogaerts, SS, .307, 15, 73, .833, 2 | Nelson Cruz, DH, .234, 10, 64, .651, 32 | Matt Carpenter, DH, .305, 15, 37, 1.138, 14 | Cronezone, 1B, .239, 17, 88, .722, 9 | Ha-Seong Kim, 2B, .251, 11, 59, .708, 7 | Trent Grisham, CF, .184, 17, 53, .626, 1 | Luis Campusano, C, .250, 1, 5, .593, 12 | Austin Nola, C, .251, 4, 40, .649, 26 | Jose Azocar, OF, .257, 0, 10, .630, 28 | . QUESTION: WHAT DO YOU GUYS THINK THE INDEX FOR THIS WOULD BE? Player name . Can you explain what is going on in this code segment below. (hint: define what ascending= false means, and df. head means) The code is sorting a CSV file based on the &#39;Name&#39; column in descending order and prints the top 10 and bottom 10 rows of the sorted dataframe. . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/padres.csv&#39;).sort_values(by=[&#39;Name&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) print(&#39;, &#39;.join(df.tail(10))) . --Duration Top 10 Name Position Average HR RBI OPS JerseyNumber 3 Xander Bogaerts SS 0.307 15 73 0.833 2 8 Trent Grisham CF 0.184 17 53 0.626 1 4 Nelson Cruz DH 0.234 10 64 0.651 32 5 Matt Carpenter DH 0.305 15 37 1.138 14 0 Manny Machado 3B 0.298 32 102 0.897 13 9 Luis Campusano C 0.250 1 5 0.593 12 2 Juan Soto LF 0.242 27 62 0.853 22 11 Jose Azocar OF 0.257 0 10 0.630 28 6 Jake Cronenworth 1B 0.239 17 88 0.722 9 7 Ha-Seong Kim 2B 0.251 11 59 0.708 7 --Duration Bottom 10 Name Position Average HR RBI OPS JerseyNumber 4 Nelson Cruz DH 0.234 10 64 0.651 32 5 Matt Carpenter DH 0.305 15 37 1.138 14 0 Manny Machado 3B 0.298 32 102 0.897 13 9 Luis Campusano C 0.250 1 5 0.593 12 2 Juan Soto LF 0.242 27 62 0.853 22 11 Jose Azocar OF 0.257 0 10 0.630 28 6 Jake Cronenworth 1B 0.239 17 88 0.722 9 7 Ha-Seong Kim 2B 0.251 11 59 0.708 7 1 Fernando Tatis Jr RF 0.281 42 97 0.975 23 10 Austin Nola C 0.251 4 40 0.649 26 Name, Position, Average, HR, RBI, OPS, JerseyNumber . import pandas as pd df = pd.read_csv(&quot;./files/housing.csv&quot;) mode_total_rooms = df[&#39;total_rooms&#39;].mode() print(f&quot;The mode of the &#39;total_rooms&#39; column is: {mode_total_rooms}&quot;) . The mode of the &#39;total_rooms&#39; column is: 0 1527.0 Name: total_rooms, dtype: float64 . import pandas as pd df = pd.read_csv(&quot;./files/housing.csv&quot;) grouped_df = df.groupby(&#39;total_rooms&#39;) agg_df = grouped_df.agg({&#39;total_rooms&#39;: &#39;sum&#39;, &#39;population&#39;: &#39;mean&#39;, &#39;longitude&#39;: &#39;count&#39;}) # WHAT DO YOU GUYS THINK df.agg means in context of pandas and what does it stand for. print(agg_df) . total_rooms population longitude total_rooms 2.0 2.0 6.0 1 6.0 6.0 8.0 1 8.0 8.0 13.0 1 11.0 11.0 24.0 1 12.0 12.0 18.0 1 ... ... ... ... 30450.0 30450.0 9419.0 1 32054.0 32054.0 15507.0 1 32627.0 32627.0 28566.0 1 37937.0 37937.0 16122.0 1 39320.0 39320.0 16305.0 1 [5926 rows x 3 columns] . Our Frontend Data Analysis Project . Link . Popcorn Hacks . Complete fill in the blanks for Predictive Analysis Numpy | Takes notes on Panda where it asks you to | Complete code segment tasks in Panda and Numpy | . I tried to do most of the popcorn hacks but something is wrong with my computer. Most of the lesson&#39;s code will note run properly. . Main Hack . Make a data file - content is up to you, just make sure there are integer values - and print | Run Panda and Numpy commands Panda: Find Min and Max values | Sort in order - can be order of least to greatest or vice versa | Create a smaller dataframe and merge it with your data file | . | Numpy: Random number generation | create a multi-dimensional array (multiple elements) | create an array with linearly spaced intervals between values | . | . | . Something is really wrong with my computer. This code should work. I have the work done but my computer is not able to run it. . import pandas as pd import numpy as np # read rugbyteam.csv file into a pandas dataframe df = pd.read_csv(&#39;rugbyteam.csv&#39;) # find min and max values of the &quot;Age&quot; column min_age = np.min(df[&#39;Age&#39;]) max_age = np.max(df[&#39;Age&#39;]) print(f&quot;Minimum age: {min_age}&quot;) print(f&quot;Maximum age: {max_age}&quot;) # sort the dataframe in ascending order by the &quot;Position&quot; column sorted_df = df.sort_values(by=&#39;Position&#39;) print(&quot;--Sorted by Position (Ascending)--&quot;) print(sorted_df.head()) # generate a random 3x3 array using NumPy random_array = np.random.rand(3, 3) print(&quot;--Random Array--&quot;) print(random_array) # create a 1D array with 10 linearly spaced values between 0 and 1 linear_array = np.linspace(0, 1, 10) print(&quot;--Linearly Spaced Array--&quot;) print(linear_array) . KeyError Traceback (most recent call last) File ~/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py:3621, in Index.get_loc(self, key, method, tolerance) 3620 try: -&gt; 3621 return self._engine.get_loc(casted_key) 3622 except KeyError as err: File ~/anaconda3/lib/python3.9/site-packages/pandas/_libs/index.pyx:136, in pandas._libs.index.IndexEngine.get_loc() File ~/anaconda3/lib/python3.9/site-packages/pandas/_libs/index.pyx:163, in pandas._libs.index.IndexEngine.get_loc() File pandas/_libs/hashtable_class_helper.pxi:5198, in pandas._libs.hashtable.PyObjectHashTable.get_item() File pandas/_libs/hashtable_class_helper.pxi:5206, in pandas._libs.hashtable.PyObjectHashTable.get_item() KeyError: &#39;Age&#39; The above exception was the direct cause of the following exception: KeyError Traceback (most recent call last) /home/qaisjamili/vscode/quissite/_notebooks/2023-04-25-Data-Analysis-Panda-Numpy.ipynb Cell 54 in &lt;cell line: 8&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-25-Data-Analysis-Panda-Numpy.ipynb#Y104sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; df = pd.read_csv(&#39;rugbyteam.csv&#39;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-25-Data-Analysis-Panda-Numpy.ipynb#Y104sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; # find min and max values of the &#34;Age&#34; column -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-25-Data-Analysis-Panda-Numpy.ipynb#Y104sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; min_age = np.min(df[&#39;Age&#39;]) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-25-Data-Analysis-Panda-Numpy.ipynb#Y104sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; max_age = np.max(df[&#39;Age&#39;]) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-04-25-Data-Analysis-Panda-Numpy.ipynb#Y104sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; print(f&#34;Minimum age: {min_age}&#34;) File ~/anaconda3/lib/python3.9/site-packages/pandas/core/frame.py:3505, in DataFrame.__getitem__(self, key) 3503 if self.columns.nlevels &gt; 1: 3504 return self._getitem_multilevel(key) -&gt; 3505 indexer = self.columns.get_loc(key) 3506 if is_integer(indexer): 3507 indexer = [indexer] File ~/anaconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py:3623, in Index.get_loc(self, key, method, tolerance) 3621 return self._engine.get_loc(casted_key) 3622 except KeyError as err: -&gt; 3623 raise KeyError(key) from err 3624 except TypeError: 3625 # If we have a listlike key, _check_indexing_error will raise 3626 # InvalidIndexError. Otherwise we fall through and re-raise 3627 # the TypeError. 3628 self._check_indexing_error(key) KeyError: &#39;Age&#39; . Grading . The grading will be binary - all or nothing; no partial credit . 0.3 for all the popcorn hacks | 0.6 for the main hack - CSV file | 0.1 for going above and beyond in the main hack | .",
            "url": "https://qaisj1.github.io/quissite/2023/04/25/Data-Analysis-Panda-Numpy.html",
            "relUrl": "/2023/04/25/Data-Analysis-Panda-Numpy.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "SASS",
            "content": "Why SASS? . SASS is an improvement on CSS in that there are methods of abstraction. It is a __ language that is _ into CSS, which means that __, which is what your web browser can read. . SASS vs SCSS . As you learn about Sass, you might notice something called Scss. They are basically the same thing except that Scss uses curly braces and semicolons to distinguish between lines. Sass uses indentation and newlines instead. . We will be teaching the Scss syntax because it is more commonly used. . Getting started . A easy way to write SASS and have it preprocessed into CSS is by using a Jekyll powered website, such as GitHub pages or Fastpages. . The first step is to clone a GitHub pages repo, such as this one. . Within the repository, head over to assets/css/, and open style.scss. . This is where you can create your SASS code. . To see your CSS-translated SASS code, head over to _site/assets/css/style.css . Note: You will need to run bundle exec jekyll serve before the _site directory appears. . The first few hundred lines are used to style Github&#39;s theme. Make sure to scroll to the very bottom to see the SASS code that you wrote, which is in the form of CSS. . Nesting . Take notes here . Mini-hack . Write out the SASS equivalent for the following CSS code: . .a .b { color: green; } .a .c { color: blue; } . Extend/Inheritance . What are some similarities that the buttons share? What are the differences? . Take notes here . Mixin . Take notes here . Mini-hack . Write out a mixin in SASS that takes in a color and a font size as the parameter. Within the mixin, set the background color and font color to the color parameter, and set the font size to the font size parameter. Then create a selector that calls the mixin, and pass in a color and font size of your choice as the arguments. . Function . Take notes here . Import . Take notes here . SASS Hacks . Take notes and complete the mini-hacks. (0.9) . | Complete the quiz questions and provide your answers in this notebook. (0.9) . | Use SASS to create something that uses either extend or mixin. (0.9) . | Extra credit: Research other SASS features and blog about what you learned or add to your SASS project with any extra features not covered in this lesson. More points will be given if both are done. . |",
            "url": "https://qaisj1.github.io/quissite/2023/04/23/sass-lesson.html",
            "relUrl": "/2023/04/23/sass-lesson.html",
            "date": " • Apr 23, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Basic JavaScript Knowledge",
            "content": "Variables . - declare JavaScript variables with var, let or const. - If the value of the variable can change, like a total, use let. If the value is set, like prices, use const. Variables can hold any data type. . var x = 5; var y = 6; var z = x + y; z . 11 . Data types- there are 8 JS data types. . List a few data types that you already know &gt; &gt; | . 1. String: a series of characters, written with single or double quotes . let text = &quot;Mort&quot;; text . &#39;Mort&#39; . let text2 = &#39;Yeung&#39;; text2 . &#39;Yeung&#39; . 2. Number: can be integers or decimals. . - You can also have exponential notation for large/small numbers . 3. Bigint: used to store integer values that are too big to be represented by a normal JS number . - JavaScript integers are only accurate up to 15 digits . let number = 1234567890123456789012345n; let Largenum = BigInt(1234567890123456789012345) let typeLargenum = typeof Largenum; typeLargenum . &#39;bigint&#39; . Largenum . 1234567890123456824475648n . 4. Boolean: true or false, used in conditional testing . Boolean(10 &gt; 9) . false . Write a boolean statement that outputs true . 5. Undefined: a variable without a value, has the value undefined/empty values . let name; name . grade = undefined; . 6. Null: represents the intentional absence of any object value . - variable is empty at the moment and may have a value later . let result; result = Boolean(undefined); console.log(result); // false result = Boolean(null); console.log(result); // false . false false . 7. Symbol: used to represent unique values that can be used as identifiers/keys in objects. . - They are also used to create private properties and methods in classes. - unique and immutable, so they can be used as unique identifiers in objects and classes. - useful for creating constants that can be shared across different parts of your code. . // Create a Symbol const mySymbol = Symbol(); console.log(mySymbol); // expected output: Symbol() . Symbol() . const myObject = { [mySymbol]: &#39;Hello World&#39; }; console.log(myObject); . { [Symbol()]: &#39;Hello World&#39; } . Edit/add to the code above so that it outputs &quot;Hello World&quot; . 8. Object: an unordered collection of key-value pairs. Each key-value pair is called a property. . - object: written with curly braces {}, name:value pairs - array: written with square brackets, separated by commas . Object . Identify the name/keys in the object below: , , __ | Identify the values in the object below: , , __ | . const dogs = {name: &quot;Elly&quot;, breed:&quot;Rottweiler&quot;, age:4, color:&quot;black&quot;} dogs . { name: &#39;Elly&#39;, breed: &#39;Rottweiler&#39;, age: 4, color: &#39;black&#39; } . Array . const songs = [&quot;Love Story&quot;, &quot;Blank Space&quot;, &quot;I Knew You Were Trouble&quot;]; songs . [ &#39;Love Story&#39;, &#39;Blank Space&#39;, &#39;I Knew You Were Trouble&#39; ] . Const . - We use const to declare variables whose value can be initialized only at the time of declaration. - Const means that the identifier cannot be reassigned. . const cost1 = 2; const cost2 = 11; let totalCost = cost1 + cost2; totalCost . 13 . Conditionals: control behavior, decides whether or not pieces of code can run. . - If: if a condition is true it is used to specify execution for a block of code. - Else: if the same condition is false it specifies the execution for a block of code. - Else If: new test if the first condition is false. . if (10 &gt; 5) { var outcome = &quot;True&quot;; } outcome; . &#39;True&#39; . if (&quot;red&quot; === &quot;blue&quot;) { var outcome = &quot;if block&quot;; } else { var outcome = &quot;else block&quot;; } outcome; . &#39;else block&#39; . let temperature = 54 if (temperature &lt; 70) { cast = &quot;Chilly&quot;; } else if (temperature &lt; 60) { cast = &quot;Cold&quot;; } else { cast = &quot;Warm&quot;; } cast . &#39;Chilly&#39; . Create a conditional statement about how you would greet someone based on the time of day. . Functions: . - defining: define with function + functionName(parameter) { function code }. It can be unnamed/anonymous can be defined based on a condition. - calling: simply put the function name with a parameter and semicolon, or a function can call itself (recursive) . Iteration: . - for loop: repeats until a specified condition evaluates to false - do...while: repeats until a specified condition evaluates to false - while statement: executes its statements as long as a specified condition evaluates to true - label: provides a statement with an identifier that lets you refer to it later in the code. ex. you can use a label to identify a loop, and then use the break or continue statements to indicate whether a program should interrupt the loop or continue its execution - break: used to terminate a loop, switch, or in conjunction with a labeled statement - continue: can be used to restart a while, do-while, for, or label statement - for...in: iterates a specified variable over all the enumerable properties of an object - for...of statement creates a loop Iterating over iterable objects, invoking a custom iteration hook with statements to be executed for the value of each distinct property . JavaScript in HTML- Questions . Where do you store the JavaScript Code? | How do you import a JS file into HTML? | What is onClick? | What tag do you use to write JavaScript code? | Hacks . Add notes in this notebook | Complete the code portions, questions, and prompts throughout the notebook | Extra Credit: code a small JavaScript game |",
            "url": "https://qaisj1.github.io/quissite/2023/04/23/JSlesson.html",
            "relUrl": "/2023/04/23/JSlesson.html",
            "date": " • Apr 23, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: Processor Intel(R) Core(TM) i7-3517U CPU @ 1.90GHz, 2401 Mhz, 2 Core(s), 4 Logical Processor(s) | Memory in GB: 8.00 GB | Storage in GB: 237 GB | OS: OS Name Microsoft Windows 10 Pro | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. Input devices: Input devices are hardware components that enable users to enter data or instructions into a computer system. Common examples of input devices include keyboards, mice, touchscreens, scanners, and microphones. . Output devices: Output devices are hardware components that display or output information from a computer system. Some common examples of output devices include monitors, printers, speakers, and projectors. | Program file: A program file refers to a file that contains executable code, which can be run by a computer. These files typically have a file extension that corresponds to the programming language used to write the program. | Program code: Program code is the set of instructions that a computer can understand and execute. This code is written in a programming language such as Python, Java, or C++. | Processes: Processes are instances of a computer program that are being executed by one or many threads. A process is a container that holds all the information necessary to execute a program. | Ports: Ports are communication endpoints through which data can be exchanged between a computer and external devices or networks. Ports can be physical or virtual, and are identified by numbers or names. | Data file: A data file refers to a file that contains data or information, such as text, images, or audio. These files can be created by users or generated by computer programs. | Inspect running code: Inspecting running code refers to the process of examining the code and data structures of a running program. This can be useful for debugging and performance tuning. | Inspect variables: Inspecting variables refers to the process of examining the values of variables during the execution of a program. This can also be useful for debugging and performance tuning. | . . The Internet . Watch/review College Board Daily Video for 4.1.123 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. | Path: The route or track that a file or program takes in a computer system. | Route: The course or direction taken to get from one place to another. | Computer System: A collection of interconnected hardware and software components designed to perform a set of tasks. | Computer Device: A physical component that can be connected to a computer to perform a specific function. | Bandwidth: The amount of data that can be transmitted over a network connection in a given amount of time. | Computer Network: A group of interconnected computers and other devices that can communicate and share resources. | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions . | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. | . C | A The internet is fault tolerant Network where devices can communicate with one another even if one path goes down. It’s important to have redundancy in your network, so that if one wire goes down, the other devices can still function because there is more than one path between connected devices. | . | Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://qaisj1.github.io/quissite/2023/04/05/AP_computers_networks.html",
            "relUrl": "/2023/04/05/AP_computers_networks.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a dictionary. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is O(1). | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([-3, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # 3 numbers # prints the set of numbers provided # No repeating values # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # Dictionaries can&#39;t have duplicates either # . {1, 2, 3, -3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . rugby_teams = { &quot;NRL&quot;: &quot;Rugby&quot;, &quot;Number One Team&quot;: &quot;Melbourne Storm&quot;, &quot;Year&quot;: 2023, &quot;Teams&quot;: { 1: &quot;Melbourne Storm&quot;, 2: &quot;South Sydney Rabbitohs&quot;, 3: &quot;Brisbane Broncos&quot;, 4: &quot;St. George Illawarra Dragons&quot;, 5: &quot;Manly-Warringah Sea Eagles&quot;, } } # What data structures do you see? # String, Dictionary, list, and integer # # Printing the dictionary print(rugby_teams) . {&#39;NRL&#39;: &#39;Rugby&#39;, &#39;Number One Team&#39;: &#39;Melbourne Storm&#39;, &#39;Year&#39;: 2023, &#39;Teams&#39;: {1: &#39;Melbourne Storm&#39;, 2: &#39;South Sydney Rabbitohs&#39;, 3: &#39;Brisbane Broncos&#39;, 4: &#39;St. George Illawarra Dragons&#39;, 5: &#39;Manly-Warringah Sea Eagles&#39;}} . print(rugby_teams.get(&#39;Teams&#39;)) # or print(&quot;The Number One Team In 2023 is:&quot;) print(rugby_teams[&#39;Number One Team&#39;]) . {1: &#39;Melbourne Storm&#39;, 2: &#39;South Sydney Rabbitohs&#39;, 3: &#39;Brisbane Broncos&#39;, 4: &#39;St. George Illawarra Dragons&#39;, 5: &#39;Manly-Warringah Sea Eagles&#39;} The Number One Team In 2023 is: Melbourne Storm . print(rugby_teams.get(&#39;Teams&#39;)[1]) # or print(rugby_teams[&#39;Teams&#39;][5]) . Melbourne Storm Manly-Warringah Sea Eagles . rugby_teams[&quot;Best Player&quot;] = ([&#39;Robbie Ross&#39;]) # What can you change to make sure there are no duplicate producers? # Use a set # # Printing the dictionary print(rugby_teams) . {&#39;NRL&#39;: &#39;Rugby&#39;, &#39;Number One Team&#39;: &#39;Melbourne Storm&#39;, &#39;Year&#39;: 2023, &#39;Teams&#39;: {1: &#39;Melbourne Storm&#39;, 2: &#39;South Sydney Rabbitohs&#39;, 3: &#39;Brisbane Broncos&#39;, 4: &#39;St. George Illawarra Dragons&#39;, 5: &#39;Manly-Warringah Sea Eagles&#39;}, &#39;Best Player&#39;: [&#39;Robbie Ross&#39;]} . rugby_teams[&quot;Teams&quot;].update({6: &quot;Sydney Roosters&quot;}) # How would add an additional genre to the dictionary, like electropop? # # # Printing the dictionary print(rugby_teams) . {&#39;NRL&#39;: &#39;Rugby&#39;, &#39;Number One Team&#39;: &#39;Melbourne Storm&#39;, &#39;Year&#39;: 2023, &#39;Teams&#39;: {1: &#39;Melbourne Storm&#39;, 2: &#39;South Sydney Rabbitohs&#39;, 3: &#39;Brisbane Broncos&#39;, 4: &#39;St. George Illawarra Dragons&#39;, 5: &#39;Manly-Warringah Sea Eagles&#39;, 19: &#39;All Of The Girls You Loved Before&#39;, 6: &#39;Sydney Roosters&#39;}, &#39;Best Player&#39;: [&#39;Robbie Ross&#39;]} . for k,v in rugby_teams.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # # . NRL: Rugby Number One Team: Melbourne Storm Year: 2023 Teams: {1: &#39;Melbourne Storm&#39;, 2: &#39;South Sydney Rabbitohs&#39;, 3: &#39;Brisbane Broncos&#39;, 4: &#39;St. George Illawarra Dragons&#39;, 5: &#39;Manly-Warringah Sea Eagles&#39;, 19: &#39;All Of The Girls You Loved Before&#39;, 6: &#39;Sydney Roosters&#39;} Best Player: [&#39;Robbie Ross&#39;] . def search(): search = input(&quot;What would you like to know about the NRL?&quot;) if rugby_teams.get(search.lower()) == None : print(&quot;Robbie Ross&quot;) else: print(rugby_teams.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # # . Robbie Ross . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . I don&#39;t listen to Taylor Swift much. Love story is good. | . | .",
            "url": "https://qaisj1.github.io/quissite/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Space&Time Hacks",
            "content": "Space and Time Complexity . Space complexity refers to the amount of memory used by an algorithm to complete its execution, as a function of the size of the input. The space complexity of an algorithm can be affected by various factors such as the size of the input data, the data structures used in the algorithm, the number and size of temporary variables, and the recursion depth. Time complexity refers to the amount of time required by an algorithm to run as the input size grows. It is usually measured in terms of the &quot;Big O&quot; notation, which describes the upper bound of an algorithm&#39;s time complexity. . Why do you think a programmer should care about space and time complexity? . It can help them create a program which runs better | . Take a look at our lassen volcano example from the data compression tech talk. The first code block is the original image. In the second code block, change the baseWidth to rescale the image. . from IPython.display import Image, display from pathlib import Path # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) if __name__ == &quot;__main__&quot;: lassen_volcano = image_data(images=[{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) image_display(lassen_volcano) . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def scale_image(img): #baseWidth = 625 #baseWidth = 1250 #baseWidth = 2500 baseWidth = 5000 # see the effect of doubling or halfing the baseWidth #baseWidth = 10000 #baseWidth = 20000 #baseWidth = 40000 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size image[&#39;width&#39;], image[&#39;height&#39;] = img.size image[&#39;pixels&#39;] = image[&#39;width&#39;] * image[&#39;height&#39;] # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;scaled_width&#39;], image[&#39;scaled_height&#39;] = img.size image[&#39;scaled_pixels&#39;] = image[&#39;scaled_width&#39;] * image[&#39;scaled_height&#39;] # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data(images = [{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;pixels&#39;]:,}&quot;) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;scaled_pixels&#39;]:,}&quot;) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) . Do you think this is a time complexity or space complexity or both problem? . Both | . Big O Notation . Constant O(1) | Linear O(n) | Quadratic O(n^2) | Logarithmic O(logn) | Exponential (O(2^n)) | . numbers = list(range(1000)) print(numbers) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999] . Constant O(1) . Time . An example of a constant time algorithm is accessing a specific element in an array. It does not matter how large the array is, accessing an element in the array takes the same amount of time. Therefore, the time complexity of this operation is constant, denoted by O(1). . print(numbers[263]) ncaa_bb_ranks = {1:&quot;Alabama&quot;,2:&quot;Houston&quot;, 3:&quot;Purdue&quot;, 4:&quot;Kansas&quot;} #look up a value in a dictionary given a key print(ncaa_bb_ranks[1]) . Space . This function takes two number inputs and returns their sum. The function does not create any additional data structures or variables that are dependent on the input size, so its space complexity is constant, or O(1). Regardless of how large the input numbers are, the function will always require the same amount of memory to execute. . def sum(a, b): return a + b print(sum(90,28)) print(sum(.9,.88)) . 118 1.78 . Linear O(n) . Time . An example of a linear time algorithm is traversing a list or an array. When the size of the list or array increases, the time taken to traverse it also increases linearly with the size. Hence, the time complexity of this operation is O(n), where n is the size of the list or array being traversed. . for i in numbers: print(i) . Space . This function takes a list of elements arr as input and returns a new list with the elements in reverse order. The function creates a new list reversed_arr of the same size as arr to store the reversed elements. The size of reversed_arr depends on the size of the input arr, so the space complexity of this function is O(n). As the input size increases, the amount of memory required to execute the function also increases linearly. . def reverse_list(arr): n = len(arr) reversed_arr = [None] * n #create a list of None based on the length or arr for i in range(n): reversed_arr[n-i-1] = arr[i] #stores the value at the index of arr to the value at the index of reversed_arr starting at the beginning for arr and end for reversed_arr return reversed_arr print(numbers) print(reverse_list(numbers)) . Quadratic O(n^2) . Time . An example of a quadratic time algorithm is nested loops. When there are two nested loops that both iterate over the same collection, the time taken to complete the algorithm grows quadratically with the size of the collection. Hence, the time complexity of this operation is O(n^2), where n is the size of the collection being iterated over. . for i in numbers: for j in numbers: print(i,j) . Space . This function takes two matrices matrix1 and matrix2 as input and returns their product as a new matrix. The function creates a new matrix result with dimensions m by n to store the product of the input matrices. The size of result depends on the size of the input matrices, so the space complexity of this function is O(n^2). As the size of the input matrices increases, the amount of memory required to execute the function also increases quadratically. . def multiply_matrices(matrix1, matrix2): m = len(matrix1) n = len(matrix2[0]) result = [[0] * n] * m #this creates the new matrix based on the size of matrix 1 and 2 for i in range(m): for j in range(n): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result print(multiply_matrices([[1,2],[3,4]], [[3,4],[1,2]])) . Logarithmic O(logn) . Time . An example of a log time algorithm is binary search. Binary search is an algorithm that searches for a specific element in a sorted list by repeatedly dividing the search interval in half. As a result, the time taken to complete the search grows logarithmically with the size of the list. Hence, the time complexity of this operation is O(log n), where n is the size of the list being searched. . def binary_search(arr, low, high, target): while low &lt;= high: mid = (low + high) // 2 #integer division if arr[mid] == target: return mid elif arr[mid] &lt; target: low = mid + 1 else: high = mid - 1 target = 263 result = binary_search(numbers, 0, len(numbers) - 1, target) print(result) . Space . The same algorithm above has a O(logn) space complexity. The function takes an array arr, its lower and upper bounds low and high, and a target value target. The function searches for target within the bounds of arr by recursively dividing the search space in half until the target is found or the search space is empty. The function does not create any new data structures that depend on the size of arr. Instead, the function uses the call stack to keep track of the recursive calls. Since the maximum depth of the recursive calls is O(logn), where n is the size of arr, the space complexity of this function is O(logn). As the size of arr increases, the amount of memory required to execute the function grows logarithmically. . Exponential O(2^n) . Time . An example of an O(2^n) algorithm is the recursive implementation of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. The recursive implementation of the Fibonacci sequence calculates each number by recursively calling itself with the two preceding numbers until it reaches the base case (i.e., the first or second number in the sequence). The algorithm takes O(2^n) time in the worst case because it has to calculate each number in the sequence by making two recursive calls. . def fibonacci(n): if n &lt;= 1: return n else: return fibonacci(n-1) + fibonacci(n-2) #print(fibonacci(5)) #print(fibonacci(10)) #print(fibonacci(20)) print(fibonacci(30)) #print(fibonacci(40)) . 832040 . Space . This function takes a set s as input and generates all possible subsets of s. The function does this by recursively generating the subsets of the set without the first element, and then adding the first element to each of those subsets to generate the subsets that include the first element. The function creates a new list for each recursive call that stores the subsets, and each element in the list is a new list that represents a subset. The number of subsets that can be generated from a set of size n is 2^n, so the space complexity of this function is O(2^n). As the size of the input set increases, the amount of memory required to execute the function grows exponentially. . def generate_subsets(s): if not s: return [[]] subsets = generate_subsets(s[1:]) return [[s[0]] + subset for subset in subsets] + subsets print(generate_subsets([1,2,3])) #print(generate_subsets(numbers)) . [[1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2], [3], []] . Using the time library, we are able to see the difference in time it takes to calculate the fibonacci function above. . Based on what is known about the other time complexities, hypothesize the resulting elapsed time if the function is replaced. | . import time start_time = time.time() print(fibonacci(34)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) start_time = time.time() print(fibonacci(35)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) . Hacks . Record your findings when testing the time elapsed of the different algorithms. I found out that when you increase the input of a function you also incrase the space taken which results in the amount of time taken to produce the output. | . | Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. Do some basic research on the different types of sorting algorithms and their time complexity. Bubble Sort: Time Complexity: O(n^2), Iterate through the array and swap adjacent elements if they are in the wrong order. | Insertion Sort: Time Complexity: O(n^2), Iterates through the array and inserts each element into its correct position in a sorted sub-array. | Selection Sort: Time Complexity: O(n^2), Finds the smallest element in the array and swaps it with the first element. Then, it finds the next smallest element and swaps it with the second element and keeps doing that. | . | Why is time and space complexity important when choosing an algorithm? It helps you create a program which runs more efficently and is more enjoyable to program because of the amount of space it takes and time it takes to run. | . | Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? In a constant time algorithm it always take the first item and so on. An exponential time algorithm uses the fibonacci sequence which is N+N-1. | . | What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? Looping, Recursion, Operations, Data Structures, Input size | . | . . Complete the Time and Space Complexity analysis questions linked below. Practice . . What is the time, and space complexity of the following code: | . int a = 0, b = 0; . for (i = 0; i &lt; N; i++) { . a = a + rand(); . } . for (j = 0; j &lt; M; j++) { b = b + rand(); . } . . ANSWER: O(N + M) time, O(1) space . First loop is O(N), Second loop is O(M) . . What is the time complexity of the following code: | . a = 0 . for i in range(N): . for j in reversed(range(i, N)): . a = a + i + j . . ANSWER: O(N*N) . Time to complete algorithm grows quadratically with size of collection . . What is the time complexity of the following code: | . k = 0; for i in range(n//2,n): #iterates over the second half of the range from &quot;n//2&quot; to &quot;n&quot;. for j in range(2,n,pow(2,j)): #the step size, &quot;pow(2,j)&quot;, finds the 2^&quot;j&quot;. So, the step size of the loop doubles with each iteration. k = k + n / 2; . . ANSWER: O(N log N) . The first statement is N, The second for statement is logN. pow(2,j) represents the step size so for each iteration of the second for, j increases until 2^j = n which means that j = log(2)n. . . What does it mean when we say that an algorithm X is asymptotically more efficient than Y? | . ANSWER: X will always be a better choice for large inputs . X&#39;s input size will infinitely grow, therefore it&#39;ll eventually be bigger than Y. . . What is the time complexity of the following code: | . a = 0 . i = N . while (i &gt; 0): . a += i # adds the current value of &quot;i&quot; to the value of &quot;a&quot; and assigns the result to &quot;a&quot;. . i //= 2 #divides &quot;i&quot; by 2 and assigns result to &quot;i&quot;. halves &quot;i&quot; in each iteration of the loop. . . ANSWER: O(log N) . Value of &quot;i&quot; cuts in half and is added to the variable &quot;a&quot;. As &quot;i&quot; keeps halving, it reaches 0 eventually. . . Which of the following best describes the useful criterion for comparing the efficiency of algorithms? | . ANSWER: Both time and memory. . . How is time complexity measured? | . ANSWER: By counting the number of primitive operations performed by the algorithm on a given input size. . . What will be the time complexity of the following code? | . for i in range(n): . i=i*k . . ANSWER: O(logk(n)) . . What will be the time complexity of the following code? | value = 0; . for i in range(n): #iterates &quot;n&quot; times, with &quot;i&quot; taking on values from 0 to n-1. . for j in range(i): # iterates &quot;i&quot; times, with &quot;j&quot; taking on values from 0 to i-1. . value=value+1 . . ANSWER: n(n-1) . .",
            "url": "https://qaisj1.github.io/quissite/2023/03/22/DS-spacetimehacks.html",
            "relUrl": "/2023/03/22/DS-spacetimehacks.html",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "College Board Quiz 03/22/2023",
            "content": ". Questions I Got Wrong: . Question 21 . . . What I Answered: . B,C . Correct Answer: . B,D . Reflection . Honestly I wasn&#39;t expecting to get this good of a grade. I usually get like 70-80%. I think these questions were pretty straight forward and simple unlike some other questions which were on the other quizzes. This quiz was also a lot less stressful because it was less questions meaning it takes less time to answser all the questions. I don&#39;t have any good reasons for why I got question 24 wrong, just that during the time I was taking the quiz that was my thought proccess. .",
            "url": "https://qaisj1.github.io/quissite/2023/03/22/CBQC.html",
            "relUrl": "/2023/03/22/CBQC.html",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? Defines the way data is organized and also shows how it is accessed and changed by user inputs . What is the purpose of identity Column in SQL database? Primary key to establish relationships between tables | What is the purpose of a primary key in SQL database? Makes sure no two rows are the same | What are the Data Types in SQL table? Some data types are integer, real, and text. They all have different requirements | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? Provides multiples methods which can be used to connect to a database, execute SQL statements, or manage a transaction | Same for cursor object? The cursor object provides methods to execute SQL statements, fetch rows, and navigate the result set. | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? The connection object has attributes for the name of the connected database, the user used to connect to the database, the host or IP address of the database server, and the port number used to connect to the database server. The cursor object has attributes for the list of tuples that describe the columns in the current result set and the number of rows affected by the last SQL statement. | Is &quot;results&quot; an object? How do you know? Yes there are attributes for it. | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$U5NRDaxfu0z78MAN$de4e8c1ec5ac8853f0d53af88f26749579e645e4f4e72adf8ffd5090c1e9243e&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$AbWrZWR0lmd2j2mw$0a5cf0e795a8e49b8edf8c019bb8cdc074233fae022638be1a3faf164dd2d062&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$lcWnueWBuJFm3Txu$e12a93842036e2e24843692ad684fea95ac3e49b2475f65d266bd2d0896fa5d2&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$BAzmy4whcgn5jOjL$c87071f180499dc9a3cae9ba82f387fbf828598a0292b04f69af73cef28f9643&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$OSlG2sSoqcxUPDE0$d3f68fb2adb1743f2ab903bc5513d2ba6360833ac89aeca3b40e02415900211b&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$Srbw4eC1o6n1Nz5c$0c81208af17c7a6dfa50bc98f84b8992d77391df30ee71623b070050aa794b11&#39;, &#39;1921-10-21&#39;) (7, &#39;&#39;, &#39;&#39;, &#39;sha256$GA9uEPN6yOzLAq58$66a49362412b9a25e0363b0f11260412b3acf924063a39cb21e2ec85cbd5c416&#39;, &#39;2023-03-15&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? | Explain purpose of SQL INSERT. Is this the same as User init? | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | Explain try/except, when would except occur? | What code seems to be repeated in each of these examples to point, why is it repeated? | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | In the print statemements, what is the &quot;f&quot; and what does {uid} do? | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | Could you refactor this menu? Make it work with a List? | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. I added notes. . | In this implementation, do you see procedural abstraction? Yes calculate_bill() gives an answer based off the input parameters. . | In 2.4a or 2.4b lecture . Do you see data abstraction? Complement this with Debugging example. When debugging the menu and stepping into one of the hw_functions, it shows the code for them. It abstracts code. . | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. . | . | . Reference... sqlite documentation . import sqlite3 class ArrivalTable: def __init__(self): self.connection = sqlite3.connect(&#39;database.db&#39;) self.cursor = self.connection.cursor() def create_table(self): self.cursor.execute(&#39;&#39;&#39;CREATE TABLE IF NOT EXISTS Arrivals (name TEXT, house_number INT, arrival_time TEXT)&#39;&#39;&#39;) self.connection.commit() def insert_data(self, name, house_number, arrival_time): self.cursor.execute(&#39;&#39;&#39;INSERT INTO Arrivals(name, house_number, arrival_time) VALUES(?, ?, ?)&#39;&#39;&#39;, (name, house_number, arrival_time)) self.connection.commit() def close_connection(self): self.connection.close() # Usage example arrival_table = ArrivalTable() arrival_table.create_table() name = input(&quot;Enter your name: &quot;) house_number = int(input(&quot;Enter your house number: &quot;)) arrival_time = input(&quot;Enter your arrival time: &quot;) arrival_table.insert_data(name, house_number, arrival_time) arrival_table.close_connection() . How the code works . The code uses the sqlite3 module to connect to a database file called database.db. It also defines a class called ArrivalTable which has methods for creating a table, inserting data into the table, and closing the connection to the database. Finally, the code creates an instance of the ArrivalTable class, prompts the user to input their information, and inserts it into the &quot;Arrivals&quot; table in the database. .",
            "url": "https://qaisj1.github.io/quissite/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. . Flask app object . Acts as an instance for flask and can be used to control flask. It is useful for creating web applications that can handle HTTP requests and responses. . | SQLAlchemy db object . A python library which can be used to interact with relational databases. Can be used to manage database connection and database schema. . | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User Represents a user in the application. It contains various properties and methods related to the user. | db.Model inheritance Relationship between the User class and the db.Model class. The db.Model class is a class provided by the SQLAlchemy library that provides a set of methods and properties for interacting with the database. | init method | @property, @&lt;column&gt;.setter Method in Python class. It&#39;s called when an object of the class is created. In this situation the init method initializes the properties of the User class. | create, read, update, delete methods Create method creates a new user in the database, read method retrieves a user from the database, update method updates an existing user in the database, and the delete method deletes a user from the database. | . | . import datetime import json from sqlalchemy import create_engine, Column, Integer, String, Date from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Set up SQLite database engine and session engine = create_engine(&#39;sqlite:///users.db&#39;, echo=True) Session = sessionmaker(bind=engine) session = Session() # Define the User class to manage actions in the &#39;users&#39; table Base = declarative_base() class User(Base): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = Column(Integer, primary_key=True) _name = Column(String(255), unique=False, nullable=False) _uid = Column(String(255), unique=True, nullable=False) _house = Column(String(255), unique=False, nullable=False) _dateofarrival = Column(Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, house=&quot;123qwerty&quot;, dateofarrival=None): self._name = name self._uid = uid self.set_house(house) if dateofarrival is None: dateofarrival = datetime.date.today() self._dateofarrival = dateofarrival # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def house(self): return self._house[0:10] + &quot;...&quot; # because of security only show 1st characters # update house, this is conventional method used for setter def set_house(self, house): &quot;&quot;&quot;Create a hashed house.&quot;&quot;&quot; self._house = generate_password_hash(house, method=&#39;sha256&#39;) # check house parameter against stored/encrypted house def is_house(self, house): &quot;&quot;&quot;Check against hashed house.&quot;&quot;&quot; result = check_password_hash(self._house, house) return result # dateofarrival property is returned as string, a string represents date outside object @property def dateofarrival(self): dateofarrival_string = self._dateofarrival.strftime(&#39;%m-%d-%Y&#39;) return dateofarrival_string # dateofarrival setter, verifies date type before it is set or default to today @dateofarrival.setter def dateofarrival(self, dateofarrival): if isinstance(dateofarrival, str): # not a date type dateofarrival = datetime.date.today() self._dateofarrival = dateofarrival # age is calculated field, age is returned according to date of birth # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dateofarrival.year - ((today.month, today.day) &lt; (self._dateofarrival.month, self._dateofarrival.day)) . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? . Create All Tables from db Object Function that generates a database based off of schema definitions. . | User Object Constructors Function creates instance that is like a blueprint for creating user data structures that contain certain properties and methods. . | Try / Except Atlternative code paths can be taken if an error or exception ever occurs during the execution of a program. . | | . from datetime import datetime # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, house=&#39;123toby&#39;, dateofarrival=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, house=&#39;123niko&#39;, dateofarrival=datetime.today()) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, house=&#39;123lex&#39;, dateofarrival=datetime.today()) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, house=&#39;123whit&#39;, dateofarrival=datetime.today()) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dateofarrival=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dateofarrival=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and house . Comment on purpose of following User.query.filter_by This piece of code grabs an entry from the databse | user.is_house Outputs house. | | . from datetime import datetime from sqlalchemy import create_engine, Column, String, DateTime from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker engine = create_engine(&#39;sqlite:///users.db&#39;) Session = sessionmaker(bind=engine) Base = declarative_base() class User(Base): __tablename__ = &#39;users&#39; name = Column(String, nullable=False) uid = Column(String, primary_key=True) house = Column(String, nullable=False) dateofarrival = Column(DateTime, default=datetime.now) def __repr__(self): return f&quot;&lt;User(uid=&#39;{self.uid}&#39;, name=&#39;{self.name}&#39;, house=&#39;{self.house}&#39;, dateofarrival=&#39;{self.dateofarrival}&#39;)&gt;&quot; Base.metadata.create_all(engine) def initUsers(): session = Session() try: &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, house=&#39;123toby&#39;, dateofarrival=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, house=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, house=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, house=&#39;123whit&#39;) session.add_all([u1, u2, u3, u4]) session.commit() except: &quot;&quot;&quot;fails with bad or duplicate data&quot;&quot;&quot; session.rollback() raise finally: session.close() def find_by_uid(uid): session = Session() try: user = session.query(User).filter(User.uid == uid).first() except: user = None finally: session.close() return user def check_credentials(uid, house): user = find_by_uid(uid) if user == None: return False if user.house == house: return True return False . /tmp/ipykernel_623/3580829294.py:8: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9) Base = declarative_base() . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except Method that takes a uid parameter and returns the corresponding user instance from the database if it exists. The try/except block is used to output no results if the user doesn&#39;t exist. | user = User(...) Method which creates a new instance of the User class and initializes its attributes with the values passed as arguments. | user.dateofarrival and try/except Method that represents the date of birth of the user. The try/except block is used to catch any ValueError exceptions that might be raised if the dateofarrival argument passed to the User Constructor if the date isn&#39;t valid. | user.create() and try/except Method that inserts a new row into the users table in the database with the values of the attributes of the User instance. The try/except block is used to catch any IntegrityError exceptions that might be raised if there is a unique constraint violation when inserting the new row. | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) house = input(&quot;Enter your house&quot;) # Initialize User object before date user = User(name=name, uid=uid, house=house ) # create user.dateofarrival, fail with today as dateofarrival dateofarrival = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dateofarrival = datetime.strptime(dateofarrival, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dateofarrival = datetime.today() print(f&quot;Invalid date {dateofarrival} require YYYY-mm-dd, date defaulted to {user.dateofarrival}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . 2023-03-19 22:03:50,811 INFO sqlalchemy.engine.Engine BEGIN (implicit) 2023-03-19 22:03:50,816 INFO sqlalchemy.engine.Engine SELECT user.id AS user_id, user.name AS user_name, user.uid AS user_uid, user.house AS user_house, user.dateofarrival AS user_dateofarrival FROM user WHERE user.uid = ? LIMIT ? OFFSET ? 2023-03-19 22:03:50,818 INFO sqlalchemy.engine.Engine [generated in 0.00206s] (&#39;1910020&#39;, 1, 0) 2023-03-19 22:03:50,821 INFO sqlalchemy.engine.Engine ROLLBACK Unknown error uid {uid} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all SQalchemy method that returns all user information from table. | json_ready assignment, google List Comprehension The json_ready variable is assigned the result of the list comprehension. The list comprehension iterates over each User object in the list returned by User.query.all(), and creates a dictionary for each user. | | . from flask import Flask from flask_sqlalchemy import SQLAlchemy from datetime import datetime app = Flask(__name__) app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;sqlite:///users.db&#39; db = SQLAlchemy(app) class User(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(50), nullable=False) uid = db.Column(db.String(50), nullable=False) house = db.Column(db.String(50), nullable=False) dateofarrival = db.Column(db.DateTime, default=datetime.utcnow) def read(self): return { &#39;name&#39;: self.name, &#39;uid&#39;: self.uid, &#39;house&#39;: self.house, &#39;dateofarrival&#39;: self.dateofarrival.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;) } with app.app_context(): db.create_all() def read_users(): with app.app_context(): users = [] for user in User.query.all(): users.append(user.read()) return users users = read_users() print(users) . [] . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. I added the notes and answers for each question. . | Change blog to your own database. . | Add additional CRUD . Add Update functionality to this blog. | Add Delete functionality to this blog. | . | .",
            "url": "https://qaisj1.github.io/quissite/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "2.3 Hacks",
            "content": "Dataset . [ { &quot;name&quot;: &quot;Qais&quot;, &quot;age&quot;: 16, &quot;location&quot;: &quot;Japan&quot;, &quot;house&quot;: &quot;house 5&quot; }, { &quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 30, &quot;location&quot;: &quot;Cancun&quot;, &quot;house&quot;: &quot;house 4&quot; }, { &quot;name&quot;: &quot;Josh&quot;, &quot;age&quot;: 42, &quot;location&quot;: &quot;India&quot;, &quot;house&quot;: &quot;house 3&quot; }, { &quot;name&quot;: &quot;Bilal&quot;, &quot;age&quot;: 35, &quot;location&quot;: &quot;Mexico&quot;, &quot;house&quot;: &quot;House 2&quot; }, { &quot;name&quot;: &quot;Zteven&quot;, &quot;age&quot;: 28, &quot;location&quot;: &quot;Russia&quot;, &quot;house&quot;: &quot;House 1&quot; } ] . [{&#39;name&#39;: &#39;Qais&#39;, &#39;age&#39;: 16, &#39;location&#39;: &#39;Japan&#39;, &#39;house&#39;: &#39;house 5&#39;}, {&#39;name&#39;: &#39;Bob&#39;, &#39;age&#39;: 30, &#39;location&#39;: &#39;Cancun&#39;, &#39;house&#39;: &#39;house 4&#39;}, {&#39;name&#39;: &#39;Josh&#39;, &#39;age&#39;: 42, &#39;location&#39;: &#39;India&#39;, &#39;house&#39;: &#39;house 3&#39;}, {&#39;name&#39;: &#39;Bilal&#39;, &#39;age&#39;: 35, &#39;location&#39;: &#39;Mexico&#39;, &#39;house&#39;: &#39;House 2&#39;}, {&#39;name&#39;: &#39;Zteven&#39;, &#39;age&#39;: 28, &#39;location&#39;: &#39;Russia&#39;, &#39;house&#39;: &#39;House 1&#39;}] . import pandas as pd # Create a dataframe from the JSON data data = [ { &quot;name&quot;: &quot;Qais&quot;, &quot;age&quot;: 16, &quot;location&quot;: &quot;Japan&quot;, &quot;house&quot;: &quot;house 5&quot; }, { &quot;name&quot;: &quot;Bob&quot;, &quot;age&quot;: 30, &quot;location&quot;: &quot;Cancun&quot;, &quot;house&quot;: &quot;house 4&quot; }, { &quot;name&quot;: &quot;Josh&quot;, &quot;age&quot;: 42, &quot;location&quot;: &quot;India&quot;, &quot;house&quot;: &quot;house 3&quot; }, { &quot;name&quot;: &quot;Bilal&quot;, &quot;age&quot;: 35, &quot;location&quot;: &quot;Mexico&quot;, &quot;house&quot;: &quot;House 2&quot; }, { &quot;name&quot;: &quot;Zteven&quot;, &quot;age&quot;: 28, &quot;location&quot;: &quot;Russia&quot;, &quot;house&quot;: &quot;House 1&quot; } ] df = pd.DataFrame(data) # Extract information using Pandas functions print(&quot;Maximum age:&quot;, df[&quot;age&quot;].max()) print(&quot;Minimum age:&quot;, df[&quot;age&quot;].min()) print(&quot;Mean age:&quot;, df[&quot;age&quot;].mean()) print(&quot;Median age:&quot;, df[&quot;age&quot;].median()) print(&quot;Mode of age:&quot;, df[&quot;age&quot;].mode()[0]) # mode() returns a Series, so we need to extract the first element . Maximum age: 42 Minimum age: 16 Mean age: 30.2 Median age: 30.0 Mode of age: 16 . Code blocks . Code blocks for max age, minimum age, mean age, median age, and mode of age. . max_age = df[&#39;age&#39;].max() print(&#39;Maximum age:&#39;, max_age) . Maximum age: 42 . min_age = df[&#39;age&#39;].min() print(&#39;Minimum age:&#39;, min_age) . Minimum age: 16 . mean_age = df[&#39;age&#39;].mean() print(&#39;Mean age:&#39;, mean_age) . Mean age: 30.2 . median_age = df[&#39;age&#39;].median() print(&#39;Median age:&#39;, median_age) . Median age: 30.0 . mode_age = df[&#39;age&#39;].mode() print(&#39;Mode of ages:&#39;, mode_age) . Mode of ages: 0 16 1 28 2 30 3 35 4 42 Name: age, dtype: int64 .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2023/03/12/23.html",
            "relUrl": "/jupyter/2023/03/12/23.html",
            "date": " • Mar 12, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "College Board Quiz Corrections",
            "content": "I got a 39/50. . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;MCQ.jpg&quot;}, ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image # display default images from image_data() default_images = image_data() image_display(default_images) . Review over questions I got wrong: . Question 9 | . A Web site uses several strategies to prevent unauthorized individuals from accessing user accounts. Which of the following is NOT an example of multifactor authentication? . A (Answer I Chose) Each employee for a company is issued a USB device that contains a unique token code. To log into a company computer, an employee must insert the USB device into the computer and provide a correct password. . B After logging into an account from a new device, a user must enter a code that is sent via e-mail to the e-mail address on file with the account. . C In order to log into an account, a user must provide both a password and a fingerprint that is captured using the user’s device. . D (Correct Answer) When a user enters an incorrect password more than two times in a row, the user is locked out of the account for 24 hours. . . Question 22 | . Two grids are shown below. Each grid contains a robot represented as a triangle. Both robots are initially facing left. Each robot can move into a white or gray square, but cannot move into a black region. . Two grids are shown, each three boxes across and five boxes high. The grid on the left is labeled Grid 1 and the grid on the right is labeled Grid 2. Each grid has a grey square in the upper left corner and an arrow pointing to the left in the square in the lower right corner. In Grid 1 the first two squares in the second row and the last two squares in the fourth row are black. In Grid 2 the first and third squares in the second row, the third square in the third row, and the last two squares in the fourth row are black. The remaining squares are white in both grids. . For each grid, the program below is intended to move the robot to the gray square. The program uses the procedure Goal_Reached ( ), which evaluates to true if the robot is in the gray square and evaluates to false otherwise. . A coding program reads as follows. Line 1: Repeat until left parenthesis Goal underscore Reached left parenthesis right parenthesis right parenthesis. Line 2: Left curly bracket. Line 3: If left parenthesis can underscore move open parenthesis right close parenthesis. Line 4: Left curly bracket. Line 5: Rotate underscore right left parenthesis right parenthesis. Line 6: Right curly bracket. Line 7: Else. Line 8: Left curly bracket. Line 9: If left parenthesis can underscore move left parenthesis left right parenthesis right parenthesis. Line 10: Left curly bracket. Line 11: Rotate underscore left parenthesis right parenthesis. Line 12: Right curly bracket. Line 13: Right curly bracket. Line 14: If left parenthesis can underscore move left parenthesis forward right parenthesis right parenthesis. Line 15: Left curly bracket. Line 16: Move underscore forward left parenthesis right parenthesis. Line 17: Right parenthesis. . For which of the grids does the program correctly move the robot to the gray square? . A (Correct Answer) Grid I only . B Grid II only . C Both grid I and grid II . D (Answer I chose) Neither grid I nor grid II . . Question 28 | . Consider the following procedures for string manipulation. . Procedure Call Explanation concat(str1, str2) Returns a single string consisting of str1 followed by str2. For example, concat(&quot;key&quot;, &quot;board&quot;) returns &quot;keyboard&quot;. substring(str, start, length) Returns a substring of consecutive characters from str, starting with the character at position start and containing length characters. The first character of str is located at position 1. For example, substring(&quot;delivery&quot;, 3, 4) returns &quot;live&quot;. len(str) Returns the number of characters in str. For example, len(&quot;pizza&quot;) returns 5. Assume that the string oldString contains at least 4 characters. A programmer is writing a code segment that is intended to remove the first two characters and the last two characters from oldString and assign the result to newString. . For example, if oldString contains &quot;student&quot;, then newString should contain &quot;ude&quot;. . Which of the following code segments can be used to assign the intended string to newString ? . Select two answers. . A (Correct Answer) newString ← substring(oldString, 3, len(oldString) - 4) . B newString ← substring(oldString, 3, len(oldString) - 2) . C tempString ← substring(oldString, 3, len(oldString) - 2) . newString ← substring(tempString, 1, len(tempString) - 2) . D (Correct Answer) tempString1 ← substring(oldString, 1, 2) . tempString2 ← substring(oldString, len(oldString) - 2, 2) . newString ← concat(tempString1, tempString2) . I didn&#39;t really understand what this question was asking. . . Question 29 | . Consider the following code segment. . The figure presents eight blocks of code that consist of 8 total lines. Line 1: [begin block] a ← true [end block] Line 2: [begin block] b ← false [end block] Line 3: [begin block] c ← true [end block] Line 4: [begin block] a ← [begin block] NOT [begin block] a OR b [end block] [end block] AND c [end block] Line 5: [begin block] c ← c AND a [end block] Line 6: [begin block] DISPLAY [begin block] a [end block] [end block] Line 7: [begin block] DISPLAY [begin block] b [end block] [end block] Line 8: [begin block] DISPLAY [begin block] c [end block] [end block] What is displayed as a result of executing the code segment? . A true true true . B (Correct Answer) false false false . C true false true . D (Answer I chose) false false true . . Question 33 | . The following grid contains a robot represented as a triangle, which is initially facing right. . The figure presents a robot in a 6 by 6 grid of squares. The robot is represented by a triangle, which is initially in the third square from the left in the fifth row, facing right. The third row contains gray shading in the third square from the left. The following code segment is intended to move the robot to the gray square. . { . REPEAT 4 TIMES . { . MOVE_FORWARD() . ROTATE_RIGHT() . } . ROTATE_LEFT() . MOVE_FORWARD() . ROTATE_RIGHT() . } . Which of the following can be used as a replacement for so that the code segment works as intended?&lt;/p&gt; A REPEAT 1 TIMES . B (Correct Answer) REPEAT 2 TIMES . C REPEAT 3 TIMES . D (Answer I chose) REPEAT 4 TIMES . . Question 38 | . Consider the following code segment with an integer variable num. . IF(num &gt; 0) . { . DISPLAY(&quot;positive&quot;) . } . IF(num &lt; 0) . { . DISPLAY(&quot;negative&quot;) . } . IF(num = 0) . { . DISPLAY(&quot;zero&quot;) . } . Which of the following code segments is equivalent to the code segment above? . A (Answer I chose) IF(num &lt; 0) . { . DISPLAY(&quot;negative&quot;) . } . ELSE . { . DISPLAY(&quot;positive&quot;) . } . IF(num = 0) . { . DISPLAY(&quot;zero&quot;) . } . B (Correct Answer) IF(num &lt; 0) . { . DISPLAY(&quot;negative&quot;) . } . ELSE . { . IF(num = 0) . { . DISPLAY(&quot;zero&quot;) . } . ELSE . { . DISPLAY(&quot;positive&quot;) . } . } . C IF(num ≤ 0) . { . DISPLAY(&quot;negative&quot;) . } . ELSE . { . IF(num = 0) . { . DISPLAY(&quot;zero&quot;) . } . ELSE . { . DISPLAY(&quot;positive&quot;) . } . } . D IF(num ≤ 0) . { . DISPLAY(&quot;negative&quot;) . } . IF(num = 0) . { . DISPLAY(&quot;zero&quot;) . } . ELSE . { . DISPLAY(&quot;positive&quot;) . } . . Question 39 | . The following question uses a robot in a grid of squares. The robot is represented as a triangle, which is initially facing toward the top of the grid. . The figure presents a robot in a 5 by 5 grid of squares. The robot is represented by a triangle, which is initially located in the second square from the left in the fourth row, facing upward. The following code segment moves the robot around the grid. Assume that n is a positive integer. . Line 1: count ← 0 . Line 2: REPEAT n TIMES . Line 3: { . Line 4: REPEAT 2 TIMES . Line 5: { . Line 6: MOVE_FORWARD() . Line 7: } . Line 8: ROTATE_RIGHT() . Line 9: } . Consider the goal of modifying the code segment to count the number of squares the robot visits before execution terminates. Which of the following modifications can be made to the code segment to correctly count the number of squares the robot moves to? . A (Correct Answer) Inserting the statement count ← count + 1 between line 6 and line 7 . B (Answer I chose) Inserting the statement count ← count + 2 between line 6 and line 7 . C Inserting the statement count ← count + 1 between line 8 and line 9 . D Inserting the statement count ← count + n between line 8 and line 9 . . Question 40 | . The following grid contains a robot represented as a triangle, which is initially in the bottom-left square of the grid and facing the top of the grid. The robot can move into a white or a gray square but cannot move into a black region. . The figure presents a robot in a 5 by 5 grid of squares. The robot is represented by a triangle, which is located in the bottom leftmost square and is initially facing upward. Black squares represent barriers that the robot cannot pass through. The first row contains black shading in the first, second, third, and fourth squares from the left and gray shading in the fifth square from the left. The second row contains black shading in the first, second, third, and fourth squares from the left. The fourth row contains black shading in the second, third, fourth, and fifth squares from the left. The fifth row contains black shading in the second, third, fourth and fifth squares from the left. The following code segment implements an algorithm that moves the robot from its initial position to the gray square and facing the top of the grid. . The figure presents five blocks of code that consist of 8 total lines. Throughout the first, third, and fifth blocks of code are nested blocks of code. [begin block] Line 1: REPEAT 2 TIMES [begin block] Line 2: [begin block] MOVE_FORWARD [end block] [end block] [end block] Line 3: [begin block] ROTATE_RIGHT [end block] [begin block] Line 4: REPEAT 4 TIMES [begin block] Line 5: [begin block] MOVE_FORWARD [end block] [end block] [end block] Line 6: [begin block] ROTATE_LEFT [end block] [begin block] Line 7: REPEAT 2 TIMES [begin block] Line 8: [begin block] MOVE_FORWARD [end block] [end block] [end block] When the robot reaches the gray square, it turns around and faces the bottom of the grid. Which of the following changes, if any, should be made to the code segment to move the robot back to its original position in the bottom-left square of the grid and facing toward the bottom of the grid? . A (Answer I chose) Interchange the ROTATE_RIGHT and the ROTATE_LEFT blocks. . B Replace ROTATE_RIGHT with ROTATE_LEFT. . C Replace ROTATE_LEFT with ROTATE_RIGHT. . D (Correct Answer) No change is needed; the algorithm is correct as is. . . Question 42 | . Suppose that a list of numbers contains values [-4, -1, 1, 5, 2, 10, 10, 15, 30]. Which of the following best explains why a binary search should NOT be used to search for an item in this list? . A The list contains both positive and negative elements. . B (Correct Answer) The elements of the list are not sorted. . C The list contains an odd number of elements. . D (Answer I chose) The list contains duplicate elements. . I didn&#39;t see that the 5 was before the 2. . . Question 49 | . A city planner is using simulation software to study crowd flow out of a large arena after an event has ended. The arena is located in an urban city. Which of the following best describes a limitation of using a simulation for this purpose? . A (Answer I chose) The model used by the simulation software cannot be modified once the simulation has been used. . B (Correct Answer) The model used by the simulation software often omits details so that it is easier to implement. . C Running a simulation requires more time to generate data from trials than observing the crowd exiting the arena at various events. . D Running a simulation requires a large number of observations to be collected before it can be used to explore a problem. . . Question 50 | . A computer scientist is analyzing four different algorithms used to sort a list. The table below shows the number of steps each algorithm took to sort lists of different sizes. . List Size Number of Steps . for Algorithm A . Number of Steps . for Algorithm B . Number of Steps . for Algorithm C . Number of Steps . for Algorithm D . 1 10 2 1 1 2 20 4 2 4 3 30 8 6 9 4 40 16 24 16 5 50 32 120 25 Based on the values in the table, which of the algorithms appear to run in reasonable time? . Select two answers. . A (Correct Answer) Algorithm A . B (Answer I chose) Algorithm B . C Algorithm C . D (Correct Answer) Algorithm D . Reflection . There isn&#39;t much to reflect over. I thought I did well on the quiz but unfortunately I did not. I will use these mistakes to better myself moving forward. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; .",
            "url": "https://qaisj1.github.io/quissite/twotwo",
            "relUrl": "/twotwo",
            "date": " • Mar 8, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;Smiley.jpg&quot;}, ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image # display default images from image_data() default_images = image_data() image_display(default_images) . Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. . Clouds Impression | Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Displaying images in Python Jupyter notebook . Python Libraries and Concepts used for Jupyter and Files/Directories . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? &quot;is&quot; | What are the command you use in Windows terminal to access files? &quot;dir&quot; | What are some of the major differences? dir sorts files in an efficent manner | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? Makes images easier to use | How does the meta data source and label relate to Unit 5 topics? Sorts attributes of information it provides | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? It can modify image data by adjusting its visual characteristics such as size, color, and scale. Using Pandas allows the user to manipulate data. It can also alter data based on specific criteria. | . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? Converts binary encoded data into a coded text. Binary and Hexadecimal represent data in their original binary form and a human readable form. . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? Buffering can lead to delays or lag in data transfer or playback, and can cause buffering or loading screens to appear | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? Buffering may cause the image to load slower or appear pixelated if it is a large file that takes longer to transfer. | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? The program prepares a series of images and performs operations on them such as setting properties, scaling, converting to base64, and creating a gray scale representation. | Describe Grey Scale algorithm in English or Pseudo code? The Grey Scale algorithm takes an RGB pixel value, averages its red, green, and blue components, and sets all three components to the same average value to create a gray scale representation. | Describe scale image? What is before and after on pixels in three images? Scale image resizes the image to a base width of 320 pixels while maintaining its aspect ratio, resulting in a smaller scaled image with the same aspect ratio as the original. Before scaling, the image is represented by a matrix of pixels, and after scaling, the image is still represented by a matrix of pixels but with a smaller resolution. | Is scale image a type of compression? If so, line it up with College Board terms described? Scale image can be considered a type of lossy compression as it reduces the resolution of the image, resulting in a loss of detail. This aligns with the College Board term &quot;data compression,&quot; which refers to techniques used to reduce the amount of data required to represent digital media while maintaining an acceptable level of quality. | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . FileNotFoundError Traceback (most recent call last) /home/qaisjamili/vscode/quissite/_notebooks/2023-03-07-AP-unit2-2.ipynb Cell 8 in &lt;cell line: 76&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-03-07-AP-unit2-2.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=79&#39;&gt;80&lt;/a&gt; # Display meta data, scaled view, and grey scale for each image &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-03-07-AP-unit2-2.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=80&#39;&gt;81&lt;/a&gt; for image in images: &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-03-07-AP-unit2-2.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=81&#39;&gt;82&lt;/a&gt; image_management(image) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-03-07-AP-unit2-2.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=82&#39;&gt;83&lt;/a&gt; print(&#34;- meta data --&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-03-07-AP-unit2-2.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=83&#39;&gt;84&lt;/a&gt; print(image[&#39;label&#39;]) /home/qaisjamili/vscode/quissite/_notebooks/2023-03-07-AP-unit2-2.ipynb Cell 8 in image_management(image) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-03-07-AP-unit2-2.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=35&#39;&gt;36&lt;/a&gt; def image_management(image): # path of static images is defaulted &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-03-07-AP-unit2-2.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=36&#39;&gt;37&lt;/a&gt; # Image open return PIL image object &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-03-07-AP-unit2-2.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=37&#39;&gt;38&lt;/a&gt; img = pilImage.open(image[&#39;filename&#39;]) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-03-07-AP-unit2-2.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=39&#39;&gt;40&lt;/a&gt; # Python Image Library operations &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/qaisjamili/vscode/quissite/_notebooks/2023-03-07-AP-unit2-2.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=40&#39;&gt;41&lt;/a&gt; image[&#39;format&#39;] = img.format File ~/anaconda3/lib/python3.9/site-packages/PIL/Image.py:2953, in open(fp, mode, formats) 2950 filename = fp 2952 if filename: -&gt; 2953 fp = builtins.open(filename, &#34;rb&#34;) 2954 exclusive_fp = True 2956 try: FileNotFoundError: [Errno 2] No such file or directory: &#39;/home/qaisjamili/vscode/quissite/_notebooks/images/lassen-volcano.jpg&#39; . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL:Provides functionality to work with images in Python, including opening, manipulating, and saving images in various file formats.- numpy: Provides support for large, multi-dimensional arrays and matrices, along with a large collection of mathematical functions to operate on these arrays. | base64: Provides functionality to encode and decode binary data using Base64 encoding, which is often used to transfer binary data over text-based protocols such as email or HTTP. | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpeg&quot;}, {&#39;source&#39;: &quot;Google&quot;, &#39;label&#39;: &quot;Happy Face&quot;, &#39;file&#39;: &quot;Smiley.jpeg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano.jpeg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . - meta data -- Happy Face Google Smiley.jpeg JPEG RGB Original size: (200, 200) Scaled size: (320, 320) -- scaled image -- . grey image . . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2023/03/07/AP-unit2-2.html",
            "relUrl": "/jupyter/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "N@TM",
            "content": "My N@TM Experience . My experience at Night at the Musuem was really fun. I enjoyed socializing with my peers and seeing their hardwork come to life.I also liked explaining my groups project to people. I especially liked presenting my function. I saw many interesting projects made by other. Alongside seeing these projects, I was able to try them out and ask about the time and effort put into the work. The teachers were also present, offering constructive feedback and praising the hard work of the participants. The event gave me a chance to learn new skills and techniques from other participants, which I plan to incorporate into my future projects.Through N@TM I’ve come to a realization that you are able to see how much thought and creativity it takes to create a website that can be of use for the real world. I took pictures of a few of the pieces which were put onto display. . . Before exploring the photography classroom I was never really interested in photography but after seeing this picture of the beach I feel obligated to learn more. I like how the photo puts in you into someone elses shoes and shows you how they perceive the beach . . This website was really cool to play around with because it relates to fitness which is something I am very fond of. My friend helped create this website and I’ve heard him talk about it a lot so it was really nice to see what he’s been putting his time into. This website has many intreguing features such as a BMI calculator and a calorie management feature. . . I’ve seen a snake game before so seeing this wasn’t super interesting. I did like hearing about the process they took to make it and how each group member contributed. The scoring, controls, settings, and appearance were all such simple things to look at but the code for it was really advanced. . . This is Eli’s group project and it is for car rentals. I really liked their format of the website and I thought the idea of car rentals was unique and useful. The input with the api’s were all working effectively and I think its a good project possibly one of my favorites. .",
            "url": "https://qaisj1.github.io/quissite/markdown/2023/02/24/NATM.html",
            "relUrl": "/markdown/2023/02/24/NATM.html",
            "date": " • Feb 24, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "COLLEGE BOARD QUIZ",
            "content": "This is my score. I thought I did better but I got 14 questions wrong. .",
            "url": "https://qaisj1.github.io/quissite/markdown/2023/01/30/collegeboardquiz.html",
            "relUrl": "/markdown/2023/01/30/collegeboardquiz.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "Beneficial and Harmful Effects of Computing",
            "content": "Come up with three of your own Beneficial and Corresponding Harmful Effects of Computing. . Beneficial Effect: Increased productivity and efficiency through automation of tasks and access to vast amounts of information. | Harmful Effect: Dependence on technology leading to loss of important job skills and a decrease in critical thinking. . | Beneficial Effect: Improved communication and connectivity through the use of social media and other online platforms. . | Harmful Effect: Increased spread of misinformation and potential for cyberbullying and online harassment. . | Beneficial Effect: Advancements in medical technology and research through the use of computing and data analysis. . | Harmful Effect: Privacy concerns and potential for discrimination based on genetic or health information stored in digital databases. | . Talk about dopamine issues above. Real? Parent conspiracy? Anything that is impacting your personal study and success in High School? . Dopamine is a neurotransmitter that plays a crucial role in the brain&#39;s reward and motivation system. Research has shown that imbalances in dopamine levels can contribute to a variety of mental health disorders, including ADHD, depression, and addiction. I think that it is important to know that these disorders are complex and are likely caused by a combination of genetic, environmental, and lifestyle factors. When achieving something in school I feel less dopamine due to the fact that I am so used to the intake of dopamine from technology. . How does someone empower themself in a digital world? . Educate yourself about technology and the internet . | Build a positive online presence . | Learn new skills . | Take control of your personal data . | . How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS. . An empowered individual can help someone who is not empowered by sharing their knowledge, skills, and resources by mentoring a student, creating a peer support group, volunteering in the classroom like Theo, and by sharing your experiences with people who faced or are facing the same problems as you. | . Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? . I don&#39;t really understand this question but I definetly think there are some rules which limit people from gaining digital power. Some of the barriers at Del Norte, I think involve limited access to training, support, and website (blocked by the school) | .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2023/01/24/BeneficialandHarmful.html",
            "relUrl": "/jupyter/2023/01/24/BeneficialandHarmful.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "Performance Task Scoring 3",
            "content": "Submission 1 . Reporting Category Score Student Comments . Program Purpose and Function | 1 | Program purpose, functionality, input, and output are clearly given. | . Data Abstraction | 0 | 2 of 3 criteria is not met. Both code segments are provided, but second segmentis not acessing data from the list. | . Managing Complexity | 0 | Does not manage the complexity. | . Procedural Abstraction | 0 | Missing data abstraction and complexity management. The parameter passes through the series of If, Else if statements and results in a different output depending on both the user’s input and the computer’s input. | . Algorithm Implementation | 1 | Loop, iteration and sequencing is provided. CLearly explains program so it can be remade. | . Testing | 1 | Two calls are described. Each condition is tested and the results are described. | . Submission 2 . Reporting Category Score Student comments . Program Purpose and Function | 1 | Program purpose, functionality, input, and output are clearly given. | . Data Abstraction | 1 | Program segments are shown, the list variable is identified, and the data of the list is used in the program. | . Managing Complexity | 1 | Program had a list being used to manage complexity. Explained how the program uses the list. | . Procedural Abstraction | 1 | Student developed procedure. | . Algorithm Implementation | 1 | Loop, iteration and sequencing is provided and could be recreated. | . Testing | 1 | Two calls are described. Output clearly shows the result. | . Submission 3 . Reporting Category Score Student comments . Program Purpose and Function | 1 | Program purpose, functionality, input, and output are clearly given. | . Data Abstraction | 0 | No criteria met. | . Managing Complexity | 0 | Manages complexity but not effectively and did not explain how. | . Procedural Abstraction | 0 | Student developed procedure, but lacks data. | . Algorithm Implementation | 0 | No iteration included. | . Testing | 0 | No calls. | . Submission 4 . Reporting Category Score Student comments . Program Purpose and Function | 1 | Program purpose, functionality, input, and output are clearly given. | . Data Abstraction | 1 | Program segments are provided as well as the list variable. | . Managing Complexity | 1 | Manages complexity and explains how other ways to manage. | . Procedural Abstraction | 1 | Student developed procedure. | . Algorithm Implementation | 1 | Detailed enoguh to be recreated | . Testing | 0 | Results from calls are not very good | .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2023/01/22/gradingsubmissions.html",
            "relUrl": "/jupyter/2023/01/22/gradingsubmissions.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post27": {
            "title": "Performance Task Scoring 1",
            "content": "Sample F . Reporting Category Student Score College Board Score Student Comments . Program Purpose and Function | 1 | 0 | Provided clear explanation of what the program is meant to do and how it can function based on a users input. | . Data Abstraction | 1 | 1 | 2 segments of code are shown and an explanation of how the code is implemented into the program is given. | . Managing Complexity | 0 | 0 | This way of managing complexity is inefficent | . Procedural Abstraction | 1 | 1 | Both program code segments provided and thorougly explained. | . Algorithm Implementation | 1 | 1 | Has explanation which could allow others to recreate the program. | . Testing | 1 | 1 | Each call result given with explanations of how they are tested. | . Sample A . Reporting Category Student Score College Board Score Student Comments . Program Purpose and Function | 1 | 1 | Game&#39;s purpose is clearly explained and how it is used is explained as well. | . Data Abstraction | 1 | 1 | 2 segments of code are shown and an explanation of how the code is implemented into the program is given. | . Managing Complexity | 1 | 1 | Explains how a list is used in the program and how it is the most efficent way to manage complexity. | . Procedural Abstraction | 1 | 1 | The program code segments are given and thorougly explained. | . Algorithm Implementation | 0 | 1 | Does not provide clear information which could help recreate program. | . Testing | 1 | 1 | Each call result given with explanations of how they are tested. | .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2023/01/04/gradingforexam.html",
            "relUrl": "/jupyter/2023/01/04/gradingforexam.html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post28": {
            "title": "Grade Table",
            "content": "Lesson Grade . 3.1 &amp; 3.2 | .5/1 | . 3.3 &amp; 3.4 | .9/1 | . 3.5 - 3.7 | 0.8/1 | . 3.8 &amp; 3.10 | 0.7/1 | . 3.9 &amp; 3.11 | .9/1 | . 3.12 &amp; 3.13 | I presented | . 3.14 &amp; 3.15 | 0.95/1 | . 3.16 | .9/1 | . 3.17 &amp; 3.18 | .95/1 | .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/12/16/Gradetable.html",
            "relUrl": "/jupyter/2022/12/16/Gradetable.html",
            "date": " • Dec 16, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Lesson 17-18 Homework",
            "content": ". HACK 1 . Please write a short 1-2 sentence explanation describing the difference between decidable and undecidable problems. Make sure to provide at least one example of each. . A decidable problem is a problem which can use an algorithim in order to be solved. An undecidable problem is a problem in which no algorithm is able to be built in order to provide a solution. . . HACK 2 . Which of the following is a 3 step algorithm? . A. 2 x 6 x 8 . B. 4^5 . C. (3 x 8)^2 &lt;/p&gt; D. None of the above . E. All of the above . The first step is 3 x 8 The second step is getting the answer 24 The third step is putting 24 to the power of 2 . . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; HACK 3 Rewrite this JavaScript Code in a More Efficient Way (Hint: Use Binary Search) . function peak_finder(array){ let counter = 0 let peak = 0 let peak_index =0 while (counter &lt;= array.length){ console.log(counter) if (counter === 0){ if (a[0]&gt;=a[1]){ peak = a[0] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter+=1 } }else if(counter === array.length-1){ if (a[array.length-1] &gt;= a[array.length-2]){ peak = a[array.length-1] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` } }else{ if (a[counter]&gt; a[counter+1] &amp;&amp; a[counter]&gt; a[counter-1]){ peak = a[counter] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter += 1 } } } } . Input In [6] function peak_finder(array){ ^ SyntaxError: invalid syntax . Wasn&#39;t really sure how to do this. I thought that if I tried to edit some stuff out which weren&#39;t neccesary it would work. But after I ran it, it still wouldn&#39;t work. . function peak_finder2(array){ if (array.length)=== 0{ return `Array cannot be empty` }else if (array.length === 1){ return array[0] }else{ let mid_index = Math.floor(array.length*0.5) if (array[mid_index +1]&gt;array[mid_index]){ return peak_finding(array.slice(mid_index + 1 )) }else if (array[mid_index -1]&gt;array[mid_index]){ new=array.reverse().slice(mid_index+1).reverse() return peak_finding(new) }else{ return array[mid_index] } } } . Input In [5] function peak_finder2(array){ ^ SyntaxError: invalid syntax . . HACK 4: Rewrite this Python Code in a More Efficient Way . def merge_sort(data): if len(data) &lt;= 1: return mid = len(data) // 2 left_data = data[:mid] right_data = data[mid:] merge_sort(left_data) merge_sort(right_data) left_index = 0 right_index = 0 data_index = 0 while left_index &lt; len(left_data) and right_index &lt; len(right_data): if left_data[left_index] &lt; right_data[right_index]: data[data_index] = left_data[left_index] left_index += 1 else: data[data_index] = right_data[right_index] right_index += 1 data_index += 1 if left_index &lt; len(left_data): del data[data_index:] data += left_data[left_index:] elif right_index &lt; len(right_data): del data[data_index:] data += right_data[right_index:] if __name__ == &#39;__main__&#39;: data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] merge_sort(data) print(data) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . I got rid of the unecessary code. I just added the data and print(data) command. I also added a data sort which made it simplified overall. . data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] print(data) data.sort() print(data) . [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . HACK 5: Rewrite this Python Code in a More Efficient Way . def heap_permutation(data, n): if n == 1: print(data) return for i in range(n): heap_permutation(data, n - 1) if n % 2 == 0: data[i], data[n-1] = data[n-1], data[i] else: data[0], data[n-1] = data[n-1], data[0] if __name__ == &#39;__main__&#39;: data = [1, 2, 3] heap_permutation(data, len(data)) . [1, 2, 3] [2, 1, 3] [3, 1, 2] [1, 3, 2] [2, 3, 1] [3, 2, 1] . I was able to rewrite this code to make it more efficent by getting rid of &quot; for i in range(n): heap_permutation(data, n - 1) if n % 2 == 0: data[i], data[n-1] = data[n-1], data[i] else: data[0], data[n-1] = data[n-1], data[0]&quot; This overall resulted in the same output but with less words. . def heap_permutation(data, n): if n == 1: print(data) return from itertools import permutations perm = permutations([3,2,1]) for i in list(perm): print(i) . (3, 2, 1) (3, 1, 2) (2, 3, 1) (2, 1, 3) (1, 3, 2) (1, 2, 3) . &lt;/div&gt; .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/12/15/Lesson16.html",
            "relUrl": "/jupyter/2022/12/15/Lesson16.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Lesson 14-15 Homework",
            "content": ". Reflection . This lesson was has taught me new ways I can improve my coding skills. I can use libraries to make coding a lot more simpl and use stuff that has already been developed by others. Documentation makes my code readable. Programs use documentation to outline usage for users. The random library can be used in python which can be very handy in programs. Most programs such as videogames use randomization. . . Notes . Libraries and prewritten code can make writing algorithms easier . | Software libraries have procedures that are used in creating novel programs . | APIs(application program interfaces) explain how procedures in libraries should behave and be utilized . | Documentation makes it much easier to learn how to use libraries/APIs . | Existing code segments can be derived from existing sources . | random.randint(a, b): generates a random number . | . . Multiple Choice . What does the random(a,b) function generate? . A. A random integer from a to be exclusive . B. A random integer from a to b inclusive. &lt;/p&gt; C. A random word from variable a to variable b exclusive. . D. A random word from variable a to variable b inclusive. . Explanation: B has the integers listed . . What is x, y, and z in random.randrange(x, y, z)? . A. x = start, y = stop, z = step . B. x = start, y = step, z = stop &lt;/p&gt; C. x = stop, y = start, z = step . D. x = step, y = start, z = stop . . Which of the following is NOT part of the random library? . A. random.item &lt;/p&gt; B. random.random . C. random.shuffle . D. random.randint . Explanation: The other options are specific functions . . Short Answer Questions . What is the advantage of using libraries? We can access code that as already been developed in order to make coding something such as an algorithm less difficult. . . Write a thorough documentation of the following code. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; import random # implements list of names names_string = input(&quot;Give me everybody&#39;s names, seperated by a comma.&quot;) names = names_string.split(&quot;,&quot;) num_items = len(names) # Chooses random number random_choice = random.randint(0, num_items - 1) # puts together name and number person_who_will_pay = names[random_choice] # prints name print(f&quot;{person_who_will_pay} is going to buy the meal today!&quot;) . Jamili is going to buy the meal today! . import random score1 = 0 score2 = 0 def RandomNumberGame(): score1 = random.randint(1, 10) score2 = random.randint(1, 10) if score1 &gt; score2: print(&quot;Player 1 won with a score of &quot; + str(score1) + &quot; bananas&quot;) if score1 &lt; score2: print(&quot;Player 2 won with a score of &quot; + str(score2) + &quot; bananas&quot;) if score1 == score2: print(&quot;Player 1 and Player 2 have tied. Both have &quot; + str (score1) + &quot; bananas&quot;) RandomNumberGame() RandomNumberGame() . Player 2 won with a score of 5 bananas Player 2 won with a score of 10 bananas . import random names = [&quot;Qais&quot;, &quot;Jamili&quot;, &quot;Jamilee&quot;, &quot;Bob&quot;, &quot;Georgy&quot;, &quot;Michael&quot; ,] i = 0 print(&quot;5 random names:&quot;) while i &lt; 5: print(random.choice(names)) i += 1 . 5 random names: Bob Georgy Jamilee Qais Michael . EXTRA CREDIT . Tried my best but I don&#39;t think I did it right. . startEnd() import random width = 5 height = 5 obstacles = 10 maze = [[0 for i in range(width)] for j in range(height)] for i in range(obstacles): x = random.randint(0, width - 1) y = random.randint(0, height - 1) maze[x][y] = &#39;x&#39; startEnd() for row in maze: print(&#39; &#39;.join(str(cell) for cell in row)) . 0 0 0 x x x x 0 0 0 0 x 0 0 0 0 x 0 0 0 0 0 0 x x . &lt;/div&gt; .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/12/14/lesson14.html",
            "relUrl": "/jupyter/2022/12/14/lesson14.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Lesson 16 Homework",
            "content": ". Vocab/Notes . Simulation: A simpler abstraction of a very complicated natural phenomena Does not implement things that are to difficult to simulate | Uses less resources and better for predictions | Can use a psuedo-random number generator to represent things like roling a dice | . | . . Answer Table . Name: Ahmad Qais Jamili . 3: A: To mock imperfections from the real world . 4: B: Other aircraft . 5: C: Situation considered . 6: A: Simulation . 7: A: Simulation . 9: B: Experiment/calculation . . Extra Credit . import random print(&quot;Welcome to the guessing numbers simulation!&quot;) print(&quot;-&quot;) n = random.randrange(1,100) guess = int(input(&quot;Enter a number (1-100): &quot;)) while n!= guess: if guess &lt; n: print(&quot;Try to guess a higher number.&quot;) guess = int(input(&quot;Enter a number again: &quot;)) elif guess &gt; n: print(&quot;Go lower.&quot;) guess = int(input(&quot;Enter a number again: &quot;)) else: break print(&quot;you guessed it right!!&quot;) . Welcome to the guessing numbers simulation! - Try to guess a higher number. Try to guess a higher number. Try to guess a higher number. Try to guess a higher number. Try to guess a higher number. Try to guess a higher number. Try to guess a higher number. Try to guess a higher number. Try to guess a higher number. Go lower. Go lower. you guessed it right!! .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/12/14/Lesson15-16.html",
            "relUrl": "/jupyter/2022/12/14/Lesson15-16.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Vocabulary",
            "content": "Vocabulary . This is some vocabulary that I have learned throughout these lessons. . Variables, Data Types, Assignment Operators Managing Complexity with Variables: Lists, 2D Lists, Dictionaries, Class Algorithms, Sequence, Selection, Iteration Expressions, Comparison Operators, Booleans Expressions and Selection, Booleans Expressions and Iteration, Truth Tables Characters, Strings, Length, Concatenation, Upper, Lower, Traversing Strings Python If, Elif, Else conditionals; Nested Selection Statements Python For, While loops with Range, with List Combining loops with conditionals to Break, Continue Procedural Abstraction, Python Def procedures, Parameters, Return Values . . While loop: Code goes through elemetnts over and over again . Loops repeat something and its executed after its completed the repetition . Booleans- Recongnizes true/false . Iteration: Code goes through a segment . Pop: Takes away something at the end of the list . Increment/Decrement: Modifies the counter variable after each repetition . Array: Another name for a list . Initialization: What sets the counter variable to a starting value . Condition: Allows the computer to know whether or not to keep repeating the loop . Indexing: The position of an elemnt in a list starting from 0 . List Index: The position of an element in a list starting from 0 . Parameters: input values of a procedure . Arguments: specify values of the paramaters when the procedure is called . Append/Remove/Pop: Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item . Elements: Item in a list . Modularity: An splitting large procedures into smaller ones with more uses . Binary: A basee two numbering system . Return: sends the output of the procedure to where it was called . Variable: data that is assigned to and held within a chosen name . Loop: a system where a segment of code is repeated until a requirement is met . Procedure: a named group of instructions that have paramaters and return values . Procedural Abstraction: name for a process that allow a procedure to be used by only knowing what it does . . Notes on lesson 5-7 . Nested conditional: . A conditional inside of a conditional | Often used in algorithms in order to print specific data or run certain tasks. | We can use conditionals inside conditionals to create further conditions in algorithms. | We can use flowcharts to help display an easy to understand diagram of what we want a code segment to do. | . Boolean: . Binary variable with only two possible values, &quot;true&quot; or &quot;false&quot; | . Relational Operators: . Multiple operators which are used to evaluate 2 variables. | In pseudocode the relational operators are =, &gt;, &lt;, ≠, ≥, and ≤. | Other languages use different formats to represent these operators. For example, Python uses != instead of ≠. | . | These operators help determine the boolean value of a statement. | . Logical Operators: . Allow for boolean values to be evaluated. | Pseudocode uses the logical operators NOT, AND, and OR. Javascript uses the same logic, but uses different ways to represent the operators: &amp;&amp;(and), | |(or), |(not). | . | . Algorithm: . Finite set of instructions that accomplish a specific task | . Conditional Statements: . Conditional statements allow the code to act based on multiple conditions, such as user input or stored data. | We can use conditionals in algorithms in order to receive different outputs from a set of code, and help achieve the general purpose of the algorithm. | . Categories . Two broad types of conditional statements are if statements and if-else statements if statement: will go through certain statements if the if expression is true | if-else statement: will go through a statement no matter what, but the statement which is run depends on the if expression is true or false | . | . Flow Charts . We can use flowcharts to help organize the process of conditional statements. | .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/12/09/VOCABULARY.html",
            "relUrl": "/jupyter/2022/12/09/VOCABULARY.html",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "8 - 10 Lessons Homework",
            "content": "Vocabulary for this lesson . Elements - Item in a list. Pop- Take away something at the end of the list. Booleans- Recongnize true/false. Condition - Allows the computer to know whether or not to keep repeating the loop. Increment/Decrement - Modifies the counter variable after each repetition. Indexing/List Index - The position of an element in a list, starting from 0 Append/Remove/Pop : Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item. Iteration- Way that code goes through a segment . Exercise 1 . list = [1, 2, 3, 4, 5] # Print this list in reverse orde list.reverse() print(list) . [5, 4, 3, 2, 1] . Excercise 2 . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] print(f&quot;Original {list}&quot;) sl = insertion_sort(list) print(f&quot;Sorted {list}&quot;) . Original [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] Sorted [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . QUIZ QUESTION REFLECTIONS . I got 8/10 a I missed # 7/8 . 7 I answered mutation but mutation alters what the list has and it does not return what base 0 is therefore it was wrong .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/12/07/homeworkforlesson.html",
            "relUrl": "/jupyter/2022/12/07/homeworkforlesson.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "3.3 - 4 Lessons Homework",
            "content": "3.3 Video 1 Hacks . Show two examples and label which one is sequence, selection, iteration . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . Answers 1 . All the steps combined are sequencing . The step &quot;for i in numbers:&quot; is iteration because they go through all the numbers. . &quot;if (numbers[i] % 2 == 0)&quot; is selection because they sort each number to find the even ones. . i = 1 starString = &quot;*&quot; while i &lt;= 5: j = 1 while j &lt;= i: print (&quot;*&quot;, end= &quot;&quot;) j += 1 print () i += 1 . * ** *** **** ***** . Answers 2 . All the steps are a sequence . &quot;While i &lt;= 5:&quot; is iteration because they repeat until i reaches 5 . &quot;While j &lt;= i:&quot; is selection because this is where they decide what j is . 3.3 Video 2 Hacks . Practice Problems given the following code segment below: a ⟵ 7 . b ⟵ 1 . c ⟵ 3 . d ⟵ 4 . a ⟵ b . b ⟵ c + d . d ⟵ b . find the value for a, b, c, d . a = 1, b = 7, c = 3, d = 7 . consider the following code segment: hot ⟵ true . cold ⟵ false . cold ⟵ hot . hot ⟵ cold . what are the values of hot and cold after executing the code segment? . the value of hot is true, the value of cold is true the value of hot is false, the value of cold is true the value of hot is true, the value of cold is false the value of hot is false, the value of cold is false . the value of hot is true, the value of cold is true | Make TWO of your own code segments that contain at least 5 defined variables, then provide the answer and EXPLAIN why your answer is correct. . Sequencing . num1 = 3 num2 = 1 num3 = 5 num1 = num2 + num3 num2 = num1 + num3 # num2 is now the new num1 + num3 . What is the value of num1 and num2? . num1 = 6, num2 = 11 . 3.3 Video 3 Hacks . 3.4 Video 1 Hacks . String Homework . Test 1 . firstName &lt;- &quot;Bob&quot; lastName &lt;- &quot;Smith&quot; var &lt;- substring(firstName, 1, 1) name &lt;- concat(lastName, var) email &lt;- concat(name, &quot;@gmail.com&quot;) DISPLAY(email) . What would the result be? SmithB@gmail.com Hint: var = &quot;B&quot; name = &quot;SmithB&quot; . Test 2 . word1 &lt;- &quot;computer&quot; word2 &lt;- &quot;textbooks&quot; length1 &lt;- len(word1)/2 length2 &lt;- len(word2)/3 first &lt;- substring(word1, 2, len1) second &lt;- substring(word2, len2+3, len2) newWord &lt;- concat(first, second) DISPLAY(newWord) . Result: ompuook Length 1 is 4 Length 2 is 3 .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/11/29/Homework.html",
            "relUrl": "/jupyter/2022/11/29/Homework.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Unit 3 Sections 5-7 Hacks",
            "content": "Vocab . Booleans- Recongnize true/false. . Iteration- Way that code goes through a segment . 3.5 Hacks . Binary Practice . Using psuedocode operators determine if the statements are true or false. The number type will be indicated in parentheses. . 1. 90(D) = 1000(B) . A. True | B. False&lt;/li&gt; &lt;/ul&gt; 2. 10(D) ≠ 0110(B) . A. True&lt;/li&gt; B. False | &lt;/ul&gt; 3. 56(D) ≥ 111000(B) . A. True&lt;/li&gt; B. False | &lt;/ul&gt; 3. 99(D) &lt; 1110011(B) . A. True&lt;/li&gt; B. False | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Now, complete the binary truth tables . AND Operator Value 1 Value 2 Result . 1 | True | 1 | . True | 0 | 1 | . False | 1 | 0 | . 0 | False | 0 | . OR Operator Value 1 Value 2 Result . 1 | 1 | True | . 1 | 0 | False | . 0 | False | 0 | . 0 | 0 | False | . Not operator Not Value Result . Not | BLANK | 0 | . Not | 0 | BLANK | . . Python Practice . # Practice with these statements print(20 == 20) # How can you change the operator to print a value of False? By changing the sign. x = 40 y = 20 z = 10 print(x &gt; y + z) # How can this return true by only manipulating the operator? Change the x, y, and z value in order to make the sum of Y and Z equal to X. # Manipulate the variables x, y, and z to make the below statement return true print(30 == 30) . True True True . 3.6 Hacks . AP Prep . 1. What is displayed by this code? . result &lt;-- 75 | IF result &lt; 80 { DISPLAY(&quot;Please schedule a retake.&quot;) } | ELSE { DISPLAY(&quot;Nice job!&quot;) } | . Nice job! | Display | Please schedule a retake.&lt;/li&gt; 75 | &lt;/ol&gt; 2. How is an if statement different from an if-else statement. . Extra words. | An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions.&lt;/li&gt; They are the exact same. | An if statement will go through the entire code segment every single time and the if-else statement is always used in an algorithm, no matter the conditions. | &lt;/ol&gt; 3. What would be most appropriate for this situation? Ben wants to check his bank account. If his car fuel is full, he will go to the bank. Otherwise, he will go home. If he goes to the bank, he will withdraw money only if his balance is above $1000. . If statement | If-else statement&lt;/li&gt; &lt;/ol&gt; 4. What would be most appropriate for this situation? Luke wants to play basketball. If it is sunny outside he will go to the park to play basketball. . If statement&lt;/li&gt; If-else statement | &lt;/ol&gt; Using Python . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; animals = [&quot;lion&quot;, &quot;tiger&quot;, &quot;wildebeest&quot;, &quot;shark&quot;, &quot;jellyfish&quot;, &quot;blobfish&quot;, &quot;raven&quot;] for i in animals: if i == &quot;wildebeest&quot; or i == &quot;lion&quot;: print (i + &quot; Fun Fact: They live in the desert&quot;) # Practice # Using only one more if statement, alter the code to print out a statement saying if an animal lives in the desert, based on booleans . lion Fun Fact: They live in the desert wildebeest Fun Fact: They live in the desert . 3.7 Hacks . Exercise 1 . Create dictionaries for multiple food items, with the listed specifications Chicken Alfredo, Meat: Chicken, Time to Prepare: 60 minutes | Cheese Quesadilla, Meat: None, Time to Prepare: 10 minutes | Beef Wellington, Meat: Beef, Time to Prepare: 150 minutes | . | Used nested conditionals, determine which meal you can cook, given that a) you have no meat at home, and b) you only have 30 minutes to make the meal | . Chickendict = { &quot;Food Item:&quot; &quot; Chicken Alfredo&quot; &quot; Meat:&quot; &quot;Chicken&quot; &quot; Time to Prepare:&quot; &quot;60 Minutes&quot; } print (Chickendict) Cheesedict = { &quot;Food Item:&quot; &quot; Cheese Quesadilla&quot; &quot; Meat:&quot; &quot;None&quot; &quot; Time to Prepare:&quot; &quot;10 Minutes&quot; } print (Cheesedict) Beefdict = { &quot;Food Item:&quot; &quot; Beef Wellington&quot; &quot; Meat:&quot; &quot;Beef&quot; &quot; Time to Prepare:&quot; &quot;150 Minutes&quot; } print (Beefdict) . {&#39;Food Item: Chicken Alfredo Meat:Chicken Time to Prepare:60 Minutes&#39;} {&#39;Food Item: Cheese Quesadilla Meat:None Time to Prepare:10 Minutes&#39;} {&#39;Food Item: Beef Wellington Meat:Beef Time to Prepare:150 Minutes&#39;} . Exercise 2 . Make a flowchart(here is one we used) and write pseudocode for the following scenario. . Mr. Yeung would like to grade live reviews. | He wants to see if each student has at least 2 issues on their project. If they don&#39;t they receive a score of 2.0. | If they have at least 2 issues, check that they have completed at least 5 of their scrumboard tasks. | If they have completed 5 scrumboard tasks, give the student a 2.7. If they have not completed 5 scrumboard tasks, give them a score of 2.5. If they have completed more than 5 tasks, give them a score of 3.0. | How much would a student with 3 issues and 1 complete scrumboard task receive? | . &lt;/div&gt; | | | | | . | . | . | .",
            "url": "https://qaisj1.github.io/quissite/csp/2022/11/28/assignment.html",
            "relUrl": "/csp/2022/11/28/assignment.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Homework for lesson 3.9-3.11",
            "content": ". Problem 1. . Write this Boolean statement in the form of a conditional (if/else) statement: stayInside⟵((isCold) OR (isRaining)) . IF (isCold or isRaining) { . stayInside ⟵ True . } . ELSE { . stayInside ⟵ False . } . . Problem 2. . Create an algorithm that uses selection and/or iteration that will represent one player’s complete turn. . During a turn, each player gets 4 attempts/chances to get the greatest number possible. During each attempt, the player will use a random number generator to select a random number from 1 to 10. After they have had 4 chances, their score is the greatest number they received from the random number generator, and their turn is over. . import random numAttempts = [] i = 1 while i &lt;= 4: numAttempts.append(random.randint(1,10)) i = i +1 print(&quot;Attempts:&quot;, numAttempts) sort(randomNumber) print(&quot;Max Number:&quot;) print(max(numAttempts)) . Attempts: [1, 6, 6, 8] Max Number: 8 . . Problem 3. . Create an algorithm that will allow the arrow to reach the gray square: . Repeat until reach gray square: . If canmoveForward . Move_Forward . else { . if canturnright{ turnright } if canturnleft{ turnleft } . } } . . Problem 4. . Make a binary search tree of different the list [1,2,3,4,6,9,11,69] . . . Problem 5. . Explain thoroughly how to find the number 69 in the list above (use key words) . We can use sequential search | Iterate through the list | Compare each number until we find 69 | We can also use binary search | Begin from the middle index then continue to the other numbers | . . Problem 6. . Make a diagram explaining how you found the list (not tree, include equation . Middle index . (1+8)/2=4.5~5 . Make a diagram explaining how you found the list (not tree, include equation . . . Problem 7. . Put this list of strings in a order that can be used for binary search [“store”,”Market”,”Walmart”,Target”,”Ralphs”] . [&quot;Store”,”Walmart”,”Market”,Target”,”Ralphs”] . . Problem 8. . Explain why Binary Search is more efficient than Sequential Search . Binary search is more efficient because it moves exponentially while sequential search moves through the list one by one. Binary is able to search for half the numbers in a data set in one iteration, while sequential search has to go through every possibility. . . Problem 9 . [64,36,16,11,9] Explain which number you are finding, how many check it would take, and make a binary search tree . I am searching for the number 9, which would take 3 iterations. You would start at 16, the middle index. Then you would do 4+4/2 to get 4, so the next index would be 9. . .",
            "url": "https://qaisj1.github.io/quissite/2022/11/12/Lesson11.html",
            "relUrl": "/2022/11/12/Lesson11.html",
            "date": " • Nov 12, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "AP Exam",
            "content": ". Problem 35: Answer D is correct and I chose answer B. The last line in this code segment sets maxPS to 50 regardless of the value of time. . | Problem 40: Answer A is correct and answer C is incorrect. The value 8 would be the output if the statement DISPLAY(x + y) were executed. . | Problem 41: Answer B is correct and answer A is incorrect. This is the initial value of p. None of the variables has the value 10 after executing the code segment. . | Problem 42: Answer C answer is correct and answer D is incorrect. After initially assigning values to the variables, the code segment assigns the value 4 to num3 and assigns the value 8 to num1. The value of sum at the end of the code segment is 8 + 4 + 4, or 16. . | Problem 43: Answer C is correct and answer B is incorrect. This would be the value of result if the loop iterated one less time. . | Problem 44: Answer C is correct and answer A is inccorect. For any integer n, the value of n MOD 1 is always 0. . | Problem 47: Answer D is correct and answer C is incorrect. The eighth statement assigns the value of c + d / 2 (which is 50) to d. . | Problem 50: Answer A is correct and answer B is incorrect. This statement takes the first two characters of firstName and concatenates them with the first two characters of lastName, assigning a string that is four characters long to initials. . | .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/11/08/APEXAMblog.html",
            "relUrl": "/jupyter/2022/11/08/APEXAMblog.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Night at the Museum",
            "content": "Classes I visited . I saw other computer science projects which were very different from my groups. | I visited the 3d animation class and saw my DevOp&#39;s Matiullah Danish&#39;s art piece. | I visited the ceramics class and saw many interesting sculptures. I took a few photos of them. | . . Plans for next years project . Next year I plan to make a more useful project that involves more creativity and critical thinking. I would also like to make the project represent me more. | .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/11/07/Individualblog.html",
            "relUrl": "/jupyter/2022/11/07/Individualblog.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Javascript Webpage Using API Hacks",
            "content": "- What are some similarities you see with the javascript for the jokes api? .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/10/22/JavascripWebpageUsingApi.html",
            "relUrl": "/jupyter/2022/10/22/JavascripWebpageUsingApi.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Title",
            "content": "",
            "url": "https://qaisj1.github.io/quissite/2022/10/18/Hacks.html",
            "relUrl": "/2022/10/18/Hacks.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "API",
            "content": "from urllib.parse import quote as url_encode import requests API_KEY = &quot;98ba704683msh59efed4f43e6ad3p1454bajsn635c4a91117d&quot; NOT_PROVIDED = &quot;&quot; class ApiError(Exception): pass class NotConfidentError(ApiError): pass class TranslateNotProvidedError(ApiError): pass class ExceedsMonthlyUsage(ApiError): pass class iluvuTranslator: def __init__(self, API_KEY): self.headers = { &quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;, &quot;X-RapidAPI-Key&quot;: API_KEY, &quot;X-RapidAPI-Host&quot;: &quot;google-translate1.p.rapidapi.com&quot; } def make_request(self, method, *args, **kwargs): r = requests.request(method, *args, **kwargs) # code for exceeding month usage if r.status_code == 429: raise ExceedsMonthlyUsage(f&quot;Response: {r.text}&quot;) # print(r.status_code) # print(r.text) return r def detect_language(self, text): url = &quot;https://google-translate1.p.rapidapi.com/language/translate/v2/detect&quot; payload = { &quot;q&quot;: url_encode(text), } r = self.make_request(&quot;POST&quot;, url, data=payload, headers=self.headers).json() data = r[&quot;data&quot;][&quot;detections&quot;][0][0] return (data[&quot;language&quot;], data[&quot;confidence&quot;]) def translate(self, text, language=&quot;&quot;, to=&quot;&quot;): if to is NOT_PROVIDED: raise TranslateNotProvidedError(&quot;add a language that that you want to translate to&quot;) if language is NOT_PROVIDED: language, confidence = self.detect_language(text) if confidence &lt; 0.5: raise NotConfidentError(f&quot;{confidence*100=}%&quot;) url = &quot;https://google-translate1.p.rapidapi.com/language/translate/v2&quot; payload = { &quot;source&quot;: language, &quot;q&quot;: text, &quot;target&quot;: to, } r = self.make_request(&quot;POST&quot;, url, data=payload, headers=self.headers).json() return r[&quot;data&quot;][&quot;translations&quot;][0][&quot;translatedText&quot;] if __name__ == &quot;__main__&quot;: int1 = input(&quot;Enter the language you want to translate. &gt;&gt;&quot;) int2 = input(&quot;Enter the language you want to translate to. &gt;&gt;&quot;) text = input(&quot;Enter your text. &gt;&gt;&quot;) translator = iluvuTranslator(API_KEY) print(&quot;Iluvutranslator&quot;) print(&quot;Translated from: &quot;,int1) print(&quot;Translated to: &quot;,int2) print(&quot;&quot;) print(&quot;Input: &quot;,text) print( &quot;Translation: &quot;, translator.translate(text, language=int1, to=int2) ) . Iluvutranslator Translated from: en Translated to: de Input: i love my dad. Translation: ich liebe meinen Vater. .",
            "url": "https://qaisj1.github.io/quissite/2022/10/10/APITRANSLATE.html",
            "relUrl": "/2022/10/10/APITRANSLATE.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;98ba704683msh59efed4f43e6ad3p1454bajsn635c4a91117d&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . This cell is dependent on running API call in cell above! . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://qaisj1.github.io/quissite/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter a is the 1 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 9: odds.append(i+1) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 1: newNumbers.append(numbers[i]) print(newNumbers) . [0, 1, 3, 5, 5, 7, 9, 10, 11, 13, 15, 15, 17, 19, 20, 21, 23, 25, 25, 27, 29, 30, 31, 33, 35, 35, 37, 39, 40, 41, 43, 45, 45, 47, 49, 50, 51, 53, 55, 55, 57, 59, 60, 61, 63, 65, 65, 67, 69, 70, 71, 73, 75, 75, 77, 79, 80, 81, 83, 85, 85, 87, 89, 90, 91, 93, 95, 95, 97, 99] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;tacos&quot;: 9.99, &quot;fries&quot;: 5.99, &quot;drink&quot;: 4.99} print (menu) order= input(&quot;Hi, What would you like to eat? &gt;&gt;&quot;) if order == &quot;tacos&quot;: print(&quot;you ordered tacos, your total is $5.99&quot;) elif order == &quot;fries&quot;: print(&quot;you ordered fries, your total is $9.99&quot;) elif order == &quot;drink&quot;: print(&quot;you ordered a drink, your total is $4.99&quot;) elif order != &quot;tacos&quot; or &quot;fries&quot; or &quot;drink&quot;: print(&quot;That item is not on the menu, try re-order&quot;) . {&#39;tacos&#39;: 9.99, &#39;fries&#39;: 5.99, &#39;drink&#39;: 4.99} you ordered tacos, your total is $5.99 . Hacks . What errors may arise in your project? . Some error that may arise in our project is dictionary errors, api errors, and syntax errors. When they input a letter it may not be read correctly and place the letter in the wrong spot or it may not say that a correct letter is included in a word. | . | What are some test cases that can be used? . We can test inputting some correct letters and some wrong letters. This will lead to our desired output. If we type in a wrong letter a body part will appear. | . | Make sure to document any bugs you encounter and how you solved the problem. . I will document any errors I have and inform my team. | . | What are “single” tests that you will perform on your project? Or, your part of the project? . I will first play the game for myself and then I will ask peers to review the game aswell. | . | .",
            "url": "https://qaisj1.github.io/quissite/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Scrum Diagram",
            "content": "This is my diagram . .",
            "url": "https://qaisj1.github.io/quissite/markdown/2022/09/26/Scrum.html",
            "relUrl": "/markdown/2022/09/26/Scrum.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Focus and habits notes",
            "content": ". Vocabulary . Psychology- Study of the human mind and its functions Mental health- A humans emotional well being Depression- Severe sadness inherited by a human Anxiety- Excessive nervousness or worrying about activities Stress- Mental state which results from demanding circumstances Emotion- Mood or feeling from someone Habits- Common actions taken by someone . . . Gratitude list . I am thankful for the roof over my head, my family, my teachers, food, my neighborhood, San Diego, my brother, my dog, video games, clothes, and air conditioning. — . . Note of Gratitude . I made a note of gratitude to my mom and to my friend. I told my friend how much I appreciated him. He said thank you but there was nothing else beyond that. I told my mom that I am very thankful for her and for everything that she does for me. She said that she is glad that I understand what she does for me and my brother. — . . My goals . I want to, be happy, get all A’s, do good in rugby, advance in my clubs, create my own brand, get my permit, and get a job. .",
            "url": "https://qaisj1.github.io/quissite/markdown/2022/09/20/Focus.html",
            "relUrl": "/markdown/2022/09/20/Focus.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "College board notes",
            "content": "Notes: Diver perspectives eliminate bias in development, Computing innovations include a program as a part of its function. Computing innovations are improved through collaberation. Github is used to work with your team. Commenting in code helps your teammates. Think-pair-share is a process where students think though a process alone. Computing innovation can be physical or non physical. . Hacks: Me and my partner are Afghan. We both enjoy computer science. He knows more about computer science than me. We both like going to the gym. .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/09/20/College.html",
            "relUrl": "/jupyter/2022/09/20/College.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "App Ideas",
            "content": "An idea me and Mati have for an app is to create a game. A game which involves a 2 by 2 snake. The snake will increase everytime it touches a red block. You can control the snake with 4 buttons. You can use the up arrow, down arrow, left arrow, and right arrow as inputs.If the snake hits a border the player ultimately loses the game. The twist to the game is that there is no limit for how large you can get. You will keep growing until you hit yourself or one of the borders. The snake game fits the criteria because it has functioning inputs and outputs. The game has a loop which is what happens when you lose. You are able to go back to the start of the game. When you lose the game your highscore is kept on a dictionary which shows you your most recent and your highest score. Snake also has the prodcedural abstraction which is what happens when you click the start. The game also features sequencing when you lose the game it lets you restart. Input and output is part of the testing too. Startimg the game and restarting. Also moving the snake with the buttons. The purpose of the game is to cure boredom and make the world a better place. .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/09/15/App_Ideas.html",
            "relUrl": "/jupyter/2022/09/15/App_Ideas.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Dictionary",
            "content": "print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;Qais Jamili&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 15 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;Qais Jamili&quot;: name, &quot;15&quot;: age, &quot;90.0&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name Qais Jamili &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 15 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 90.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;] &lt;class &#39;list&#39;&gt; length 3 - langs[0] Python &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;Qais Jamili&#39;: &#39;Qais Jamili&#39;, &#39;15&#39;: 15, &#39;90.0&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;]} &lt;class &#39;dict&#39;&gt; length 4 . KeyError Traceback (most recent call last) /mnt/c/Users/qaisj/vscode/quissite/_notebooks/2022-09-12-Dictionary.ipynb Cell 2 in &lt;cell line: 42&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/qaisj/vscode/quissite/_notebooks/2022-09-12-Dictionary.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=34&#39;&gt;35&lt;/a&gt; person = { &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/qaisj/vscode/quissite/_notebooks/2022-09-12-Dictionary.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=35&#39;&gt;36&lt;/a&gt; &#34;Qais Jamili&#34;: name, &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/qaisj/vscode/quissite/_notebooks/2022-09-12-Dictionary.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=36&#39;&gt;37&lt;/a&gt; &#34;15&#34;: age, &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/qaisj/vscode/quissite/_notebooks/2022-09-12-Dictionary.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=37&#39;&gt;38&lt;/a&gt; &#34;90.0&#34;: score, &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/qaisj/vscode/quissite/_notebooks/2022-09-12-Dictionary.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=38&#39;&gt;39&lt;/a&gt; &#34;langs&#34;: langs &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/qaisj/vscode/quissite/_notebooks/2022-09-12-Dictionary.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=39&#39;&gt;40&lt;/a&gt; } &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/qaisj/vscode/quissite/_notebooks/2022-09-12-Dictionary.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=40&#39;&gt;41&lt;/a&gt; print(&#34;person&#34;, person, type(person), &#34;length&#34;, len(person)) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/qaisj/vscode/quissite/_notebooks/2022-09-12-Dictionary.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=41&#39;&gt;42&lt;/a&gt; print(&#39;- person[&#34;name&#34;]&#39;, person[&#34;name&#34;], type(person[&#34;name&#34;])) KeyError: &#39;name&#39; . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Qais&quot;, &quot;LastName&quot;: &quot;Jamili&quot;, &quot;DOB&quot;: &quot;January 19&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;qaisjamili22@gmail.com&quot;, &quot;Owns_Cars&quot;:[&quot;4Runner&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Qais&#39;, &#39;LastName&#39;: &#39;Jamili&#39;, &#39;DOB&#39;: &#39;January 19&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;qaisjamili22@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Qais Jamili Residence: San Diego Birth Day: January 19 Cars: 4Runner . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Qais Jamili Residence: San Diego Birth Day: January 19 Cars: 4Runner . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Qais Jamili Residence: San Diego Birth Day: January 19 Cars: 4Runner .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/09/12/Dictionary.html",
            "relUrl": "/jupyter/2022/09/12/Dictionary.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Qais Logo",
            "content": "This is my logo . .",
            "url": "https://qaisj1.github.io/quissite/markdown/2022/09/08/logo.html",
            "relUrl": "/markdown/2022/09/08/logo.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Theme",
            "content": "The theme . .",
            "url": "https://qaisj1.github.io/quissite/markdown/2022/09/08/Theme.html",
            "relUrl": "/markdown/2022/09/08/Theme.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Python Quiz",
            "content": "import getpass, sys def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions on the topic of python.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What is python?&quot;) if rsp == &quot;A language that focuses on code readability&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What can it be used for?&quot;) if rsp == &quot;object oriented, structured, or functional tasks&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What language does python use?&quot;) if rsp == &quot;The english language&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, qaisjamili running /bin/python3 You will be asked 3 questions on the topic of python. Question: Are you ready to take a test? Answer: Question: What is python? A language that focuses on code readability is correct! Question: What can it be used for? object oriented, structured, or functional tasks is correct! Question: What language does python use? The english language is correct! qaisjamili you scored 3/3 .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/08/28/notebookquiz.html",
            "relUrl": "/jupyter/2022/08/28/notebookquiz.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Bash Checks",
            "content": "echo &quot;Using conditional statement to create a project directory and project&quot; echo &quot;It is possible to verify tools that are installed by running conditional commands to tell us the version of something.&quot; echo &quot;We can use conda list to verify all the pakcages and versions installed&quot; echo &quot;A git add command is to add needed files. The git commit command is used to commit to the correct repository. Git push is used to push changes to the repository&quot; echo &quot;Program a scipt to automate an action&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/APCSP # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /home/qaisjamili/vscode exists. Directory /home/qaisjamili/vscode/APCSP exists. .",
            "url": "https://qaisj1.github.io/quissite/2022/08/26/bash.html",
            "relUrl": "/2022/08/26/bash.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "My Dog",
            "content": "This is my Dog . .",
            "url": "https://qaisj1.github.io/quissite/markdown/2022/08/26/MyDog.html",
            "relUrl": "/markdown/2022/08/26/MyDog.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Installation Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 bash: python2: command not found . . Conda Packages . conda list . # packages in environment at /Users/johnmortensen/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.2.0 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 interchange 2021.0.4 pypi_0 pypi intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython-cypher 0.2.6 pypi_0 pypi ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 monotonic 1.6 pypi_0 pypi mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 neo4jrestclient 2.1.1 pypi_0 pypi neo4jupyter 0.2.0 pypi_0 pypi nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 pansi 2020.7.3 pypi_0 pypi param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prettytable 3.3.0 pypi_0 pypi prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 py2neo 2021.2.3 pypi_0 pypi pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 neo4jupyter 0.2.0 pypi_0 pypi . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: java /Users/johnmortensen/Library/Jupyter/kernels/java javascript /Users/johnmortensen/Library/Jupyter/kernels/javascript python3 /Users/johnmortensen/opt/anaconda3/share/jupyter/kernels/python3 bash /usr/local/share/jupyter/kernels/bash . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /Users/johnmortensen/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://qaisj1.github.io/quissite/techtalk/bash_checks",
            "relUrl": "/techtalk/bash_checks",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "What is python?",
            "content": "Hello, inorder to do the python quiz you must understand a few components. What is python? Python is a high-level and general-purpose language that focuses on code readability. It’s one of the most popular beginner languages because of its ease of use, wide application, active community, and freedom of use. Programmers can use it for object-oriented, structured, or functional tasks. Python has a comprehensive standard library, which has earned the language the title “batteries included.” The libraries provide tools for many tasks, such as creating internet applications, graphical user interfaces, and data analytics. . The ease of use of this language is because of its simple, less-cluttered syntax and grammar with freedom of methodology during programming. Unlike most languages, python uses English words instead of punctuation. It also has fewer exceptional cases and syntactic exceptions than C language. Employers can use it in information technology, engineering, professional services, and design. Python helps you work fast to integrate systems as a glue language. It’s also a popular rapid application development (RAD) language. .",
            "url": "https://qaisj1.github.io/quissite/markdown/2022/08/25/Qais.html",
            "relUrl": "/markdown/2022/08/25/Qais.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://qaisj1.github.io/quissite/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "Computing Bias and Crowd Sourcing Hacks",
            "content": "Crowd Sourcing Hacks . Think of a use case for crowdsourcing in you project … . CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? What kind of data could you capture at N@tM to make evening interesting? Perhaps use this data to impress Teachers during finals week. . A use for crowdsourcing in a computer science project could be to gather data on user preferences and opinions. For example, you could provide a survey among th students in the class to gather data on what topics they find most interesting. This data could then be used to create future lessons and assignments to better meet the needs and interests of the students. | As for Del Norte crowdsourcing, it depends on the project. If the project involves collecting data from a large group of people, such as community feedback on a proposed development project, then crowdsourcing could definitely be beneficial. | For N@tM (Night at the Museum), you could use crowdsourcing to gather data on the most popular exhibits, activities, and events. This data could then be used to create a more engaging and personalized experience for visitors in the future. During finals week, you could present this data to teachers as evidence of the impact of your work, demonstrating the value and impact of N@tM on the community. | . Computing Bias Hacks . Write summary/thoughts/conclusions from each of the exercises above. Focus on avoiding Bias in algorithms or code you write. . Google “What age groups use Facebook” vs “… TikTok”? What does the data say? Is there purposeful exclusion in these platforms? Is it harmful? Should it be corrected? Is it good business? . TikTok is more popular among younger generations, particularly teens and young adults. There is no purposeful exclusion in these platforms but the design and content that each platform offers caters to different age groups. | Whether this is harmful or not depends on personal perspective. I think that it could lead to age-based digital divide. | . Why do virtual assistants have female voices? Amazon, Alexa Google, Apple Siri. Was this purposeful? Is it harmful? Should it be corrected? Is it good business? . I think that virtual asistants have female voices because they are more aimed towards the male audience. People tend to prefer female voices for communication and find them more trustworthy aswell. I don&#39;t think its harmful because many companies feature male and female voices. It is good business because it allows a varitery of options. | . Talk about an algorithm that influences your decisions, think about these companies (ie FAANG - Facebook, Amazon, Apple,Netflix, Google) . Recommendation algorithim | For example, Amazon&#39;s recommendation algorithm suggests products based on the user&#39;s previous purchases, searches, and browsing history. | . Come up with some thoughts on the video and be ready to discuss them as I call on you. Here are some ideas… . Does the owner of the computer think this was intentional? Yes. | If yes or no, justify you conclusion. | . He calls the computer racist. . How do you think this happened? | . Not enough testing done, bad lighting, and maybe some racism (not sure). . Is this harmful? Was it intended to be harmful or exclude? | . It can be harmful for people of color because they may have spent a lot of money on the computer so they could use the feature. I&#39;m not fully sure if it was an accident or not. I don&#39;t think they meant to exclude people of color. . Should it be corrected? | . Yes definetly. . What would you or should you do to produce a better outcome? | . Maybe make a program which is able to pick up peoples faces, skin color, hair, and other physical features better inorder to make the computure more inclusive. .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/02/01/harmsandeffects.html",
            "relUrl": "/jupyter/2022/02/01/harmsandeffects.html",
            "date": " • Feb 1, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "Performance Task Scoring 2",
            "content": "Sample I . Reporting Category Student Score College Board Score Student Comments . Program Purpose and Function | 0 | 0 | Didn&#39;t explain what the program is used for and how he coded it. There was no purpose given instead he just said &quot; The purpose of this code is for you to see all the animals and to identify them when you&#39;re asked later&quot; which is more of a explanation of what it does and not why someone would want to use it. | . Data Abstraction | 0 | 0 | Not enough detail was given. Provided 2 distinct code segments which identifies as animalList, but animalList is not being used in either code segment. | . Managing Complexity | 0 | 0 | Nothing was shown. | . Procedural Abstraction | 1 | 0 | Parameters for function are shown and explained how they are used for the program. | . Algorithm Implementation | 1 | 0 | Loop, iteration and sequencing is provided. | . Testing | 0 | 1 | Two calls are described. Each condition is tested and the results are given. | . Sample B . Reporting Category Student Score College Board Score Student Comments . Program Purpose and Function | 1 | 1 | Provided clear explanation of what the program is meant to do and how it can function based on a users input. | . Data Abstraction | 1 | 1 | Provided two distinct code segments. First code segment shows data being stored in the identified list and the second shows the data being accessed from an identified list under a new name since it is passed as a parameter. | . Managing Complexity | 1 | 1 | Provided list which manages complexity. Also explained how the code would be written differently without the list and how it would make the code more cluttered. | . Procedural Abstraction | 1 | 1 | Provided student-developed procedure, createPoems, with four parameters that are used in the procedure. Parameters for function are shown and explained how they are used for the program. | . Algorithm Implementation | 1 | 1 | Loop, iteration and sequencing is provided. Explained in detail how the algorithm in the procedure works so it can be recreated. | . Testing | 1 | 1 | They also explained what the conditions were. Two calls are described. Each condition is tested and the results are given. | . Sample D . Reporting Category Student Score College Board Score Student Comments . Program Purpose and Function | 1 | 1 | Provided the functionality of program and demonstrated the input and output in video. | . Data Abstraction | 1 | 1 | Two code segments are provided. The first segment shows data being stored in the identified list, and a second segment shows data being accessed from the list in a loop via a parametermthat is set to the identified list. | . Managing Complexity | 1 | 1 | Provided includes a list that combines six rankings and an image URL for a single character into one collection to pass to the function that determines a winner, managing complexity in the program code. | . Procedural Abstraction | 1 | 1 | Provided a student-developed procedure, findWinner, with two parameters that are used in the procedure. | . Algorithm Implementation | 1 | 1 | Explains in detail how the algorithm in the procedure works so it can be recreated. | . Testing | 1 | 1 | Provides two calls to the procedure with different arguments that lead to different results from the procedure. The first call uses the arguments Vision and Bishop. | . Sample G . Reporting Category Student Score College Board Score Student Comments . Program Purpose and Function | 1 | 1 | Provided the program&#39;s purpose and how it works, and described the input and output. | . Data Abstraction | 1 | 0 | Two code segments are provided. | . Managing Complexity | 1 | 0 | Provided a list in the program code which is used to manage complexity. | . Procedural Abstraction | 1 | 1 | Provided procedure called isitcorrect, with one explicit parameter, checkanswer, and a call to this procedure in a second code segment using the argument, answer. | . Algorithm Implementation | 1 | 1 | Explains in detail how the algorithm in the procedure works so it can be recreated. | . Testing | 0 | 0 | Provides the conditions being tested rather than two different arguments that cause a different segment of code to execute. | .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/01/11/Performancetask2.html",
            "relUrl": "/jupyter/2022/01/11/Performancetask2.html",
            "date": " • Jan 11, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "Model and Object Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | . Class and Object Code . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, classof, password, dob): self._name = name # variables with self prefix become part of the object, self._uid = uid self._classof = classof self.set_password(password) self._dob = dob @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def classof(self): return self._classof @classof.setter def classof(self, classof): self.classof = classof # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;classof&quot; : self.classof, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, class of={self._classof} password={self._password},dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User( name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, classof=&#39;1867&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11)) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . JSON ready string: {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;classof&#34;: &#34;1867&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_classof&#39;: &#39;1867&#39;, &#39;_password&#39;: &#39;sha256$uOs5loDBMncdwY1O$4734628400e8824f6637234ea1e504b3333b2116cfc3af21ea6c9d36def34265&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11)} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classof&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classof&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, class of=1867 password=sha256$uOs5loDBMncdwY1O$4734628400e8824f6637234ea1e504b3333b2116cfc3af21ea6c9d36def34265,dob=1847-02-11) .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/01/10/modelandobject.html",
            "relUrl": "/jupyter/2022/01/10/modelandobject.html",
            "date": " • Jan 10, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Schedule Maker",
          "content": "Schedule Maker . Add your activities | Organize your activities | Schedule times for activities Create A Schedule! . | . Activities: Choose a Day: Reset Save . | Monday Tuesday Wednesday Thursday Friday Saturday Sunday | Apply | . . Monday Tuesday Wednesday Thursday Friday Saturday Sunday . | | | | | | | . .",
          "url": "https://qaisj1.github.io/quissite/markdown/",
          "relUrl": "/markdown/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://qaisj1.github.io/quissite/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://qaisj1.github.io/quissite/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}