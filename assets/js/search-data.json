{
  
    
        "post0": {
            "title": "Performance Task Scoring 1",
            "content": "Sample F . Reporting Category Student Score College Board Score Student Comments . Program Purpose and Function | 1 | 0 | Provided clear explanation of what the program is meant to do and how it can function based on a users input. | . Data Abstraction | 1 | 1 | 2 segments of code are shown and an explanation of how the code is implemented into the program is given. | . Managing Complexity | 0 | 0 | This way of managing complexity is inefficent | . Procedural Abstraction | 1 | 1 | Both program code segments provided and thorougly explained. | . Algorithm Implementation | 1 | 1 | Has explanation which could allow others to recreate the program. | . Testing | 1 | 1 | Each call result given with explanations of how they are tested. | . Sample A . Reporting Category Student Score College Board Score Student Comments . Program Purpose and Function | 1 | 1 | Game&#39;s purpose is clearly explained and how it is used is explained as well. | . Data Abstraction | 1 | 1 | 2 segments of code are shown and an explanation of how the code is implemented into the program is given. | . Managing Complexity | 1 | 1 | Explains how a list is used in the program and how it is the most efficent way to manage complexity. | . Procedural Abstraction | 1 | 1 | The program code segments are given and thorougly explained. | . Algorithm Implementation | 0 | 1 | Does not provide clear information which could help recreate program. | . Testing | 1 | 1 | Each call result given with explanations of how they are tested. | .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2023/01/04/gradingforexam.html",
            "relUrl": "/jupyter/2023/01/04/gradingforexam.html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Grade Table",
            "content": "Lesson Grade . 3.1 &amp; 3.2 | .5/1 | . 3.3 &amp; 3.4 | .9/1 | . 3.5 - 3.7 | 0.8/1 | . 3.8 &amp; 3.10 | 0.7/1 | . 3.9 &amp; 3.11 | .9/1 | . 3.12 &amp; 3.13 | I presented | . 3.14 &amp; 3.15 | 0.95/1 | . 3.16 | .9/1 | . 3.17 &amp; 3.18 | .95/1 | .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/12/16/Gradetable.html",
            "relUrl": "/jupyter/2022/12/16/Gradetable.html",
            "date": " • Dec 16, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Lesson 17-18 Homework",
            "content": ". HACK 1 . Please write a short 1-2 sentence explanation describing the difference between decidable and undecidable problems. Make sure to provide at least one example of each. . A decidable problem is a problem which can use an algorithim in order to be solved. An undecidable problem is a problem in which no algorithm is able to be built in order to provide a solution. . . HACK 2 . Which of the following is a 3 step algorithm? . A. 2 x 6 x 8 . B. 4^5 . C. (3 x 8)^2 &lt;/p&gt; D. None of the above . E. All of the above . The first step is 3 x 8 The second step is getting the answer 24 The third step is putting 24 to the power of 2 . . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; HACK 3 Rewrite this JavaScript Code in a More Efficient Way (Hint: Use Binary Search) . function peak_finder(array){ let counter = 0 let peak = 0 let peak_index =0 while (counter &lt;= array.length){ console.log(counter) if (counter === 0){ if (a[0]&gt;=a[1]){ peak = a[0] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter+=1 } }else if(counter === array.length-1){ if (a[array.length-1] &gt;= a[array.length-2]){ peak = a[array.length-1] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` } }else{ if (a[counter]&gt; a[counter+1] &amp;&amp; a[counter]&gt; a[counter-1]){ peak = a[counter] peak_index = counter counter = array.length return `The ${counter-1} indexed number, ${peak} is a peak` }else{ counter += 1 } } } } . Input In [6] function peak_finder(array){ ^ SyntaxError: invalid syntax . Wasn&#39;t really sure how to do this. I thought that if I tried to edit some stuff out which weren&#39;t neccesary it would work. But after I ran it, it still wouldn&#39;t work. . function peak_finder2(array){ if (array.length)=== 0{ return `Array cannot be empty` }else if (array.length === 1){ return array[0] }else{ let mid_index = Math.floor(array.length*0.5) if (array[mid_index +1]&gt;array[mid_index]){ return peak_finding(array.slice(mid_index + 1 )) }else if (array[mid_index -1]&gt;array[mid_index]){ new=array.reverse().slice(mid_index+1).reverse() return peak_finding(new) }else{ return array[mid_index] } } } . Input In [5] function peak_finder2(array){ ^ SyntaxError: invalid syntax . . HACK 4: Rewrite this Python Code in a More Efficient Way . def merge_sort(data): if len(data) &lt;= 1: return mid = len(data) // 2 left_data = data[:mid] right_data = data[mid:] merge_sort(left_data) merge_sort(right_data) left_index = 0 right_index = 0 data_index = 0 while left_index &lt; len(left_data) and right_index &lt; len(right_data): if left_data[left_index] &lt; right_data[right_index]: data[data_index] = left_data[left_index] left_index += 1 else: data[data_index] = right_data[right_index] right_index += 1 data_index += 1 if left_index &lt; len(left_data): del data[data_index:] data += left_data[left_index:] elif right_index &lt; len(right_data): del data[data_index:] data += right_data[right_index:] if __name__ == &#39;__main__&#39;: data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] merge_sort(data) print(data) . [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . I got rid of the unecessary code. I just added the data and print(data) command. I also added a data sort which made it simplified overall. . data = [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] print(data) data.sort() print(data) . [9, 1, 7, 6, 2, 8, 5, 3, 4, 0] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . HACK 5: Rewrite this Python Code in a More Efficient Way . def heap_permutation(data, n): if n == 1: print(data) return for i in range(n): heap_permutation(data, n - 1) if n % 2 == 0: data[i], data[n-1] = data[n-1], data[i] else: data[0], data[n-1] = data[n-1], data[0] if __name__ == &#39;__main__&#39;: data = [1, 2, 3] heap_permutation(data, len(data)) . [1, 2, 3] [2, 1, 3] [3, 1, 2] [1, 3, 2] [2, 3, 1] [3, 2, 1] . I was able to rewrite this code to make it more efficent by getting rid of &quot; for i in range(n): heap_permutation(data, n - 1) if n % 2 == 0: data[i], data[n-1] = data[n-1], data[i] else: data[0], data[n-1] = data[n-1], data[0]&quot; This overall resulted in the same output but with less words. . def heap_permutation(data, n): if n == 1: print(data) return from itertools import permutations perm = permutations([3,2,1]) for i in list(perm): print(i) . (3, 2, 1) (3, 1, 2) (2, 3, 1) (2, 1, 3) (1, 3, 2) (1, 2, 3) . &lt;/div&gt; .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/12/15/Lesson16.html",
            "relUrl": "/jupyter/2022/12/15/Lesson16.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Lesson 14-15 Homework",
            "content": ". Reflection . This lesson was has taught me new ways I can improve my coding skills. I can use libraries to make coding a lot more simpl and use stuff that has already been developed by others. Documentation makes my code readable. Programs use documentation to outline usage for users. The random library can be used in python which can be very handy in programs. Most programs such as videogames use randomization. . . Notes . Libraries and prewritten code can make writing algorithms easier . | Software libraries have procedures that are used in creating novel programs . | APIs(application program interfaces) explain how procedures in libraries should behave and be utilized . | Documentation makes it much easier to learn how to use libraries/APIs . | Existing code segments can be derived from existing sources . | random.randint(a, b): generates a random number . | . . Multiple Choice . What does the random(a,b) function generate? . A. A random integer from a to be exclusive . B. A random integer from a to b inclusive. &lt;/p&gt; C. A random word from variable a to variable b exclusive. . D. A random word from variable a to variable b inclusive. . Explanation: B has the integers listed . . What is x, y, and z in random.randrange(x, y, z)? . A. x = start, y = stop, z = step . B. x = start, y = step, z = stop &lt;/p&gt; C. x = stop, y = start, z = step . D. x = step, y = start, z = stop . . Which of the following is NOT part of the random library? . A. random.item &lt;/p&gt; B. random.random . C. random.shuffle . D. random.randint . Explanation: The other options are specific functions . . Short Answer Questions . What is the advantage of using libraries? We can access code that as already been developed in order to make coding something such as an algorithm less difficult. . . Write a thorough documentation of the following code. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; import random # implements list of names names_string = input(&quot;Give me everybody&#39;s names, seperated by a comma.&quot;) names = names_string.split(&quot;,&quot;) num_items = len(names) # Chooses random number random_choice = random.randint(0, num_items - 1) # puts together name and number person_who_will_pay = names[random_choice] # prints name print(f&quot;{person_who_will_pay} is going to buy the meal today!&quot;) . Jamili is going to buy the meal today! . import random score1 = 0 score2 = 0 def RandomNumberGame(): score1 = random.randint(1, 10) score2 = random.randint(1, 10) if score1 &gt; score2: print(&quot;Player 1 won with a score of &quot; + str(score1) + &quot; bananas&quot;) if score1 &lt; score2: print(&quot;Player 2 won with a score of &quot; + str(score2) + &quot; bananas&quot;) if score1 == score2: print(&quot;Player 1 and Player 2 have tied. Both have &quot; + str (score1) + &quot; bananas&quot;) RandomNumberGame() RandomNumberGame() . Player 2 won with a score of 5 bananas Player 2 won with a score of 10 bananas . import random names = [&quot;Qais&quot;, &quot;Jamili&quot;, &quot;Jamilee&quot;, &quot;Bob&quot;, &quot;Georgy&quot;, &quot;Michael&quot; ,] i = 0 print(&quot;5 random names:&quot;) while i &lt; 5: print(random.choice(names)) i += 1 . 5 random names: Bob Georgy Jamilee Qais Michael . EXTRA CREDIT . Tried my best but I don&#39;t think I did it right. . startEnd() import random width = 5 height = 5 obstacles = 10 maze = [[0 for i in range(width)] for j in range(height)] for i in range(obstacles): x = random.randint(0, width - 1) y = random.randint(0, height - 1) maze[x][y] = &#39;x&#39; startEnd() for row in maze: print(&#39; &#39;.join(str(cell) for cell in row)) . 0 0 0 x x x x 0 0 0 0 x 0 0 0 0 x 0 0 0 0 0 0 x x . &lt;/div&gt; .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/12/14/lesson14.html",
            "relUrl": "/jupyter/2022/12/14/lesson14.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Lesson 16 Homework",
            "content": ". Vocab/Notes . Simulation: A simpler abstraction of a very complicated natural phenomena Does not implement things that are to difficult to simulate | Uses less resources and better for predictions | Can use a psuedo-random number generator to represent things like roling a dice | . | . . Answer Table . Name: Ahmad Qais Jamili . 3: A: To mock imperfections from the real world . 4: B: Other aircraft . 5: C: Situation considered . 6: A: Simulation . 7: A: Simulation . 9: B: Experiment/calculation . . Extra Credit . import random print(&quot;Welcome to the guessing numbers simulation!&quot;) print(&quot;-&quot;) n = random.randrange(1,100) guess = int(input(&quot;Enter a number (1-100): &quot;)) while n!= guess: if guess &lt; n: print(&quot;Try to guess a higher number.&quot;) guess = int(input(&quot;Enter a number again: &quot;)) elif guess &gt; n: print(&quot;Go lower.&quot;) guess = int(input(&quot;Enter a number again: &quot;)) else: break print(&quot;you guessed it right!!&quot;) . Welcome to the guessing numbers simulation! - Try to guess a higher number. Try to guess a higher number. Try to guess a higher number. Try to guess a higher number. Try to guess a higher number. Try to guess a higher number. Try to guess a higher number. Try to guess a higher number. Try to guess a higher number. Go lower. Go lower. you guessed it right!! .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/12/14/Lesson15-16.html",
            "relUrl": "/jupyter/2022/12/14/Lesson15-16.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Vocabulary",
            "content": "Vocabulary . This is some vocabulary that I have learned throughout these lessons. . Variables, Data Types, Assignment Operators Managing Complexity with Variables: Lists, 2D Lists, Dictionaries, Class Algorithms, Sequence, Selection, Iteration Expressions, Comparison Operators, Booleans Expressions and Selection, Booleans Expressions and Iteration, Truth Tables Characters, Strings, Length, Concatenation, Upper, Lower, Traversing Strings Python If, Elif, Else conditionals; Nested Selection Statements Python For, While loops with Range, with List Combining loops with conditionals to Break, Continue Procedural Abstraction, Python Def procedures, Parameters, Return Values . . While loop: Code goes through elemetnts over and over again . Loops repeat something and its executed after its completed the repetition . Booleans- Recongnizes true/false . Iteration: Code goes through a segment . Pop: Takes away something at the end of the list . Increment/Decrement: Modifies the counter variable after each repetition . Array: Another name for a list . Initialization: What sets the counter variable to a starting value . Condition: Allows the computer to know whether or not to keep repeating the loop . Indexing: The position of an elemnt in a list starting from 0 . List Index: The position of an element in a list starting from 0 . Parameters: input values of a procedure . Arguments: specify values of the paramaters when the procedure is called . Append/Remove/Pop: Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item . Elements: Item in a list . Modularity: An splitting large procedures into smaller ones with more uses . Binary: A basee two numbering system . Return: sends the output of the procedure to where it was called . Variable: data that is assigned to and held within a chosen name . Loop: a system where a segment of code is repeated until a requirement is met . Procedure: a named group of instructions that have paramaters and return values . Procedural Abstraction: name for a process that allow a procedure to be used by only knowing what it does . . Notes on lesson 5-7 . Nested conditional: . A conditional inside of a conditional | Often used in algorithms in order to print specific data or run certain tasks. | We can use conditionals inside conditionals to create further conditions in algorithms. | We can use flowcharts to help display an easy to understand diagram of what we want a code segment to do. | . Boolean: . Binary variable with only two possible values, &quot;true&quot; or &quot;false&quot; | . Relational Operators: . Multiple operators which are used to evaluate 2 variables. | In pseudocode the relational operators are =, &gt;, &lt;, ≠, ≥, and ≤. | Other languages use different formats to represent these operators. For example, Python uses != instead of ≠. | . | These operators help determine the boolean value of a statement. | . Logical Operators: . Allow for boolean values to be evaluated. | Pseudocode uses the logical operators NOT, AND, and OR. Javascript uses the same logic, but uses different ways to represent the operators: &amp;&amp;(and), | |(or), |(not). | . | . Algorithm: . Finite set of instructions that accomplish a specific task | . Conditional Statements: . Conditional statements allow the code to act based on multiple conditions, such as user input or stored data. | We can use conditionals in algorithms in order to receive different outputs from a set of code, and help achieve the general purpose of the algorithm. | . Categories . Two broad types of conditional statements are if statements and if-else statements if statement: will go through certain statements if the if expression is true | if-else statement: will go through a statement no matter what, but the statement which is run depends on the if expression is true or false | . | . Flow Charts . We can use flowcharts to help organize the process of conditional statements. | .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/12/09/VOCABULARY.html",
            "relUrl": "/jupyter/2022/12/09/VOCABULARY.html",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "8 - 10 Lessons Homework",
            "content": "Vocabulary for this lesson . Elements - Item in a list. Pop- Take away something at the end of the list. Booleans- Recongnize true/false. Condition - Allows the computer to know whether or not to keep repeating the loop. Increment/Decrement - Modifies the counter variable after each repetition. Indexing/List Index - The position of an element in a list, starting from 0 Append/Remove/Pop : Various methods, append adds an element to the end, remove removes at an index, and pop removes the last item. Iteration- Way that code goes through a segment . Exercise 1 . list = [1, 2, 3, 4, 5] # Print this list in reverse orde list.reverse() print(list) . [5, 4, 3, 2, 1] . Excercise 2 . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] print(f&quot;Original {list}&quot;) sl = insertion_sort(list) print(f&quot;Sorted {list}&quot;) . Original [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] Sorted [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . QUIZ QUESTION REFLECTIONS . I got 8/10 a I missed # 7/8 . 7 I answered mutation but mutation alters what the list has and it does not return what base 0 is therefore it was wrong .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/12/07/homeworkforlesson.html",
            "relUrl": "/jupyter/2022/12/07/homeworkforlesson.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "3.3 - 4 Lessons Homework",
            "content": "3.3 Video 1 Hacks . Show two examples and label which one is sequence, selection, iteration . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . Answers 1 . All the steps combined are sequencing . The step &quot;for i in numbers:&quot; is iteration because they go through all the numbers. . &quot;if (numbers[i] % 2 == 0)&quot; is selection because they sort each number to find the even ones. . i = 1 starString = &quot;*&quot; while i &lt;= 5: j = 1 while j &lt;= i: print (&quot;*&quot;, end= &quot;&quot;) j += 1 print () i += 1 . * ** *** **** ***** . Answers 2 . All the steps are a sequence . &quot;While i &lt;= 5:&quot; is iteration because they repeat until i reaches 5 . &quot;While j &lt;= i:&quot; is selection because this is where they decide what j is . 3.3 Video 2 Hacks . Practice Problems given the following code segment below: a ⟵ 7 . b ⟵ 1 . c ⟵ 3 . d ⟵ 4 . a ⟵ b . b ⟵ c + d . d ⟵ b . find the value for a, b, c, d . a = 1, b = 7, c = 3, d = 7 . consider the following code segment: hot ⟵ true . cold ⟵ false . cold ⟵ hot . hot ⟵ cold . what are the values of hot and cold after executing the code segment? . the value of hot is true, the value of cold is true the value of hot is false, the value of cold is true the value of hot is true, the value of cold is false the value of hot is false, the value of cold is false . the value of hot is true, the value of cold is true | Make TWO of your own code segments that contain at least 5 defined variables, then provide the answer and EXPLAIN why your answer is correct. . Sequencing . num1 = 3 num2 = 1 num3 = 5 num1 = num2 + num3 num2 = num1 + num3 # num2 is now the new num1 + num3 . What is the value of num1 and num2? . num1 = 6, num2 = 11 . 3.3 Video 3 Hacks . 3.4 Video 1 Hacks . String Homework . Test 1 . firstName &lt;- &quot;Bob&quot; lastName &lt;- &quot;Smith&quot; var &lt;- substring(firstName, 1, 1) name &lt;- concat(lastName, var) email &lt;- concat(name, &quot;@gmail.com&quot;) DISPLAY(email) . What would the result be? SmithB@gmail.com Hint: var = &quot;B&quot; name = &quot;SmithB&quot; . Test 2 . word1 &lt;- &quot;computer&quot; word2 &lt;- &quot;textbooks&quot; length1 &lt;- len(word1)/2 length2 &lt;- len(word2)/3 first &lt;- substring(word1, 2, len1) second &lt;- substring(word2, len2+3, len2) newWord &lt;- concat(first, second) DISPLAY(newWord) . Result: ompuook Length 1 is 4 Length 2 is 3 .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/11/29/Homework.html",
            "relUrl": "/jupyter/2022/11/29/Homework.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 3 Sections 5-7 Hacks",
            "content": "Vocab . Booleans- Recongnize true/false. . Iteration- Way that code goes through a segment . 3.5 Hacks . Binary Practice . Using psuedocode operators determine if the statements are true or false. The number type will be indicated in parentheses. . 1. 90(D) = 1000(B) . A. True | B. False&lt;/li&gt; &lt;/ul&gt; 2. 10(D) ≠ 0110(B) . A. True&lt;/li&gt; B. False | &lt;/ul&gt; 3. 56(D) ≥ 111000(B) . A. True&lt;/li&gt; B. False | &lt;/ul&gt; 3. 99(D) &lt; 1110011(B) . A. True&lt;/li&gt; B. False | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Now, complete the binary truth tables . AND Operator Value 1 Value 2 Result . 1 | True | 1 | . True | 0 | 1 | . False | 1 | 0 | . 0 | False | 0 | . OR Operator Value 1 Value 2 Result . 1 | 1 | True | . 1 | 0 | False | . 0 | False | 0 | . 0 | 0 | False | . Not operator Not Value Result . Not | BLANK | 0 | . Not | 0 | BLANK | . . Python Practice . # Practice with these statements print(20 == 20) # How can you change the operator to print a value of False? By changing the sign. x = 40 y = 20 z = 10 print(x &gt; y + z) # How can this return true by only manipulating the operator? Change the x, y, and z value in order to make the sum of Y and Z equal to X. # Manipulate the variables x, y, and z to make the below statement return true print(30 == 30) . True True True . 3.6 Hacks . AP Prep . 1. What is displayed by this code? . result &lt;-- 75 | IF result &lt; 80 { DISPLAY(&quot;Please schedule a retake.&quot;) } | ELSE { DISPLAY(&quot;Nice job!&quot;) } | . Nice job! | Display | Please schedule a retake.&lt;/li&gt; 75 | &lt;/ol&gt; 2. How is an if statement different from an if-else statement. . Extra words. | An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions.&lt;/li&gt; They are the exact same. | An if statement will go through the entire code segment every single time and the if-else statement is always used in an algorithm, no matter the conditions. | &lt;/ol&gt; 3. What would be most appropriate for this situation? Ben wants to check his bank account. If his car fuel is full, he will go to the bank. Otherwise, he will go home. If he goes to the bank, he will withdraw money only if his balance is above $1000. . If statement | If-else statement&lt;/li&gt; &lt;/ol&gt; 4. What would be most appropriate for this situation? Luke wants to play basketball. If it is sunny outside he will go to the park to play basketball. . If statement&lt;/li&gt; If-else statement | &lt;/ol&gt; Using Python . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; animals = [&quot;lion&quot;, &quot;tiger&quot;, &quot;wildebeest&quot;, &quot;shark&quot;, &quot;jellyfish&quot;, &quot;blobfish&quot;, &quot;raven&quot;] for i in animals: if i == &quot;wildebeest&quot; or i == &quot;lion&quot;: print (i + &quot; Fun Fact: They live in the desert&quot;) # Practice # Using only one more if statement, alter the code to print out a statement saying if an animal lives in the desert, based on booleans . lion Fun Fact: They live in the desert wildebeest Fun Fact: They live in the desert . 3.7 Hacks . Exercise 1 . Create dictionaries for multiple food items, with the listed specifications Chicken Alfredo, Meat: Chicken, Time to Prepare: 60 minutes | Cheese Quesadilla, Meat: None, Time to Prepare: 10 minutes | Beef Wellington, Meat: Beef, Time to Prepare: 150 minutes | . | Used nested conditionals, determine which meal you can cook, given that a) you have no meat at home, and b) you only have 30 minutes to make the meal | . Chickendict = { &quot;Food Item:&quot; &quot; Chicken Alfredo&quot; &quot; Meat:&quot; &quot;Chicken&quot; &quot; Time to Prepare:&quot; &quot;60 Minutes&quot; } print (Chickendict) Cheesedict = { &quot;Food Item:&quot; &quot; Cheese Quesadilla&quot; &quot; Meat:&quot; &quot;None&quot; &quot; Time to Prepare:&quot; &quot;10 Minutes&quot; } print (Cheesedict) Beefdict = { &quot;Food Item:&quot; &quot; Beef Wellington&quot; &quot; Meat:&quot; &quot;Beef&quot; &quot; Time to Prepare:&quot; &quot;150 Minutes&quot; } print (Beefdict) . {&#39;Food Item: Chicken Alfredo Meat:Chicken Time to Prepare:60 Minutes&#39;} {&#39;Food Item: Cheese Quesadilla Meat:None Time to Prepare:10 Minutes&#39;} {&#39;Food Item: Beef Wellington Meat:Beef Time to Prepare:150 Minutes&#39;} . Exercise 2 . Make a flowchart(here is one we used) and write pseudocode for the following scenario. . Mr. Yeung would like to grade live reviews. | He wants to see if each student has at least 2 issues on their project. If they don&#39;t they receive a score of 2.0. | If they have at least 2 issues, check that they have completed at least 5 of their scrumboard tasks. | If they have completed 5 scrumboard tasks, give the student a 2.7. If they have not completed 5 scrumboard tasks, give them a score of 2.5. If they have completed more than 5 tasks, give them a score of 3.0. | How much would a student with 3 issues and 1 complete scrumboard task receive? | . &lt;/div&gt; | | | | | . | . | . | .",
            "url": "https://qaisj1.github.io/quissite/csp/2022/11/28/assignment.html",
            "relUrl": "/csp/2022/11/28/assignment.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Homework for lesson 3.9-3.11",
            "content": ". Problem 1. . Write this Boolean statement in the form of a conditional (if/else) statement: stayInside⟵((isCold) OR (isRaining)) . IF (isCold or isRaining) { . stayInside ⟵ True . } . ELSE { . stayInside ⟵ False . } . . Problem 2. . Create an algorithm that uses selection and/or iteration that will represent one player’s complete turn. . During a turn, each player gets 4 attempts/chances to get the greatest number possible. During each attempt, the player will use a random number generator to select a random number from 1 to 10. After they have had 4 chances, their score is the greatest number they received from the random number generator, and their turn is over. . import random numAttempts = [] i = 1 while i &lt;= 4: numAttempts.append(random.randint(1,10)) i = i +1 print(&quot;Attempts:&quot;, numAttempts) sort(randomNumber) print(&quot;Max Number:&quot;) print(max(numAttempts)) . Attempts: [1, 6, 6, 8] Max Number: 8 . . Problem 3. . Create an algorithm that will allow the arrow to reach the gray square: . Repeat until reach gray square: . If canmoveForward . Move_Forward . else { . if canturnright{ turnright } if canturnleft{ turnleft } . } } . . Problem 4. . Make a binary search tree of different the list [1,2,3,4,6,9,11,69] . . . Problem 5. . Explain thoroughly how to find the number 69 in the list above (use key words) . We can use sequential search | Iterate through the list | Compare each number until we find 69 | We can also use binary search | Begin from the middle index then continue to the other numbers | . . Problem 6. . Make a diagram explaining how you found the list (not tree, include equation . Middle index . (1+8)/2=4.5~5 . Make a diagram explaining how you found the list (not tree, include equation . . . Problem 7. . Put this list of strings in a order that can be used for binary search [“store”,”Market”,”Walmart”,Target”,”Ralphs”] . [&quot;Store”,”Walmart”,”Market”,Target”,”Ralphs”] . . Problem 8. . Explain why Binary Search is more efficient than Sequential Search . Binary search is more efficient because it moves exponentially while sequential search moves through the list one by one. Binary is able to search for half the numbers in a data set in one iteration, while sequential search has to go through every possibility. . . Problem 9 . [64,36,16,11,9] Explain which number you are finding, how many check it would take, and make a binary search tree . I am searching for the number 9, which would take 3 iterations. You would start at 16, the middle index. Then you would do 4+4/2 to get 4, so the next index would be 9. . .",
            "url": "https://qaisj1.github.io/quissite/2022/11/12/Lesson11.html",
            "relUrl": "/2022/11/12/Lesson11.html",
            "date": " • Nov 12, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "AP Exam",
            "content": ". Problem 35: Answer D is correct and I chose answer B. The last line in this code segment sets maxPS to 50 regardless of the value of time. . | Problem 40: Answer A is correct and answer C is incorrect. The value 8 would be the output if the statement DISPLAY(x + y) were executed. . | Problem 41: Answer B is correct and answer A is incorrect. This is the initial value of p. None of the variables has the value 10 after executing the code segment. . | Problem 42: Answer C answer is correct and answer D is incorrect. After initially assigning values to the variables, the code segment assigns the value 4 to num3 and assigns the value 8 to num1. The value of sum at the end of the code segment is 8 + 4 + 4, or 16. . | Problem 43: Answer C is correct and answer B is incorrect. This would be the value of result if the loop iterated one less time. . | Problem 44: Answer C is correct and answer A is inccorect. For any integer n, the value of n MOD 1 is always 0. . | Problem 47: Answer D is correct and answer C is incorrect. The eighth statement assigns the value of c + d / 2 (which is 50) to d. . | Problem 50: Answer A is correct and answer B is incorrect. This statement takes the first two characters of firstName and concatenates them with the first two characters of lastName, assigning a string that is four characters long to initials. . | .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/11/08/APEXAMblog.html",
            "relUrl": "/jupyter/2022/11/08/APEXAMblog.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Night at the Museum",
            "content": "Classes I visited . I saw other computer science projects which were very different from my groups. | I visited the 3d animation class and saw my DevOp&#39;s Matiullah Danish&#39;s art piece. | I visited the ceramics class and saw many interesting sculptures. I took a few photos of them. | . . Plans for next years project . Next year I plan to make a more useful project that involves more creativity and critical thinking. I would also like to make the project represent me more. | .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/11/07/Individualblog.html",
            "relUrl": "/jupyter/2022/11/07/Individualblog.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Javascript Webpage Using API Hacks",
            "content": "- What are some similarities you see with the javascript for the jokes api? .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/10/22/JavascripWebpageUsingApi.html",
            "relUrl": "/jupyter/2022/10/22/JavascripWebpageUsingApi.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Title",
            "content": "",
            "url": "https://qaisj1.github.io/quissite/2022/10/18/Hacks.html",
            "relUrl": "/2022/10/18/Hacks.html",
            "date": " • Oct 18, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "API",
            "content": "from urllib.parse import quote as url_encode import requests API_KEY = &quot;98ba704683msh59efed4f43e6ad3p1454bajsn635c4a91117d&quot; NOT_PROVIDED = &quot;&quot; class ApiError(Exception): pass class NotConfidentError(ApiError): pass class TranslateNotProvidedError(ApiError): pass class ExceedsMonthlyUsage(ApiError): pass class iluvuTranslator: def __init__(self, API_KEY): self.headers = { &quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;, &quot;X-RapidAPI-Key&quot;: API_KEY, &quot;X-RapidAPI-Host&quot;: &quot;google-translate1.p.rapidapi.com&quot; } def make_request(self, method, *args, **kwargs): r = requests.request(method, *args, **kwargs) # code for exceeding month usage if r.status_code == 429: raise ExceedsMonthlyUsage(f&quot;Response: {r.text}&quot;) # print(r.status_code) # print(r.text) return r def detect_language(self, text): url = &quot;https://google-translate1.p.rapidapi.com/language/translate/v2/detect&quot; payload = { &quot;q&quot;: url_encode(text), } r = self.make_request(&quot;POST&quot;, url, data=payload, headers=self.headers).json() data = r[&quot;data&quot;][&quot;detections&quot;][0][0] return (data[&quot;language&quot;], data[&quot;confidence&quot;]) def translate(self, text, language=&quot;&quot;, to=&quot;&quot;): if to is NOT_PROVIDED: raise TranslateNotProvidedError(&quot;add a language that that you want to translate to&quot;) if language is NOT_PROVIDED: language, confidence = self.detect_language(text) if confidence &lt; 0.5: raise NotConfidentError(f&quot;{confidence*100=}%&quot;) url = &quot;https://google-translate1.p.rapidapi.com/language/translate/v2&quot; payload = { &quot;source&quot;: language, &quot;q&quot;: text, &quot;target&quot;: to, } r = self.make_request(&quot;POST&quot;, url, data=payload, headers=self.headers).json() return r[&quot;data&quot;][&quot;translations&quot;][0][&quot;translatedText&quot;] if __name__ == &quot;__main__&quot;: int1 = input(&quot;Enter the language you want to translate. &gt;&gt;&quot;) int2 = input(&quot;Enter the language you want to translate to. &gt;&gt;&quot;) text = input(&quot;Enter your text. &gt;&gt;&quot;) translator = iluvuTranslator(API_KEY) print(&quot;Iluvutranslator&quot;) print(&quot;Translated from: &quot;,int1) print(&quot;Translated to: &quot;,int2) print(&quot;&quot;) print(&quot;Input: &quot;,text) print( &quot;Translation: &quot;, translator.translate(text, language=int1, to=int2) ) . Iluvutranslator Translated from: en Translated to: de Input: i love my dad. Translation: ich liebe meinen Vater. .",
            "url": "https://qaisj1.github.io/quissite/2022/10/10/APITRANSLATE.html",
            "relUrl": "/2022/10/10/APITRANSLATE.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;98ba704683msh59efed4f43e6ad3p1454bajsn635c4a91117d&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . This cell is dependent on running API call in cell above! . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://qaisj1.github.io/quissite/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter a is the 1 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 0 while i &lt;= 9: odds.append(i+1) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 1: newNumbers.append(numbers[i]) print(newNumbers) . [0, 1, 3, 5, 5, 7, 9, 10, 11, 13, 15, 15, 17, 19, 20, 21, 23, 25, 25, 27, 29, 30, 31, 33, 35, 35, 37, 39, 40, 41, 43, 45, 45, 47, 49, 50, 51, 53, 55, 55, 57, 59, 60, 61, 63, 65, 65, 67, 69, 70, 71, 73, 75, 75, 77, 79, 80, 81, 83, 85, 85, 87, 89, 90, 91, 93, 95, 95, 97, 99] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;tacos&quot;: 9.99, &quot;fries&quot;: 5.99, &quot;drink&quot;: 4.99} print (menu) order= input(&quot;Hi, What would you like to eat? &gt;&gt;&quot;) if order == &quot;tacos&quot;: print(&quot;you ordered tacos, your total is $5.99&quot;) elif order == &quot;fries&quot;: print(&quot;you ordered fries, your total is $9.99&quot;) elif order == &quot;drink&quot;: print(&quot;you ordered a drink, your total is $4.99&quot;) elif order != &quot;tacos&quot; or &quot;fries&quot; or &quot;drink&quot;: print(&quot;That item is not on the menu, try re-order&quot;) . {&#39;tacos&#39;: 9.99, &#39;fries&#39;: 5.99, &#39;drink&#39;: 4.99} you ordered tacos, your total is $5.99 . Hacks . What errors may arise in your project? . Some error that may arise in our project is dictionary errors, api errors, and syntax errors. When they input a letter it may not be read correctly and place the letter in the wrong spot or it may not say that a correct letter is included in a word. | . | What are some test cases that can be used? . We can test inputting some correct letters and some wrong letters. This will lead to our desired output. If we type in a wrong letter a body part will appear. | . | Make sure to document any bugs you encounter and how you solved the problem. . I will document any errors I have and inform my team. | . | What are “single” tests that you will perform on your project? Or, your part of the project? . I will first play the game for myself and then I will ask peers to review the game aswell. | . | .",
            "url": "https://qaisj1.github.io/quissite/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Scrum Diagram",
            "content": "This is my diagram . .",
            "url": "https://qaisj1.github.io/quissite/markdown/2022/09/26/Scrum.html",
            "relUrl": "/markdown/2022/09/26/Scrum.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Focus and habits notes",
            "content": ". Vocabulary . Psychology- Study of the human mind and its functions Mental health- A humans emotional well being Depression- Severe sadness inherited by a human Anxiety- Excessive nervousness or worrying about activities Stress- Mental state which results from demanding circumstances Emotion- Mood or feeling from someone Habits- Common actions taken by someone . . . Gratitude list . I am thankful for the roof over my head, my family, my teachers, food, my neighborhood, San Diego, my brother, my dog, video games, clothes, and air conditioning. — . . Note of Gratitude . I made a note of gratitude to my mom and to my friend. I told my friend how much I appreciated him. He said thank you but there was nothing else beyond that. I told my mom that I am very thankful for her and for everything that she does for me. She said that she is glad that I understand what she does for me and my brother. — . . My goals . I want to, be happy, get all A’s, do good in rugby, advance in my clubs, create my own brand, get my permit, and get a job. .",
            "url": "https://qaisj1.github.io/quissite/markdown/2022/09/20/Focus.html",
            "relUrl": "/markdown/2022/09/20/Focus.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "College board notes",
            "content": "Notes: Diver perspectives eliminate bias in development, Computing innovations include a program as a part of its function. Computing innovations are improved through collaberation. Github is used to work with your team. Commenting in code helps your teammates. Think-pair-share is a process where students think though a process alone. Computing innovation can be physical or non physical. . Hacks: Me and my partner are Afghan. We both enjoy computer science. He knows more about computer science than me. We both like going to the gym. .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/09/20/College.html",
            "relUrl": "/jupyter/2022/09/20/College.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "App Ideas",
            "content": "An idea me and Mati have for an app is to create a game. A game which involves a 2 by 2 snake. The snake will increase everytime it touches a red block. You can control the snake with 4 buttons. You can use the up arrow, down arrow, left arrow, and right arrow as inputs.If the snake hits a border the player ultimately loses the game. The twist to the game is that there is no limit for how large you can get. You will keep growing until you hit yourself or one of the borders. The snake game fits the criteria because it has functioning inputs and outputs. The game has a loop which is what happens when you lose. You are able to go back to the start of the game. When you lose the game your highscore is kept on a dictionary which shows you your most recent and your highest score. Snake also has the prodcedural abstraction which is what happens when you click the start. The game also features sequencing when you lose the game it lets you restart. Input and output is part of the testing too. Startimg the game and restarting. Also moving the snake with the buttons. The purpose of the game is to cure boredom and make the world a better place. .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/09/15/App_Ideas.html",
            "relUrl": "/jupyter/2022/09/15/App_Ideas.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Dictionary",
            "content": "print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;Qais Jamili&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 15 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;Qais Jamili&quot;: name, &quot;15&quot;: age, &quot;90.0&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name Qais Jamili &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 15 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 90.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;] &lt;class &#39;list&#39;&gt; length 3 - langs[0] Python &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;Qais Jamili&#39;: &#39;Qais Jamili&#39;, &#39;15&#39;: 15, &#39;90.0&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;]} &lt;class &#39;dict&#39;&gt; length 4 . KeyError Traceback (most recent call last) /mnt/c/Users/qaisj/vscode/quissite/_notebooks/2022-09-12-Dictionary.ipynb Cell 2 in &lt;cell line: 42&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/qaisj/vscode/quissite/_notebooks/2022-09-12-Dictionary.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=34&#39;&gt;35&lt;/a&gt; person = { &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/qaisj/vscode/quissite/_notebooks/2022-09-12-Dictionary.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=35&#39;&gt;36&lt;/a&gt; &#34;Qais Jamili&#34;: name, &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/qaisj/vscode/quissite/_notebooks/2022-09-12-Dictionary.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=36&#39;&gt;37&lt;/a&gt; &#34;15&#34;: age, &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/qaisj/vscode/quissite/_notebooks/2022-09-12-Dictionary.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=37&#39;&gt;38&lt;/a&gt; &#34;90.0&#34;: score, &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/qaisj/vscode/quissite/_notebooks/2022-09-12-Dictionary.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=38&#39;&gt;39&lt;/a&gt; &#34;langs&#34;: langs &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/qaisj/vscode/quissite/_notebooks/2022-09-12-Dictionary.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=39&#39;&gt;40&lt;/a&gt; } &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/qaisj/vscode/quissite/_notebooks/2022-09-12-Dictionary.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=40&#39;&gt;41&lt;/a&gt; print(&#34;person&#34;, person, type(person), &#34;length&#34;, len(person)) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/qaisj/vscode/quissite/_notebooks/2022-09-12-Dictionary.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=41&#39;&gt;42&lt;/a&gt; print(&#39;- person[&#34;name&#34;]&#39;, person[&#34;name&#34;], type(person[&#34;name&#34;])) KeyError: &#39;name&#39; . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Qais&quot;, &quot;LastName&quot;: &quot;Jamili&quot;, &quot;DOB&quot;: &quot;January 19&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;qaisjamili22@gmail.com&quot;, &quot;Owns_Cars&quot;:[&quot;4Runner&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Qais&#39;, &#39;LastName&#39;: &#39;Jamili&#39;, &#39;DOB&#39;: &#39;January 19&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;qaisjamili22@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Qais Jamili Residence: San Diego Birth Day: January 19 Cars: 4Runner . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Qais Jamili Residence: San Diego Birth Day: January 19 Cars: 4Runner . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Qais Jamili Residence: San Diego Birth Day: January 19 Cars: 4Runner .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/09/12/Dictionary.html",
            "relUrl": "/jupyter/2022/09/12/Dictionary.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Qais Logo",
            "content": "This is my logo . .",
            "url": "https://qaisj1.github.io/quissite/markdown/2022/09/08/logo.html",
            "relUrl": "/markdown/2022/09/08/logo.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Theme",
            "content": "The theme . .",
            "url": "https://qaisj1.github.io/quissite/markdown/2022/09/08/Theme.html",
            "relUrl": "/markdown/2022/09/08/Theme.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Python Quiz",
            "content": "import getpass, sys def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions on the topic of python.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What is python?&quot;) if rsp == &quot;A language that focuses on code readability&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What can it be used for?&quot;) if rsp == &quot;object oriented, structured, or functional tasks&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What language does python use?&quot;) if rsp == &quot;The english language&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, qaisjamili running /bin/python3 You will be asked 3 questions on the topic of python. Question: Are you ready to take a test? Answer: Question: What is python? A language that focuses on code readability is correct! Question: What can it be used for? object oriented, structured, or functional tasks is correct! Question: What language does python use? The english language is correct! qaisjamili you scored 3/3 .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/08/28/notebookquiz.html",
            "relUrl": "/jupyter/2022/08/28/notebookquiz.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Bash Checks",
            "content": "echo &quot;Using conditional statement to create a project directory and project&quot; echo &quot;It is possible to verify tools that are installed by running conditional commands to tell us the version of something.&quot; echo &quot;We can use conda list to verify all the pakcages and versions installed&quot; echo &quot;A git add command is to add needed files. The git commit command is used to commit to the correct repository. Git push is used to push changes to the repository&quot; echo &quot;Program a scipt to automate an action&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/APCSP # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /home/qaisjamili/vscode exists. Directory /home/qaisjamili/vscode/APCSP exists. .",
            "url": "https://qaisj1.github.io/quissite/2022/08/26/bash.html",
            "relUrl": "/2022/08/26/bash.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "My Dog",
            "content": "This is my Dog . .",
            "url": "https://qaisj1.github.io/quissite/markdown/2022/08/26/MyDog.html",
            "relUrl": "/markdown/2022/08/26/MyDog.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Installation Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 bash: python2: command not found . . Conda Packages . conda list . # packages in environment at /Users/johnmortensen/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.2.0 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 interchange 2021.0.4 pypi_0 pypi intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython-cypher 0.2.6 pypi_0 pypi ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 monotonic 1.6 pypi_0 pypi mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 neo4jrestclient 2.1.1 pypi_0 pypi neo4jupyter 0.2.0 pypi_0 pypi nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 pansi 2020.7.3 pypi_0 pypi param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prettytable 3.3.0 pypi_0 pypi prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 py2neo 2021.2.3 pypi_0 pypi pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 neo4jupyter 0.2.0 pypi_0 pypi . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: java /Users/johnmortensen/Library/Jupyter/kernels/java javascript /Users/johnmortensen/Library/Jupyter/kernels/javascript python3 /Users/johnmortensen/opt/anaconda3/share/jupyter/kernels/python3 bash /usr/local/share/jupyter/kernels/bash . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /Users/johnmortensen/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://qaisj1.github.io/quissite/techtalk/bash_checks",
            "relUrl": "/techtalk/bash_checks",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "What is python?",
            "content": "Hello, inorder to do the python quiz you must understand a few components. What is python? Python is a high-level and general-purpose language that focuses on code readability. It’s one of the most popular beginner languages because of its ease of use, wide application, active community, and freedom of use. Programmers can use it for object-oriented, structured, or functional tasks. Python has a comprehensive standard library, which has earned the language the title “batteries included.” The libraries provide tools for many tasks, such as creating internet applications, graphical user interfaces, and data analytics. . The ease of use of this language is because of its simple, less-cluttered syntax and grammar with freedom of methodology during programming. Unlike most languages, python uses English words instead of punctuation. It also has fewer exceptional cases and syntactic exceptions than C language. Employers can use it in information technology, engineering, professional services, and design. Python helps you work fast to integrate systems as a glue language. It’s also a popular rapid application development (RAD) language. .",
            "url": "https://qaisj1.github.io/quissite/markdown/2022/08/25/Qais.html",
            "relUrl": "/markdown/2022/08/25/Qais.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://qaisj1.github.io/quissite/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Performance Task Scoring 3",
            "content": "Submission 1 . Reporting Category Score Student Comments . Program Purpose and Function | 1 | Program purpose, functionality, input, and output are clearly given. | . Data Abstraction | 0 | 2 of 3 criteria is not met. Both code segments are provided, but second segmentis not acessing data from the list. | . Managing Complexity | 0 | Does not manage the complexity. | . Procedural Abstraction | 0 | Missing data abstraction and complexity management. The parameter passes through the series of If, Else if statements and results in a different output depending on both the user’s input and the computer’s input. | . Algorithm Implementation | 1 | Loop, iteration and sequencing is provided. CLearly explains program so it can be remade. | . Testing | 1 | Two calls are described. Each condition is tested and the results are described. | . Submission 2 . Reporting Category Score Student comments . Program Purpose and Function | 1 | Program purpose, functionality, input, and output are clearly given. | . Data Abstraction | 1 | Program segments are shown, the list variable is identified, and the data of the list is used in the program. | . Managing Complexity | 1 | Program had a list being used to manage complexity. Explained how the program uses the list. | . Procedural Abstraction | 1 | Student developed procedure. | . Algorithm Implementation | 1 | Loop, iteration and sequencing is provided and could be recreated. | . Testing | 1 | Two calls are described. Output clearly shows the result. | . Submission 3 . Reporting Category Score Student comments . Program Purpose and Function | 1 | Program purpose, functionality, input, and output are clearly given. | . Data Abstraction | 0 | No criteria met. | . Managing Complexity | 0 | Manages complexity but not effectively and did not explain how. | . Procedural Abstraction | 0 | Student developed procedure, but lacks data. | . Algorithm Implementation | 0 | No iteration included. | . Testing | 0 | No calls. | . Submission 4 . Reporting Category Score Student comments . Program Purpose and Function | 1 | Program purpose, functionality, input, and output are clearly given. | . Data Abstraction | 1 | Program segments are provided as well as the list variable. | . Managing Complexity | 1 | Manages complexity and explains how other ways to manage. | . Procedural Abstraction | 1 | Student developed procedure. | . Algorithm Implementation | 1 | Detailed enoguh to be recreated | . Testing | 0 | Results from calls are not very good | .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/01/22/gradingsubmissions.html",
            "relUrl": "/jupyter/2022/01/22/gradingsubmissions.html",
            "date": " • Jan 22, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Performance Task Scoring 2",
            "content": "Sample I . Reporting Category Student Score College Board Score Student Comments . Program Purpose and Function | 0 | 0 | Didn&#39;t explain what the program is used for and how he coded it. There was no purpose given instead he just said &quot; The purpose of this code is for you to see all the animals and to identify them when you&#39;re asked later&quot; which is more of a explanation of what it does and not why someone would want to use it. | . Data Abstraction | 0 | 0 | Not enough detail was given. Provided 2 distinct code segments which identifies as animalList, but animalList is not being used in either code segment. | . Managing Complexity | 0 | 0 | Nothing was shown. | . Procedural Abstraction | 1 | 0 | Parameters for function are shown and explained how they are used for the program. | . Algorithm Implementation | 1 | 0 | Loop, iteration and sequencing is provided. | . Testing | 0 | 1 | Two calls are described. Each condition is tested and the results are given. | . Sample B . Reporting Category Student Score College Board Score Student Comments . Program Purpose and Function | 1 | 1 | Provided clear explanation of what the program is meant to do and how it can function based on a users input. | . Data Abstraction | 1 | 1 | Provided two distinct code segments. First code segment shows data being stored in the identified list and the second shows the data being accessed from an identified list under a new name since it is passed as a parameter. | . Managing Complexity | 1 | 1 | Provided list which manages complexity. Also explained how the code would be written differently without the list and how it would make the code more cluttered. | . Procedural Abstraction | 1 | 1 | Provided student-developed procedure, createPoems, with four parameters that are used in the procedure. Parameters for function are shown and explained how they are used for the program. | . Algorithm Implementation | 1 | 1 | Loop, iteration and sequencing is provided. Explained in detail how the algorithm in the procedure works so it can be recreated. | . Testing | 1 | 1 | They also explained what the conditions were. Two calls are described. Each condition is tested and the results are given. | . Sample D . Reporting Category Student Score College Board Score Student Comments . Program Purpose and Function | 1 | 1 | Provided the functionality of program and demonstrated the input and output in video. | . Data Abstraction | 1 | 1 | Two code segments are provided. The first segment shows data being stored in the identified list, and a second segment shows data being accessed from the list in a loop via a parametermthat is set to the identified list. | . Managing Complexity | 1 | 1 | Provided includes a list that combines six rankings and an image URL for a single character into one collection to pass to the function that determines a winner, managing complexity in the program code. | . Procedural Abstraction | 1 | 1 | Provided a student-developed procedure, findWinner, with two parameters that are used in the procedure. | . Algorithm Implementation | 1 | 1 | Explains in detail how the algorithm in the procedure works so it can be recreated. | . Testing | 1 | 1 | Provides two calls to the procedure with different arguments that lead to different results from the procedure. The first call uses the arguments Vision and Bishop. | . Sample G . Reporting Category Student Score College Board Score Student Comments . Program Purpose and Function | 1 | 1 | Provided the program&#39;s purpose and how it works, and described the input and output. | . Data Abstraction | 1 | 0 | Two code segments are provided. | . Managing Complexity | 1 | 0 | Provided a list in the program code which is used to manage complexity. | . Procedural Abstraction | 1 | 1 | Provided procedure called isitcorrect, with one explicit parameter, checkanswer, and a call to this procedure in a second code segment using the argument, answer. | . Algorithm Implementation | 1 | 1 | Explains in detail how the algorithm in the procedure works so it can be recreated. | . Testing | 0 | 0 | Provides the conditions being tested rather than two different arguments that cause a different segment of code to execute. | .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/01/11/Performancetask2.html",
            "relUrl": "/jupyter/2022/01/11/Performancetask2.html",
            "date": " • Jan 11, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Model and Object Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | . Class and Object Code . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, classof, password, dob): self._name = name # variables with self prefix become part of the object, self._uid = uid self._classof = classof self.set_password(password) self._dob = dob @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def classof(self): return self._classof @classof.setter def classof(self, classof): self.classof = classof # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;classof&quot; : self.classof, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, classof={self._classof} password={self._password},dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, classof=&#39;1867&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11)) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . JSON ready string: {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;classof&#34;: &#34;1867&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_classof&#39;: &#39;1867&#39;, &#39;_password&#39;: &#39;sha256$2fRVnfBKNwjo2H1Q$131cb51d3e9101e0073d8ed556f88e00ab0ecb029307a3db389c0e1899ad767c&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11)} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classof&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classof&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, classof=1867 password=sha256$2fRVnfBKNwjo2H1Q$131cb51d3e9101e0073d8ed556f88e00ab0ecb029307a3db389c0e1899ad767c,dob=1847-02-11) .",
            "url": "https://qaisj1.github.io/quissite/jupyter/2022/01/10/modelandobject.html",
            "relUrl": "/jupyter/2022/01/10/modelandobject.html",
            "date": " • Jan 10, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Table",
          "content": "&lt;/head&gt; Table . Name Grade Grade in Comp Sci . Qais Jamili | 10th | B+ | . Mati Danish | 11th | B | . Nikhil Chakravarthula | 10th | B+ | . Vyaan Gautam | 10th | B | &lt;/table&gt; &lt;/html&gt; .",
          "url": "https://qaisj1.github.io/quissite/Table/",
          "relUrl": "/Table/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://qaisj1.github.io/quissite/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://qaisj1.github.io/quissite/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}